package hogwarts;

import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;
import javax.swing.DefaultListModel;

/**
 *
 * @author Henric Berg and Peter Karlsson
 */
public class TeacherActions extends javax.swing.JFrame {
/**
 * Denna klass är lärarnas gränssnitt. Den används även av lärare med admin-status.
 */
    
    
    
    String pwd;                 //Här deklareras fält för lösenord, databas och admin-status.
    InfDB db;
    boolean admin = false;

    /**
     * Creates new form TeacherActions
     */
    public TeacherActions(String pwd, boolean admin) { //Konstruktorn ber Database-klassen att ansluta till/returnera ett databas-objekt, samt anger lärarens lösenord och kontrollerar admin-status.
        initComponents();
        this.pwd = pwd;
        db = Database.getDB();

        if (admin) {                        //Om du har loggat in som administratör så är "admin" true, och då kan du använda Administratörfunktioner-knappen, som leder till admin-gränssnittet.
            this.admin = admin;             //Den knappen kan inte användas (den är inte satt som 'enabled') om du inte är en administratör.
            btnAdmin.setEnabled(true);
        }
        getLayout("pnlStart"); //Konstruktorn ber getLayout-metoden att visa den tomma start-containern.

    }

    public void getLayout(String panelName) { //Denna metods jobb är att initialisera, och visa olika containers beroende på vilken funktion/knapp som användaren vill utnyttja.
                                              //Metoden tar endast emot containerns/panelens namn - och visar den.
        CardLayout card = (CardLayout) pnlTeacherMain.getLayout();
        card.show(pnlTeacherMain, panelName);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblQuestion = new javax.swing.JLabel();
        btnLogOut = new javax.swing.JButton();
        btnTeacherPassword = new javax.swing.JButton();
        btnTeacherRegisterStudent = new javax.swing.JButton();
        btnTeacherUpdateStudent = new javax.swing.JButton();
        btnTeacherHouseCupChange = new javax.swing.JButton();
        btnTeacherAddStudentGrade = new javax.swing.JButton();
        btnTeacherChangeStudentGrade = new javax.swing.JButton();
        btnAdmin = new javax.swing.JButton();
        pnlTeacherMain = new javax.swing.JPanel();
        pnlStart = new javax.swing.JPanel();
        pnlChangePwd = new javax.swing.JPanel();
        lblChangePwd = new javax.swing.JLabel();
        btnChangePwd = new javax.swing.JButton();
        lblNewPwd = new javax.swing.JLabel();
        lblPwdRepeat = new javax.swing.JLabel();
        lblPwdChangeDone = new javax.swing.JLabel();
        pwdNewPwd = new javax.swing.JPasswordField();
        pwdRepeatPwd = new javax.swing.JPasswordField();
        pnlRegisterStudent = new javax.swing.JPanel();
        lblRegisterStudent = new javax.swing.JLabel();
        lblStudentFirstName = new javax.swing.JLabel();
        txtRegisterStudentFirstName = new javax.swing.JTextField();
        lblStudentLastName = new javax.swing.JLabel();
        txtRegisterStudentLastName = new javax.swing.JTextField();
        cBoxRegisterStudentHouses = new javax.swing.JComboBox();
        lblHouseChoice = new javax.swing.JLabel();
        scrRooms = new javax.swing.JScrollPane();
        lstRooms = new javax.swing.JList();
        lblRooms = new javax.swing.JLabel();
        btnRegisterStudent = new javax.swing.JButton();
        lblStudentIsRegistered = new javax.swing.JLabel();
        pnlTeacherUpdateStudent = new javax.swing.JPanel();
        lblChangeStudent = new javax.swing.JLabel();
        lblChangeStudentFirstNameSearch = new javax.swing.JLabel();
        txtChangeStudentFirstNameSearch = new javax.swing.JTextField();
        btnStudentChangeSearch = new javax.swing.JButton();
        txtChangeStudentLastNameSearch = new javax.swing.JTextField();
        lblChangeStudentLastNameSearch = new javax.swing.JLabel();
        txtChangeStudentFirstName = new javax.swing.JTextField();
        txtChangeStudentLastName = new javax.swing.JTextField();
        lblChangeStudentFirstName = new javax.swing.JLabel();
        lblChangeStudentLastName = new javax.swing.JLabel();
        lblChangeStudentRoom = new javax.swing.JLabel();
        lblChangeSearch = new javax.swing.JLabel();
        btnChangeStudent = new javax.swing.JButton();
        scrChangeStudents = new javax.swing.JScrollPane();
        lstChangeStudents = new javax.swing.JList();
        lblChangeStudentsFound = new javax.swing.JLabel();
        lblChangeSelectedStudent = new javax.swing.JLabel();
        lblChangeStudentInfo = new javax.swing.JLabel();
        lblChangeStudentID = new javax.swing.JLabel();
        txtChangeStudentIDText = new javax.swing.JLabel();
        lblChangeStudentDone = new javax.swing.JLabel();
        scrChangeRooms = new javax.swing.JScrollPane();
        lstChangeRooms = new javax.swing.JList();
        cBoxChangeHouse = new javax.swing.JComboBox();
        lblChangeHouse = new javax.swing.JLabel();
        lblChangeStudentCourse = new javax.swing.JLabel();
        cBoxChangeStudentSubject = new javax.swing.JComboBox();
        lblChangeStudentSubject = new javax.swing.JLabel();
        scrChangeStudentCourse = new javax.swing.JScrollPane();
        lstChangeStudentCourse = new javax.swing.JList();
        lblChangeStudentCourseInfo = new javax.swing.JLabel();
        btnChangeStudentCourse = new javax.swing.JButton();
        pnlHouseCupPoints = new javax.swing.JPanel();
        cBoxHouseCupPointsHouses = new javax.swing.JComboBox();
        lblChangeHousePoints = new javax.swing.JLabel();
        lblChangePointsHouse = new javax.swing.JLabel();
        lblHouseCurrentPointText = new javax.swing.JLabel();
        lblHouseCurrentPoints = new javax.swing.JLabel();
        lblAddPoints = new javax.swing.JLabel();
        txtAddPoints = new javax.swing.JTextField();
        lblSubtractPoints = new javax.swing.JLabel();
        txtSubtractPoints = new javax.swing.JTextField();
        btnSubtractPoints = new javax.swing.JButton();
        btnAddPoints = new javax.swing.JButton();
        pblTeacherRegisterGrade = new javax.swing.JPanel();
        lblTeacherRegisterGrade = new javax.swing.JLabel();
        lblRegisterGradeSearch = new javax.swing.JLabel();
        lblRegisterGradeFirstName = new javax.swing.JLabel();
        txtRegisterGradeFirstName = new javax.swing.JTextField();
        lblRegisterGradeLastName = new javax.swing.JLabel();
        btnRegisterGradeSearch = new javax.swing.JButton();
        txtRegisterGradeLastName = new javax.swing.JTextField();
        lblRegisterGradeFound = new javax.swing.JLabel();
        scrRegisterGradeStudents = new javax.swing.JScrollPane();
        lstRegisterGradeStudents = new javax.swing.JList();
        lblRegisterGradeFoundInfo = new javax.swing.JLabel();
        lblRegisterGradeSelectedStudent = new javax.swing.JLabel();
        lblRegisterGradeSelectedStudentInfo = new javax.swing.JLabel();
        cBoxRegisterGradeChooseSubject = new javax.swing.JComboBox();
        lblRegisterGradeChooseSubject = new javax.swing.JLabel();
        scrRegisterGradeCourses = new javax.swing.JScrollPane();
        lstRegisterGradeCourses = new javax.swing.JList();
        lblRegisterGradeCourses = new javax.swing.JLabel();
        cBoxRegisterGradeList = new javax.swing.JComboBox();
        lblRegisterGradeList = new javax.swing.JLabel();
        btnRegisterGrade = new javax.swing.JButton();
        lblRegisterGradeID = new javax.swing.JLabel();
        lblRegisterGradeDone = new javax.swing.JLabel();
        lblRegisterGradeText = new javax.swing.JLabel();
        pnlTeacherChangeGrade = new javax.swing.JPanel();
        btnChangeGrade = new javax.swing.JButton();
        lblChangeGradeID = new javax.swing.JLabel();
        lblChangeGradeDone = new javax.swing.JLabel();
        cBoxChangeGradeList = new javax.swing.JComboBox();
        lblChangeGradeList = new javax.swing.JLabel();
        cBoxChangeGradeChooseSubject = new javax.swing.JComboBox();
        txtChangeGradeLastName = new javax.swing.JTextField();
        btnChangeGradeSearch = new javax.swing.JButton();
        lblChangeGradeSelectedStudentInfo = new javax.swing.JLabel();
        scrChangeGradeCourses = new javax.swing.JScrollPane();
        lstChangeGradeCourses = new javax.swing.JList();
        lblChangeGradeChooseSubject = new javax.swing.JLabel();
        lblChangeGradeFound = new javax.swing.JLabel();
        scrChangeGradeStudents = new javax.swing.JScrollPane();
        lstChangeGradeStudents = new javax.swing.JList();
        lblChangeGradeSelectedStudent = new javax.swing.JLabel();
        lblChangeGradeFoundInfo = new javax.swing.JLabel();
        lblTeacherChangeGrade = new javax.swing.JLabel();
        lblChangeGradeSearch = new javax.swing.JLabel();
        lblChangeGradeCourses = new javax.swing.JLabel();
        lblChangeGradeFirstName = new javax.swing.JLabel();
        txtChangeGradeFirstName = new javax.swing.JTextField();
        lblChangeGradeLastName = new javax.swing.JLabel();
        lblChangeGradeText = new javax.swing.JLabel();
        lblChangeGradeSelectedGradeText = new javax.swing.JLabel();
        lblChangeGradeSelectedGrade = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        lblQuestion.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblQuestion.setText("Välj funktion:");

        btnLogOut.setText("Logga ut");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        btnTeacherPassword.setText("Ändra mitt lösenord");
        btnTeacherPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeacherPasswordActionPerformed(evt);
            }
        });

        btnTeacherRegisterStudent.setText("Registrera nya elever");
        btnTeacherRegisterStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeacherRegisterStudentActionPerformed(evt);
            }
        });

        btnTeacherUpdateStudent.setText("Ändra information på elev");
        btnTeacherUpdateStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeacherUpdateStudentActionPerformed(evt);
            }
        });

        btnTeacherHouseCupChange.setText("Ändra på huspoäng");
        btnTeacherHouseCupChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeacherHouseCupChangeActionPerformed(evt);
            }
        });

        btnTeacherAddStudentGrade.setText("Registrera nytt elev-betyg");
        btnTeacherAddStudentGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeacherAddStudentGradeActionPerformed(evt);
            }
        });

        btnTeacherChangeStudentGrade.setText("Ändra på elev-betyg");
        btnTeacherChangeStudentGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeacherChangeStudentGradeActionPerformed(evt);
            }
        });

        btnAdmin.setText("Administratörsfunktioner");
        btnAdmin.setEnabled(false);
        btnAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminActionPerformed(evt);
            }
        });

        pnlTeacherMain.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout pnlStartLayout = new javax.swing.GroupLayout(pnlStart);
        pnlStart.setLayout(pnlStartLayout);
        pnlStartLayout.setHorizontalGroup(
            pnlStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 730, Short.MAX_VALUE)
        );
        pnlStartLayout.setVerticalGroup(
            pnlStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 527, Short.MAX_VALUE)
        );

        pnlTeacherMain.add(pnlStart, "pnlStart");

        lblChangePwd.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblChangePwd.setText("Ändra mitt lösenord");

        btnChangePwd.setText("Ändra lösenord");
        btnChangePwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePwdActionPerformed(evt);
            }
        });

        lblNewPwd.setText("Ange nytt lösenord:");

        lblPwdRepeat.setText("Upprepa det nya lösenordet:");

        lblPwdChangeDone.setText(" ");

        javax.swing.GroupLayout pnlChangePwdLayout = new javax.swing.GroupLayout(pnlChangePwd);
        pnlChangePwd.setLayout(pnlChangePwdLayout);
        pnlChangePwdLayout.setHorizontalGroup(
            pnlChangePwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChangePwdLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlChangePwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblChangePwd)
                    .addComponent(lblPwdChangeDone)
                    .addGroup(pnlChangePwdLayout.createSequentialGroup()
                        .addGroup(pnlChangePwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNewPwd)
                            .addComponent(lblPwdRepeat))
                        .addGap(15, 15, 15)
                        .addGroup(pnlChangePwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pwdRepeatPwd)
                            .addComponent(btnChangePwd)
                            .addComponent(pwdNewPwd))))
                .addContainerGap(406, Short.MAX_VALUE))
        );
        pnlChangePwdLayout.setVerticalGroup(
            pnlChangePwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChangePwdLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblChangePwd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPwdChangeDone)
                .addGap(25, 25, 25)
                .addGroup(pnlChangePwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNewPwd)
                    .addComponent(pwdNewPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlChangePwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwdRepeatPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPwdRepeat))
                .addGap(18, 18, 18)
                .addComponent(btnChangePwd)
                .addContainerGap(330, Short.MAX_VALUE))
        );

        pnlTeacherMain.add(pnlChangePwd, "pnlChangePwd");

        lblRegisterStudent.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblRegisterStudent.setText("Registrera ny elev");

        lblStudentFirstName.setText("Elevens förnamn:");

        lblStudentLastName.setText("Elevens efternamn:");

        cBoxRegisterStudentHouses.setToolTipText("");
        cBoxRegisterStudentHouses.setPreferredSize(new java.awt.Dimension(90, 60));
        cBoxRegisterStudentHouses.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cBoxRegisterStudentHousesPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        lblHouseChoice.setText("Välj elevhem:");

        scrRooms.setBorder(null);

        lstRooms.setBackground(new java.awt.Color(240, 240, 240));
        scrRooms.setViewportView(lstRooms);

        lblRooms.setText("Välj sovsal i listan:");

        btnRegisterStudent.setText("Registrera elev");
        btnRegisterStudent.setPreferredSize(new java.awt.Dimension(90, 60));
        btnRegisterStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterStudentActionPerformed(evt);
            }
        });

        lblStudentIsRegistered.setText(" ");

        javax.swing.GroupLayout pnlRegisterStudentLayout = new javax.swing.GroupLayout(pnlRegisterStudent);
        pnlRegisterStudent.setLayout(pnlRegisterStudentLayout);
        pnlRegisterStudentLayout.setHorizontalGroup(
            pnlRegisterStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRegisterStudentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRegisterStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRegisterStudent)
                    .addGroup(pnlRegisterStudentLayout.createSequentialGroup()
                        .addGroup(pnlRegisterStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlRegisterStudentLayout.createSequentialGroup()
                                .addGroup(pnlRegisterStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(pnlRegisterStudentLayout.createSequentialGroup()
                                        .addGroup(pnlRegisterStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblStudentFirstName)
                                            .addComponent(lblStudentLastName)
                                            .addComponent(lblHouseChoice))
                                        .addGap(16, 16, 16)
                                        .addGroup(pnlRegisterStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtRegisterStudentLastName)
                                            .addComponent(txtRegisterStudentFirstName)
                                            .addComponent(cBoxRegisterStudentHouses, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(btnRegisterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlRegisterStudentLayout.createSequentialGroup()
                                .addComponent(lblStudentIsRegistered)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(pnlRegisterStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRooms))))
                .addContainerGap(366, Short.MAX_VALUE))
        );
        pnlRegisterStudentLayout.setVerticalGroup(
            pnlRegisterStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRegisterStudentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRegisterStudent)
                .addGap(18, 18, 18)
                .addGroup(pnlRegisterStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudentFirstName)
                    .addComponent(txtRegisterStudentFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRooms))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlRegisterStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlRegisterStudentLayout.createSequentialGroup()
                        .addGroup(pnlRegisterStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtRegisterStudentLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStudentLastName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlRegisterStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cBoxRegisterStudentHouses, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHouseChoice))
                        .addGap(33, 33, 33)
                        .addComponent(btnRegisterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblStudentIsRegistered))
                    .addComponent(scrRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pnlTeacherMain.add(pnlRegisterStudent, "pnlRegisterStudent");

        lblChangeStudent.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblChangeStudent.setText("Ändra information om elev");

        lblChangeStudentFirstNameSearch.setText("Förnamn:");

        btnStudentChangeSearch.setText("Hitta elever");
        btnStudentChangeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStudentChangeSearchActionPerformed(evt);
            }
        });

        lblChangeStudentLastNameSearch.setText("Efternamn:");

        lblChangeStudentFirstName.setText("Nytt förnamn:");

        lblChangeStudentLastName.setText("Nytt efternamn:");

        lblChangeStudentRoom.setText("Ny sovsal:");

        lblChangeSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeSearch.setText("Här kan du söka efter elever");

        btnChangeStudent.setText("Ändra");
        btnChangeStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeStudentActionPerformed(evt);
            }
        });

        lstChangeStudents.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstChangeStudentsValueChanged(evt);
            }
        });
        scrChangeStudents.setViewportView(lstChangeStudents);

        lblChangeStudentsFound.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeStudentsFound.setText("Här visas de elever med det angivna namnet");

        lblChangeSelectedStudent.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeSelectedStudent.setText("Här kan elevens uppgifter ändras när du har klickat på denne i listan");

        lblChangeStudentInfo.setText(" Elev ID, Förnamn, Efternamn, Sovsal");

        lblChangeStudentID.setToolTipText("");

        txtChangeStudentIDText.setText("Elev ID:");

        scrChangeRooms.setViewportView(lstChangeRooms);

        cBoxChangeHouse.setToolTipText("");
        cBoxChangeHouse.setPreferredSize(new java.awt.Dimension(90, 60));
        cBoxChangeHouse.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cBoxChangeHousePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        lblChangeHouse.setText("Nytt elevhem:");

        lblChangeStudentCourse.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeStudentCourse.setText("Här kan du registrera eleven på en kurs");

        cBoxChangeStudentSubject.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cBoxChangeStudentSubjectPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        lblChangeStudentSubject.setText("Välj först ämne, sen kurs i listan:");

        scrChangeStudentCourse.setViewportView(lstChangeStudentCourse);

        lblChangeStudentCourseInfo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblChangeStudentCourseInfo.setText("Kurs ID, Kursnamn");

        btnChangeStudentCourse.setText("Registrera elev på kurs");
        btnChangeStudentCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeStudentCourseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTeacherUpdateStudentLayout = new javax.swing.GroupLayout(pnlTeacherUpdateStudent);
        pnlTeacherUpdateStudent.setLayout(pnlTeacherUpdateStudentLayout);
        pnlTeacherUpdateStudentLayout.setHorizontalGroup(
            pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                        .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblChangeStudent)
                            .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                                .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtChangeStudentFirstNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblChangeStudentFirstNameSearch))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblChangeStudentLastNameSearch)
                                    .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                                        .addComponent(txtChangeStudentLastNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblChangeStudentDone))))
                            .addComponent(btnStudentChangeSearch))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                        .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                                .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                                            .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblChangeStudentFirstName)
                                                .addComponent(lblChangeStudentLastName)
                                                .addComponent(txtChangeStudentIDText))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(btnChangeStudent)
                                                .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                                                    .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(txtChangeStudentFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtChangeStudentLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblChangeStudentID))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(cBoxChangeHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblChangeHouse))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(lblChangeStudentRoom)
                                                        .addComponent(scrChangeRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addComponent(lblChangeSearch)
                                        .addComponent(lblChangeSelectedStudent))
                                    .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                                        .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnChangeStudentCourse)
                                            .addComponent(lblChangeStudentSubject)
                                            .addComponent(cBoxChangeStudentSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblChangeStudentCourseInfo)
                                            .addComponent(scrChangeStudentCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE))
                            .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                                .addComponent(lblChangeStudentCourse)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTeacherUpdateStudentLayout.createSequentialGroup()
                                .addComponent(lblChangeStudentsFound)
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTeacherUpdateStudentLayout.createSequentialGroup()
                                .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblChangeStudentInfo)
                                    .addComponent(scrChangeStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())))))
        );
        pnlTeacherUpdateStudentLayout.setVerticalGroup(
            pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblChangeStudent)
                .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChangeStudentFirstNameSearch)
                            .addComponent(lblChangeStudentLastNameSearch)
                            .addComponent(lblChangeStudentInfo)))
                    .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChangeStudentsFound)
                            .addComponent(lblChangeSearch))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                        .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtChangeStudentFirstNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtChangeStudentLastNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblChangeStudentDone))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStudentChangeSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblChangeStudentCourse)
                        .addGap(15, 15, 15)
                        .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChangeStudentSubject)
                            .addComponent(lblChangeStudentCourseInfo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                                .addComponent(cBoxChangeStudentSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnChangeStudentCourse))
                            .addComponent(scrChangeStudentCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(lblChangeSelectedStudent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChangeStudentID)
                            .addComponent(txtChangeStudentIDText)
                            .addComponent(lblChangeHouse)
                            .addComponent(lblChangeStudentRoom))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrChangeRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                                .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlTeacherUpdateStudentLayout.createSequentialGroup()
                                        .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(txtChangeStudentFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblChangeStudentFirstName))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pnlTeacherUpdateStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(txtChangeStudentLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblChangeStudentLastName)))
                                    .addComponent(cBoxChangeHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnChangeStudent))))
                    .addComponent(scrChangeStudents))
                .addContainerGap())
        );

        pnlTeacherMain.add(pnlTeacherUpdateStudent, "pnlTeacherUpdateStudent");

        cBoxHouseCupPointsHouses.setToolTipText("");
        cBoxHouseCupPointsHouses.setPreferredSize(new java.awt.Dimension(90, 60));
        cBoxHouseCupPointsHouses.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cBoxHouseCupPointsHousesPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        lblChangeHousePoints.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblChangeHousePoints.setText("Registrera eller dra av huspoäng");

        lblChangePointsHouse.setText("Välj elevhem:");

        lblHouseCurrentPointText.setText("Nuvarande poäng:");

        lblHouseCurrentPoints.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblHouseCurrentPoints.setText(" ");

        lblAddPoints.setText("Ange antal poäng som du vill registrera:");

        lblSubtractPoints.setText("Ange antal poäng som du vill dra av:");

        btnSubtractPoints.setText("Dra av poäng");
        btnSubtractPoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubtractPointsActionPerformed(evt);
            }
        });

        btnAddPoints.setText("Registrera poäng");
        btnAddPoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPointsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlHouseCupPointsLayout = new javax.swing.GroupLayout(pnlHouseCupPoints);
        pnlHouseCupPoints.setLayout(pnlHouseCupPointsLayout);
        pnlHouseCupPointsLayout.setHorizontalGroup(
            pnlHouseCupPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHouseCupPointsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHouseCupPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblChangeHousePoints)
                    .addGroup(pnlHouseCupPointsLayout.createSequentialGroup()
                        .addGroup(pnlHouseCupPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblChangePointsHouse)
                            .addComponent(cBoxHouseCupPointsHouses, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(68, 68, 68)
                        .addGroup(pnlHouseCupPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHouseCurrentPoints)
                            .addComponent(lblHouseCurrentPointText)))
                    .addGroup(pnlHouseCupPointsLayout.createSequentialGroup()
                        .addGroup(pnlHouseCupPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAddPoints)
                            .addComponent(lblSubtractPoints))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlHouseCupPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlHouseCupPointsLayout.createSequentialGroup()
                                .addComponent(txtAddPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddPoints))
                            .addGroup(pnlHouseCupPointsLayout.createSequentialGroup()
                                .addComponent(txtSubtractPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSubtractPoints)))))
                .addContainerGap(204, Short.MAX_VALUE))
        );
        pnlHouseCupPointsLayout.setVerticalGroup(
            pnlHouseCupPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHouseCupPointsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblChangeHousePoints)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlHouseCupPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblChangePointsHouse)
                    .addComponent(lblHouseCurrentPointText))
                .addGap(7, 7, 7)
                .addGroup(pnlHouseCupPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cBoxHouseCupPointsHouses, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHouseCurrentPoints))
                .addGap(42, 42, 42)
                .addGroup(pnlHouseCupPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddPoints)
                    .addComponent(txtAddPoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddPoints))
                .addGap(18, 18, 18)
                .addGroup(pnlHouseCupPointsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSubtractPoints)
                    .addComponent(txtSubtractPoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSubtractPoints))
                .addContainerGap(284, Short.MAX_VALUE))
        );

        pnlTeacherMain.add(pnlHouseCupPoints, "pnlHouseCupPoints");

        lblTeacherRegisterGrade.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblTeacherRegisterGrade.setText("Registrera nytt betyg");

        lblRegisterGradeSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblRegisterGradeSearch.setText("Här kan du söka efter elever");

        lblRegisterGradeFirstName.setText("Förnamn:");

        lblRegisterGradeLastName.setText("Efternamn:");

        btnRegisterGradeSearch.setText("Hitta elever");
        btnRegisterGradeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterGradeSearchActionPerformed(evt);
            }
        });

        lblRegisterGradeFound.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblRegisterGradeFound.setText("Här visas de elever med det angivna namnet");

        lstRegisterGradeStudents.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstRegisterGradeStudentsValueChanged(evt);
            }
        });
        scrRegisterGradeStudents.setViewportView(lstRegisterGradeStudents);

        lblRegisterGradeFoundInfo.setText(" Elev ID, Förnamn, Efternamn");

        lblRegisterGradeSelectedStudent.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblRegisterGradeSelectedStudent.setText(" ");

        lblRegisterGradeSelectedStudentInfo.setText("Vald elev:");

        cBoxRegisterGradeChooseSubject.setMaximumRowCount(9);
        cBoxRegisterGradeChooseSubject.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cBoxRegisterGradeChooseSubjectPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        lblRegisterGradeChooseSubject.setText("Välj ämne:");

        scrRegisterGradeCourses.setViewportView(lstRegisterGradeCourses);

        lblRegisterGradeCourses.setText("Välj kurs:");

        cBoxRegisterGradeList.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cBoxRegisterGradeListPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        lblRegisterGradeList.setText("Välj betyg:");

        btnRegisterGrade.setText("Registrera betyg");
        btnRegisterGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterGradeActionPerformed(evt);
            }
        });

        lblRegisterGradeID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblRegisterGradeID.setText(" ");

        lblRegisterGradeDone.setText(" ");

        lblRegisterGradeText.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblRegisterGradeText.setText("Här kan elevens betyg registreras när du har klickat på denne i listan");

        javax.swing.GroupLayout pblTeacherRegisterGradeLayout = new javax.swing.GroupLayout(pblTeacherRegisterGrade);
        pblTeacherRegisterGrade.setLayout(pblTeacherRegisterGradeLayout);
        pblTeacherRegisterGradeLayout.setHorizontalGroup(
            pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pblTeacherRegisterGradeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pblTeacherRegisterGradeLayout.createSequentialGroup()
                        .addComponent(lblTeacherRegisterGrade)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pblTeacherRegisterGradeLayout.createSequentialGroup()
                        .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pblTeacherRegisterGradeLayout.createSequentialGroup()
                                .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtRegisterGradeFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblRegisterGradeFirstName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRegisterGradeLastName)
                                    .addComponent(txtRegisterGradeLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnRegisterGradeSearch)
                            .addComponent(lblRegisterGradeCourses)
                            .addComponent(lblRegisterGradeSearch)
                            .addComponent(lblRegisterGradeSelectedStudentInfo)
                            .addComponent(cBoxRegisterGradeChooseSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pblTeacherRegisterGradeLayout.createSequentialGroup()
                                .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pblTeacherRegisterGradeLayout.createSequentialGroup()
                                        .addComponent(lblRegisterGradeID)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblRegisterGradeSelectedStudent))
                                    .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(scrRegisterGradeCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblRegisterGradeChooseSubject)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRegisterGradeList)
                                    .addComponent(cBoxRegisterGradeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnRegisterGrade)
                                    .addComponent(lblRegisterGradeDone)))
                            .addComponent(lblRegisterGradeText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRegisterGradeFound, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblRegisterGradeFoundInfo)
                                .addComponent(scrRegisterGradeStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        pblTeacherRegisterGradeLayout.setVerticalGroup(
            pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pblTeacherRegisterGradeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTeacherRegisterGrade)
                .addGap(18, 18, 18)
                .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRegisterGradeSearch)
                    .addComponent(lblRegisterGradeFound))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRegisterGradeLastName)
                    .addComponent(lblRegisterGradeFoundInfo)
                    .addComponent(lblRegisterGradeFirstName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrRegisterGradeStudents)
                    .addGroup(pblTeacherRegisterGradeLayout.createSequentialGroup()
                        .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtRegisterGradeFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRegisterGradeLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRegisterGradeSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                        .addComponent(lblRegisterGradeText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblRegisterGradeSelectedStudentInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRegisterGradeSelectedStudent)
                            .addComponent(lblRegisterGradeID))
                        .addGap(11, 11, 11)
                        .addComponent(lblRegisterGradeChooseSubject)
                        .addGap(4, 4, 4)
                        .addComponent(cBoxRegisterGradeChooseSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRegisterGradeCourses)
                            .addComponent(lblRegisterGradeList))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pblTeacherRegisterGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrRegisterGradeCourses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pblTeacherRegisterGradeLayout.createSequentialGroup()
                                .addComponent(cBoxRegisterGradeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRegisterGrade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblRegisterGradeDone)))
                        .addGap(12, 12, 12))))
        );

        pnlTeacherMain.add(pblTeacherRegisterGrade, "pblTeacherRegisterGrade");

        btnChangeGrade.setText("Registrera betyg");
        btnChangeGrade.setActionCommand("Ändra betyg");
        btnChangeGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeGradeActionPerformed(evt);
            }
        });

        lblChangeGradeID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblChangeGradeID.setText(" ");

        lblChangeGradeDone.setText(" ");

        lblChangeGradeList.setText("Nytt betyg:");

        cBoxChangeGradeChooseSubject.setMaximumRowCount(9);
        cBoxChangeGradeChooseSubject.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cBoxChangeGradeChooseSubjectPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        btnChangeGradeSearch.setText("Hitta elever");
        btnChangeGradeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeGradeSearchActionPerformed(evt);
            }
        });

        lblChangeGradeSelectedStudentInfo.setText("Vald elev:");

        scrChangeGradeCourses.setViewportView(lstChangeGradeCourses);

        lblChangeGradeChooseSubject.setText("Välj ämne:");

        lblChangeGradeFound.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lblChangeGradeFound.setText("Här visas de elever med det angivna namnet och kursen");

        lstChangeGradeStudents.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstChangeGradeStudentsValueChanged(evt);
            }
        });
        scrChangeGradeStudents.setViewportView(lstChangeGradeStudents);

        lblChangeGradeSelectedStudent.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblChangeGradeSelectedStudent.setText(" ");

        lblChangeGradeFoundInfo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblChangeGradeFoundInfo.setText(" Elev ID, Förnamn, Efternamn, Kurs, Kurs ID, Betyg");

        lblTeacherChangeGrade.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblTeacherChangeGrade.setText("Ändra ett betyg");

        lblChangeGradeSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeGradeSearch.setText("Här kan du söka efter en elevs betyg");

        lblChangeGradeCourses.setText("Välj kurs:");

        lblChangeGradeFirstName.setText("Förnamn:");

        lblChangeGradeLastName.setText("Efternamn:");

        lblChangeGradeText.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeGradeText.setText("Här kan elevens betyg ändras när du har klickat på denne i listan");

        lblChangeGradeSelectedGradeText.setText("Valt Betyg (Kurs, Kurs ID, Betyg):");

        lblChangeGradeSelectedGrade.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblChangeGradeSelectedGrade.setText(" ");

        javax.swing.GroupLayout pnlTeacherChangeGradeLayout = new javax.swing.GroupLayout(pnlTeacherChangeGrade);
        pnlTeacherChangeGrade.setLayout(pnlTeacherChangeGradeLayout);
        pnlTeacherChangeGradeLayout.setHorizontalGroup(
            pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTeacherChangeGradeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTeacherChangeGradeLayout.createSequentialGroup()
                        .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnChangeGrade)
                            .addGroup(pnlTeacherChangeGradeLayout.createSequentialGroup()
                                .addComponent(lblChangeGradeList)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cBoxChangeGradeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblChangeGradeText)
                            .addComponent(lblChangeGradeSelectedGradeText)
                            .addComponent(lblChangeGradeSelectedGrade)
                            .addComponent(lblChangeGradeDone)
                            .addComponent(lblTeacherChangeGrade)
                            .addComponent(lblChangeGradeSearch)
                            .addGroup(pnlTeacherChangeGradeLayout.createSequentialGroup()
                                .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlTeacherChangeGradeLayout.createSequentialGroup()
                                        .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtChangeGradeFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblChangeGradeFirstName))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtChangeGradeLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblChangeGradeLastName)))
                                    .addComponent(btnChangeGradeSearch)
                                    .addComponent(lblChangeGradeSelectedStudentInfo)
                                    .addGroup(pnlTeacherChangeGradeLayout.createSequentialGroup()
                                        .addComponent(lblChangeGradeID)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblChangeGradeSelectedStudent)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(scrChangeGradeCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblChangeGradeChooseSubject)
                                    .addComponent(cBoxChangeGradeChooseSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblChangeGradeCourses))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                        .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblChangeGradeFoundInfo)
                            .addComponent(scrChangeGradeStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblChangeGradeFound, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        pnlTeacherChangeGradeLayout.setVerticalGroup(
            pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTeacherChangeGradeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTeacherChangeGradeLayout.createSequentialGroup()
                        .addComponent(lblTeacherChangeGrade)
                        .addGap(28, 28, 28)
                        .addComponent(lblChangeGradeSearch))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTeacherChangeGradeLayout.createSequentialGroup()
                        .addComponent(lblChangeGradeFound)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblChangeGradeFoundInfo)))
                .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTeacherChangeGradeLayout.createSequentialGroup()
                        .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChangeGradeLastName)
                            .addComponent(lblChangeGradeFirstName)
                            .addComponent(lblChangeGradeChooseSubject))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtChangeGradeFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtChangeGradeLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cBoxChangeGradeChooseSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlTeacherChangeGradeLayout.createSequentialGroup()
                                .addComponent(btnChangeGradeSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTeacherChangeGradeLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lblChangeGradeCourses)))
                        .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlTeacherChangeGradeLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(lblChangeGradeSelectedStudentInfo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblChangeGradeID)
                                    .addComponent(lblChangeGradeSelectedStudent))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(pnlTeacherChangeGradeLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                                .addComponent(scrChangeGradeCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addComponent(lblChangeGradeText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblChangeGradeSelectedGradeText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblChangeGradeSelectedGrade)
                        .addGap(18, 18, 18)
                        .addGroup(pnlTeacherChangeGradeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChangeGradeList)
                            .addComponent(cBoxChangeGradeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChangeGrade)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblChangeGradeDone)
                        .addGap(27, 27, 27))
                    .addGroup(pnlTeacherChangeGradeLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrChangeGradeStudents)
                        .addContainerGap())))
        );

        pnlTeacherMain.add(pnlTeacherChangeGrade, "pnlTeacherChangeGrade");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnTeacherHouseCupChange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTeacherUpdateStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTeacherRegisterStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTeacherPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTeacherChangeStudentGrade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTeacherAddStudentGrade, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblQuestion)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(pnlTeacherMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlTeacherMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(lblQuestion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTeacherPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(btnTeacherRegisterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(btnTeacherUpdateStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTeacherHouseCupChange, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnTeacherAddStudentGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTeacherChangeStudentGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLogOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdmin)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        Start.welcome();    //Denna metod 'loggar ut'. Startsidan visas och lösenordet nollställs.
        this.pwd = "";
        dispose();
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnTeacherPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeacherPasswordActionPerformed
        //Denna knapp nolställer lösenordändrings-funktionen, och visar korrekt container.
        
        
        lblPwdChangeDone.setText(" "); //Dessa etiketter och lösenordsrutor töms för att "nollställa" lösenordändrings-funktionen.
        pwdRepeatPwd.setText("");
        pwdNewPwd.setText("");
        
        
        getLayout("pnlChangePwd"); //Visar ändra lösenord-containern
    }//GEN-LAST:event_btnTeacherPasswordActionPerformed

    private void btnTeacherChangeStudentGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeacherChangeStudentGradeActionPerformed
        //Denna knapp nolställer och förbereder betygförändring-funktionen och visar korrekt container.
        
        
        
        
        DefaultListModel studentModel = new DefaultListModel(); //DefaultListModel är en modell som innehåller allt som kan/ska visas i t.ex. en JList. En för kurser och en för studenter i detta fall.
        DefaultListModel coursesModel = new DefaultListModel();
        coursesModel.addElement("Välj ett ämne");            //Här så anges ett standardvärde till modellen som ska visas i en lista. Detta för att nollställa funktionen.
        lstChangeGradeStudents.setModel(studentModel);      
        lstChangeGradeCourses.setModel(coursesModel);        //Alla dessa listorn, comboboxes, textrutor och labeln 'nollställs'.
        txtChangeGradeFirstName.setText("");
        txtChangeGradeLastName.setText("");
        cBoxChangeGradeChooseSubject.removeAllItems();
        cBoxChangeGradeChooseSubject.addItem("");
        cBoxChangeGradeList.removeAllItems();
        cBoxChangeGradeList.addItem("");
        lblChangeGradeID.setText(" ");
        lblChangeGradeDone.setText(" ");
        lblChangeGradeSelectedStudent.setText(" ");
        lblChangeGradeSelectedGrade.setText(" ");

        try {
            ArrayList<String> subjects = db.fetchColumn("select amnesnamn from amne"); //Här hämtas en lista över ämnen från databasen
            ArrayList<HashMap<String, String>> gradeList = db.fetchRows("select * from betyg"); //Här hämtas rader från betyg-tabellen i databasen

            if (!Validate.checkEmptyDBRows(gradeList)) { //Kontrollerar så betyg-listan inte är tom

                for (HashMap<String, String> grade : gradeList) { //Denna loop lägger till de olika betygen i en combobox

                    cBoxChangeGradeList.addItem(grade.get("BETYGSBETECKNING") + " - " + grade.get("BETYGSBESKRIVNING"));

                }

            }

            if (!Validate.checkEmptyDBColumn(subjects)) { //Kontrollerar så ämneslistan inte är tom

                for (String subject : subjects) {
                    cBoxChangeGradeChooseSubject.addItem(subject); //Lägger till alla ämnen i en combobox.
                }

            }

        } catch (InfException ex) {
            System.out.println(ex.getMessage());
        }

        getLayout("pnlTeacherChangeGrade"); //Visar containern för ändra betyg-funktionen.
    }//GEN-LAST:event_btnTeacherChangeStudentGradeActionPerformed

    private void btnChangePwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePwdActionPerformed
        //Denna knapp tar emot inmatade lösenord, kontrollerar dem, och uppdaterar lösenordet i databasen
        
        
        char[] newPwdChar = pwdNewPwd.getPassword();  //Här så görs lösrnordsrutorna om till strings.
        String newPwd = new String(newPwdChar);
        char[] repeatPwdChar = pwdRepeatPwd.getPassword();
        String repeatPwd = new String(repeatPwdChar);
        
        
        lblPwdChangeDone.setText(" "); //Nolställer etiketten som berättar för dig att lösenordet har ändrats.

        if (Validate.pwdIsNotEmpty(pwdNewPwd) && Validate.pwdIsNotEmpty(pwdRepeatPwd) && Validate.pwdMatching(newPwd, repeatPwd) && !Validate.pwdExisting(newPwd)) { //Kontrollerar tomma fält, matchande lösenord och existerande lösenord

            try {

                db.update("update LARARE " //Uppdaterar databasen med den nya lösenordet.
                        + "set losenord='" + newPwd + "' "
                        + "where losenord='" + pwd + "'");

            } catch (InfException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null, "Något gick fel. Lösenordet har inte ändrats."); //Felmeddelande om en sql-error skulle uppstå.

            }

            lblPwdChangeDone.setText("Lösenordet har uppdaterats."); //Meddelar att lösenordet har uppdaterats
            pwd = newPwd; //Uppdaterar lösenordsfältet med det nya lösenordet
            
            pwdRepeatPwd.setText(""); //Nollställer lösenordsfälten
            pwdNewPwd.setText(""); 

        }

    }//GEN-LAST:event_btnChangePwdActionPerformed

    private void btnTeacherRegisterStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeacherRegisterStudentActionPerformed
        //Denna knapp nollställer och förbereder elevregistreringen
        
        
        DefaultListModel listModel = new DefaultListModel();
        listModel.addElement("Välj ett elevhem"); //Här nollställs elevregistrerings-fälten
        lstRooms.setModel(listModel);
        lstRooms.setSelectedIndex(0);
        cBoxRegisterStudentHouses.removeAllItems();
        cBoxRegisterStudentHouses.addItem("");
        txtRegisterStudentFirstName.setText("");
        txtRegisterStudentLastName.setText("");
        lblStudentIsRegistered.setText(" ");

        try {

            ArrayList<String> houses = db.fetchColumn("select elevhemsnamn from elevhem"); //Elevhemslista hämtas

            
            if (!Validate.checkEmptyDBColumn(houses)) { //Elevlista läses in i combocox
                for (String house : houses) {
                    
                    cBoxRegisterStudentHouses.addItem(house);
                    
                }
            }

        } catch (InfException ex) {

            System.out.println(ex.getMessage());

        }

        getLayout("pnlRegisterStudent"); //Visar elevregistrerings-container
    }//GEN-LAST:event_btnTeacherRegisterStudentActionPerformed

    private void btnRegisterStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterStudentActionPerformed
        //Denna knapp kontrollerar input och uppdaterar databasen
        
        
        lblStudentIsRegistered.setText(" "); //Nollställer etikett som meddelar resultat
        
        DefaultListModel listModel = new DefaultListModel();

        if (Validate.textIsNotEmpty(txtRegisterStudentFirstName) && Validate.textIsNotEmpty(txtRegisterStudentLastName)) { //Kontrollerar tomma textrutor

            if (Validate.checkIfInteger(lstRooms.getSelectedValue().toString())) { //Kontrollerar så det är ett heltal som angivits som sovsalsnummer

                try {
 
                    db.insert("insert into ELEV " //Lägger till ny rad i databas med automatiskt nytt ID, förnamn, efternamn och sovsal
                            + "values ('" + db.getAutoIncrement("ELEV", "ELEV_ID")
                            + "', '" + txtRegisterStudentFirstName.getText()
                            + "', '" + txtRegisterStudentLastName.getText()
                            + "', '" + lstRooms.getSelectedValue().toString() + "')");

                    lblStudentIsRegistered.setText("Eleven har registrerats."); //Meddelar resultat och nollställer
                    listModel.addElement("Välj ett elevhem");
                    lstRooms.setModel(listModel);
                    lstRooms.setSelectedIndex(0);
                    txtRegisterStudentFirstName.setText("");
                    txtRegisterStudentLastName.setText("");
                    cBoxRegisterStudentHouses.setSelectedItem("");

                } catch (InfException ex) {
                    JOptionPane.showMessageDialog(null, "Något gick fel. Eleven har inte registrerats."); 
                    System.out.println(ex.getMessage());

                }

            } else {

                JOptionPane.showMessageDialog(null, "Du måste välja ett elevhem och en sovsal."); //Om inget heltal valts i listan så beror det på att inget elevhem har valts, eller att ingen sovsal har valts

            }

        }


    }//GEN-LAST:event_btnRegisterStudentActionPerformed

    private void cBoxRegisterStudentHousesPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cBoxRegisterStudentHousesPopupMenuWillBecomeInvisible
        //Denna metod uppdaterar sovsalslistan när ett elevhem har valts (denna kod körs varje gång som comboboxen stängs)
        
        
        DefaultListModel listModel = new DefaultListModel();

        if (Validate.cBoxIsNotEmpty(cBoxRegisterStudentHouses)) { //Kontrollerar om det valda värdet i en combobox är null eller ej

            try {

                ArrayList<String> roomList = db.fetchColumn("select sovsal_id from SOVSAL " //Hämtar sovsalar som tillhör det valda elevhemmet
                        + "join elevhem on sovsal.elevhem = elevhem.ELEVHEM_ID "
                        + "where elevhemsnamn = '" + cBoxRegisterStudentHouses.getSelectedItem().toString() + "'");

                if (!Validate.checkEmptyDBColumn(roomList)) { //Kontrollerar om sovsalslistan är tom
                    for (String room : roomList) {
                        listModel.addElement(room); //Läser in rum i listans modell

                    }
                } else {
                    listModel.addElement("Inga rum funna");
                }

            } catch (InfException ex) {
                System.out.println(ex.getMessage());
            }

        } else {
            listModel.addElement("Välj ett elevhem");

        }

        lstRooms.setModel(listModel); //Nollstället sovsalslistan och placerar markören överst.
        lstRooms.setSelectedIndex(0); 
    }//GEN-LAST:event_cBoxRegisterStudentHousesPopupMenuWillBecomeInvisible

    private void btnTeacherUpdateStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeacherUpdateStudentActionPerformed
        //Denna knapp nolställer, förbereder och visar ändra elev-containern
        
        
        
        DefaultListModel studentModel = new DefaultListModel();
        DefaultListModel roomModel = new DefaultListModel();
        DefaultListModel courseModel = new DefaultListModel();

        courseModel.addElement("Välj ett ämne"); //Nolställer alla fält/listor
        lstChangeStudentCourse.setModel(courseModel);
        cBoxChangeStudentSubject.removeAllItems();
        cBoxChangeStudentSubject.addItem("");
        lstChangeStudents.setModel(studentModel);
        txtChangeStudentFirstName.setText("");
        txtChangeStudentLastName.setText("");
        lblChangeStudentID.setText("");
        txtChangeStudentFirstNameSearch.setText("");
        txtChangeStudentLastNameSearch.setText("");
        lblChangeStudentDone.setText(" ");
        cBoxChangeHouse.removeAllItems();
        cBoxChangeHouse.addItem("");

        try {

            ArrayList<String> houses = db.fetchColumn("select elevhemsnamn from elevhem"); //Hämtar listor för elevhem och ämnen
            ArrayList<HashMap<String, String>> subjectList = db.fetchRows("select amne_id, amnesnamn from amne");

            if (!Validate.checkEmptyDBRows(subjectList)) {

                for (HashMap<String, String> subject : subjectList) {
                    cBoxChangeStudentSubject.addItem(subject.get("AMNE_ID") + " - " + subject.get("AMNESNAMN")); //Läser in ämnen i combobox
                }

            }

            if (!Validate.checkEmptyDBColumn(houses)) {
                for (String house : houses) {

                    cBoxChangeHouse.addItem(house); //Läser in elevhem i combobox

                }
            }
            roomModel.addElement("Välj ett elevhem");
            lstChangeRooms.setModel(roomModel);

        } catch (InfException ex) {
            System.out.println(ex.getMessage());
        }

        getLayout("pnlTeacherUpdateStudent"); //Visar ändra elev-container
    }//GEN-LAST:event_btnTeacherUpdateStudentActionPerformed

    private void btnStudentChangeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStudentChangeSearchActionPerformed
        //Denna knapp kontrollerar inmatning och söker efter elever i databasen
        
        
        DefaultListModel studentModel = new DefaultListModel();
        DefaultListModel courseModel = new DefaultListModel();

        try {
            String sqlFirstName;
            String sqlLastName;

            if (Validate.textIsNotEmptyNoMsg(txtChangeStudentFirstNameSearch)) { //Om textfältet lämnas tomt så söker databasen efter null-värden. Annars så söker den på ett string-värde.
                sqlFirstName = "where fornamn like '%" + txtChangeStudentFirstNameSearch.getText() + "%' ";
            } else {
                sqlFirstName = "where fornamn is null ";
            }

            if (Validate.textIsNotEmptyNoMsg(txtChangeStudentLastNameSearch)) { //Om textfältet lämnas tomt så söker databasen efter null-värden. Annars så söker den på ett string-värde.
                sqlLastName = "and efternamn like '%" + txtChangeStudentLastNameSearch.getText() + "%'";
            } else {
                sqlLastName = "and efternamn is null";
            }

            ArrayList<HashMap<String, String>> studentList = db.fetchRows("select elev_id, fornamn, efternamn, sovsal from elev " + sqlFirstName + sqlLastName); //En elevlista hämtas

            if (!Validate.checkEmptyDBRows(studentList)) {

                for (HashMap<String, String> student : studentList) {
                    studentModel.addElement(student.get("ELEV_ID") + ", " + student.get("FORNAMN") + ", " + student.get("EFTERNAMN") + ", " + student.get("SOVSAL")); //Elevinformation läses in i modellen för studentlistan
                }

            } else {
                JOptionPane.showMessageDialog(null, "Inga elever hittades. Försök med ett annat namn.");
            }

            lstChangeStudents.setModel(studentModel);  
            courseModel.addElement("Välj ett ämne");  //Nollställer alla fält
            lstChangeStudentCourse.setModel(courseModel);
            txtChangeStudentFirstName.setText("");
            txtChangeStudentLastName.setText("");
            lblChangeStudentID.setText("");
            txtChangeStudentFirstNameSearch.setText("");
            txtChangeStudentLastNameSearch.setText("");
            lblChangeStudentDone.setText(" ");

        } catch (InfException ex) {
            System.out.println(ex.getMessage());
        }


    }//GEN-LAST:event_btnStudentChangeSearchActionPerformed

    private void lstChangeStudentsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstChangeStudentsValueChanged
        //Denna metod uppdaterar textfält och etiketter med information från den valda eleven i listan. Denna kod körs varje gång markören flyttas i listan.
        
        
        try {
            String[] studentInfo = lstChangeStudents.getSelectedValue().toString().split(", "); //Hämtar raden i listan, och delar upp den.

            if (studentInfo[1].equals("null")) { //Om värdet "null" dyker upp i listan så innebär det att fältet är tomt i databasen.
                txtChangeStudentFirstName.setText(""); //Om fältet är tomt så blir textrutan tom...

            } else {
                txtChangeStudentFirstName.setText(studentInfo[1]); //...annars så skrivs värdet in i textrutan.
            }

            if (studentInfo[2].equals("null")) {
                txtChangeStudentLastName.setText("");
            } else {
                txtChangeStudentLastName.setText(studentInfo[2]);
            }

            lblChangeStudentID.setText(studentInfo[0]); //Sätter elev-id i en label.

        } catch (Exception ex) {

        }

    }//GEN-LAST:event_lstChangeStudentsValueChanged

    private void btnChangeStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeStudentActionPerformed
        //Denna knapp kontrollerar input och uppdaterar databasen
        
        
        DefaultListModel studentModel = new DefaultListModel();
        DefaultListModel courseModel = new DefaultListModel();

        if (Validate.labelIsNotEmpty(lblChangeStudentID)) { //Kollar så ett elev-id har angivits från listan.

            if (Validate.textIsNotEmpty(txtChangeStudentLastName) && Validate.textIsNotEmpty(txtChangeStudentFirstName)) { //Kollar efter tomma textfält

                if (Validate.cBoxIsNotEmpty(cBoxChangeHouse) && Validate.listSelectedIsNotEmpty(lstChangeRooms)) { //Kollar så användaren har angivit ett elevhem och sovsal
                    try {
                        db.update("update ELEV " //Uppdaterar databas med den nya informationen
                                + "set fornamn = '" + txtChangeStudentFirstName.getText() + "', efternamn = '" + txtChangeStudentLastName.getText() + "', sovsal = '" + lstChangeRooms.getSelectedValue().toString() + "' "
                                + "where elev_id = '" + lblChangeStudentID.getText() + "'");

                        lblChangeStudentDone.setText("Ändringen har genomförts."); //Meddelar resultat
                        
                        lstChangeStudents.setModel(studentModel); //Nollställer fält
                        courseModel.addElement("Välj ett ämne");
                        lstChangeStudentCourse.setModel(courseModel);
                        txtChangeStudentFirstName.setText("");
                        txtChangeStudentLastName.setText("");
                        lblChangeStudentID.setText("");
                        txtChangeStudentFirstNameSearch.setText("");
                        txtChangeStudentLastNameSearch.setText("");

                    } catch (InfException ex) {
                        System.out.println(ex.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Du måste välja ett elevhem och en sovsal.");
                    lblChangeStudentDone.setText("");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Elev ID hittades ej. Kontrollera att du har valt en elev från listan genom att klicka på denne.");
            lblChangeStudentDone.setText("");
        }

    }//GEN-LAST:event_btnChangeStudentActionPerformed

    private void btnTeacherHouseCupChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeacherHouseCupChangeActionPerformed
        //Denna knapp förbereder och nollställer ändra elevhemspoäng-containern
        
        
        cBoxHouseCupPointsHouses.removeAllItems(); //Nollställer fält/listor
        cBoxHouseCupPointsHouses.addItem("");
        lblHouseCurrentPoints.setText(" ");

        try {

            ArrayList<String> houses = db.fetchColumn("select elevhemsnamn from elevhem"); //Hämtar elevhem

            
            if (!Validate.checkEmptyDBColumn(houses)) {

                for (String house : houses) { 
                    
                    cBoxHouseCupPointsHouses.addItem(house); //Läser in elevhem
                    
                }

            }

        } catch (InfException ex) {

            System.out.println(ex.getMessage());

        }

        getLayout("pnlHouseCupPoints"); //Visar containern
    }//GEN-LAST:event_btnTeacherHouseCupChangeActionPerformed

    private void cBoxChangeHousePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cBoxChangeHousePopupMenuWillBecomeInvisible
        //Denna metod uppdaterar sovsallistan med de sovsalar som finns i valt elevhem
        
        
        DefaultListModel listModel = new DefaultListModel();

        if (Validate.cBoxIsNotEmpty(cBoxChangeHouse)) { //Kontrollerar comboboxen

            try {

                ArrayList<String> roomList = db.fetchColumn("select sovsal_id from SOVSAL " //Hämtar sovsalar från valt elevhem
                        + "join elevhem on sovsal.elevhem = elevhem.ELEVHEM_ID "
                        + "where elevhemsnamn = '" + cBoxChangeHouse.getSelectedItem().toString() + "'");

                if (!Validate.checkEmptyDBColumn(roomList)) {
                    for (String room : roomList) {
                        listModel.addElement(room); //Läser in sovsalar

                    }
                } else {
                    listModel.addElement("Inga rum funna");
                }
            } catch (InfException ex) {
                System.out.println(ex.getMessage());
            }

        } else {
            listModel.addElement("Välj ett elevhem");

        }
        lblChangeStudentDone.setText(""); //Nollställer etikett
        
        lstChangeRooms.setModel(listModel); //Laddar in modellen och placerar markören överst
        lstChangeRooms.setSelectedIndex(0);
    }//GEN-LAST:event_cBoxChangeHousePopupMenuWillBecomeInvisible

    private void cBoxHouseCupPointsHousesPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cBoxHouseCupPointsHousesPopupMenuWillBecomeInvisible
        //Denna metod uppdaterar etiketten som innehåller huspoäng och elevhem
        
        
        try {

            lblHouseCurrentPoints.setText(db.fetchSingle("select huspoang from elevhem where elevhemsnamn = '" + cBoxHouseCupPointsHouses.getSelectedItem().toString() + "'")); //Hämtar huspoäng och skriver ut det + valt elevhem

        } catch (InfException ex) {

            System.out.println(ex.getMessage());

        }
    }//GEN-LAST:event_cBoxHouseCupPointsHousesPopupMenuWillBecomeInvisible

    private void btnSubtractPointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubtractPointsActionPerformed
        //Denna knapp kontrollerar input och drar av (uppdaterar i databasen) poäng från elevhem
        
        
        int total;

        if (Validate.cBoxIsNotEmpty(cBoxHouseCupPointsHouses)) { //Kontrollerar så ett elevhem har valts

            if (Validate.checkIfPositiveInteger(txtSubtractPoints.getText())) { //Kollar så ett positivt heltal har angivits

                total = Integer.parseInt(lblHouseCurrentPoints.getText()) - Integer.parseInt(txtSubtractPoints.getText()); //Räknar ut den nya ställningen
                lblHouseCurrentPoints.setText(Integer.toString(total)); //Visar nya ställningen
                txtSubtractPoints.setText("");//Tömmer textrutan

                try {
                    db.update("update elevhem " //Uppdaterar databasen med den nya ställningen
                            + "set huspoang = '" + total + "' "
                            + "where elevhemsnamn = '" + cBoxHouseCupPointsHouses.getSelectedItem().toString() + "'");
                } catch (InfException ex) {
                    System.out.println(ex.getMessage());
                }

            } else {

                JOptionPane.showMessageDialog(null, "Endast positiva heltal får användas.");

            }

        } else {

            JOptionPane.showMessageDialog(null, "Du måste ange ett elevhem.");

        }


    }//GEN-LAST:event_btnSubtractPointsActionPerformed

    private void btnAddPointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPointsActionPerformed
        //Denna knapp kontrollerar input och lägger till (uppdaterar i databasen) poäng till elevhem
        
        
        int total;

        if (Validate.cBoxIsNotEmpty(cBoxHouseCupPointsHouses)) {//Kontrollerar så ett elevhem har valts

            if (Validate.checkIfPositiveInteger(txtAddPoints.getText())) {//Kollar så ett positivt heltal har angivits

                total = Integer.parseInt(lblHouseCurrentPoints.getText()) + Integer.parseInt(txtAddPoints.getText());//Räknar ut den nya ställningen
                lblHouseCurrentPoints.setText(Integer.toString(total));//Visar nya ställningen
                txtAddPoints.setText("");//Tömmer textrutan

                try {
                    db.update("update elevhem "//Uppdaterar databasen med den nya ställningen
                            + "set huspoang = '" + total + "' "
                            + "where elevhemsnamn = '" + cBoxHouseCupPointsHouses.getSelectedItem().toString() + "'");
                } catch (InfException ex) {
                    System.out.println(ex.getMessage());
                }

            } else {

                JOptionPane.showMessageDialog(null, "Endast positiva heltal får användas.");

            }

        } else {

            JOptionPane.showMessageDialog(null, "Du måste ange ett elevhem.");

        }
    }//GEN-LAST:event_btnAddPointsActionPerformed

    private void btnTeacherAddStudentGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeacherAddStudentGradeActionPerformed
        //Denna knapp förbereder, nollställer och visar containern för registrera nytt betyg
        
        
        DefaultListModel studentModel = new DefaultListModel();
        DefaultListModel coursesModel = new DefaultListModel();
        coursesModel.addElement("Välj ett ämne"); //Nollställer fält
        lstRegisterGradeStudents.setModel(studentModel);
        lstRegisterGradeCourses.setModel(coursesModel);
        txtRegisterGradeFirstName.setText("");
        txtRegisterGradeLastName.setText("");
        lblRegisterGradeSelectedStudent.setText(" ");
        cBoxRegisterGradeChooseSubject.removeAllItems();
        cBoxRegisterGradeChooseSubject.addItem("");
        cBoxRegisterGradeList.removeAllItems();
        cBoxRegisterGradeList.addItem("");
        lblRegisterGradeID.setText(" ");
        lblRegisterGradeDone.setText(" ");
        lblRegisterGradeSelectedStudent.setText(" ");

        try {
            ArrayList<String> subjects = db.fetchColumn("select amnesnamn from amne"); //Hämtar ämne
            ArrayList<HashMap<String, String>> gradeList = db.fetchRows("select * from betyg"); //Hämtar betyg

            if (!Validate.checkEmptyDBRows(gradeList)) {

                for (HashMap<String, String> grade : gradeList) {

                    cBoxRegisterGradeList.addItem(grade.get("BETYGSBETECKNING") + " - " + grade.get("BETYGSBESKRIVNING")); //Läser in betyg

                }

            }

            if (!Validate.checkEmptyDBColumn(subjects)) {

                for (String subject : subjects) {
                    cBoxRegisterGradeChooseSubject.addItem(subject); //Läser in ämnen
                }

            }

        } catch (InfException ex) {
            System.out.println(ex.getMessage());
        }

        getLayout("pblTeacherRegisterGrade"); //Visar container

    }//GEN-LAST:event_btnTeacherAddStudentGradeActionPerformed

    private void btnRegisterGradeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterGradeSearchActionPerformed
        //Denna knapp söker fram elever och visar dem i en lista
        
        
        DefaultListModel studentModel = new DefaultListModel();
        DefaultListModel courseModel = new DefaultListModel();

        try {
            String sqlFirstName;
            String sqlLastName;

            if (Validate.textIsNotEmptyNoMsg(txtRegisterGradeFirstName)) { //Om textfältet lämnas tomt så söker databasen efter null-värden. Annars så söker den på ett string-värde.
                sqlFirstName = "where fornamn like '%" + txtRegisterGradeFirstName.getText() + "%' ";
            } else {
                sqlFirstName = "where fornamn is null ";
            }

            if (Validate.textIsNotEmptyNoMsg(txtRegisterGradeLastName)) {
                sqlLastName = "and efternamn like '%" + txtRegisterGradeLastName.getText() + "%'";
            } else {
                sqlLastName = "and efternamn is null";
            }

            ArrayList<HashMap<String, String>> studentList = db.fetchRows("select elev_id, fornamn, efternamn from elev " + sqlFirstName + sqlLastName); //Hämtar elevlista

            if (!Validate.checkEmptyDBRows(studentList)) { //Kollar om raderna är tomma
                for (HashMap<String, String> student : studentList) {
                    studentModel.addElement(student.get("ELEV_ID") + ", " + student.get("FORNAMN") + ", " + student.get("EFTERNAMN")); //Läser in elever i listan
                }

            } else {
                JOptionPane.showMessageDialog(null, "Inga elever hittades. Försök med ett annat namn.");
            }

            lstRegisterGradeStudents.setModel(studentModel); 
            
            courseModel.addElement("Välj ett ämne");//Nollställer fält
            lstRegisterGradeCourses.setModel(courseModel);
            txtRegisterGradeFirstName.setText("");
            txtRegisterGradeLastName.setText("");
            lblRegisterGradeID.setText(" ");
            lblRegisterGradeDone.setText(" ");
            lblRegisterGradeSelectedStudent.setText(" ");
            cBoxRegisterGradeList.setSelectedIndex(0);
            cBoxRegisterGradeChooseSubject.setSelectedIndex(0);

        } catch (InfException ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_btnRegisterGradeSearchActionPerformed

    private void lstRegisterGradeStudentsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstRegisterGradeStudentsValueChanged
        //Denna metod uppdaterar etiketten som innehåller information om en valt elev i listan. Koden körs varje gång markören flyttas i listan
        
        
        try {
            String[] student = lstRegisterGradeStudents.getSelectedValue().toString().split(", "); //Delar upp raden som hämtas från listan
            lblRegisterGradeSelectedStudent.setText("- " + student[1] + " " + student[2]); //Sätter ut förnamn och efternamn
            lblRegisterGradeID.setText(student[0]);//Sätter ut Elev id
        } catch (Exception ex) {

        }

    }//GEN-LAST:event_lstRegisterGradeStudentsValueChanged

    private void cBoxRegisterGradeChooseSubjectPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cBoxRegisterGradeChooseSubjectPopupMenuWillBecomeInvisible
        //Denna metod visar alla kurser som tillhör ett valt ämne i en lista. Denna kod körs varje gång comboboxen stängs
        
        
        DefaultListModel listModel = new DefaultListModel();
        lblRegisterGradeDone.setText(" ");//Nollställer resultatfält

        if (Validate.cBoxIsNotEmpty(cBoxRegisterGradeChooseSubject)) { //Kontrollerar så ett ämne har valts

            try {

                ArrayList<String> courseList = db.fetchColumn("select kursnamn from kurs " //Hämtar kurser som hör till ämnet
                        + "join amne on kurs.amnestillhorighet = amne.AMNE_ID "
                        + "where amnesnamn ='" + cBoxRegisterGradeChooseSubject.getSelectedItem().toString() + "'");

                if (!Validate.checkEmptyDBColumn(courseList)) { //Kollar om kurslistan är tom
                    for (String course : courseList) {
                        listModel.addElement(course); //Läser in kurserna i en modell

                    }
                } else {
                    listModel.addElement("Inga kurser funna");
                }

            } catch (InfException ex) {
                System.out.println(ex.getMessage());
            }

        } else {
            listModel.addElement("Välj ett ämne");

        }

        lstRegisterGradeCourses.setModel(listModel); //Sätter in modellen i listan och placerar markören överst
        lstRegisterGradeCourses.setSelectedIndex(0);
        


    }//GEN-LAST:event_cBoxRegisterGradeChooseSubjectPopupMenuWillBecomeInvisible

    private void btnRegisterGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterGradeActionPerformed
        //Denna knapp kontrollerar input och läser in nytt betyg i databasen
        
        
        DefaultListModel studentModel = new DefaultListModel();
        DefaultListModel courseModel = new DefaultListModel();
        lblRegisterGradeDone.setText(" ");//Nollställer resultatetikett

        if (Validate.cBoxIsNotEmpty(cBoxRegisterGradeList) && Validate.listSelectedIsNotEmpty(lstRegisterGradeCourses)) { //Kollar så man har vält nytt betyg och kurs
            if (Validate.labelIsNotEmpty(lblRegisterGradeID)) { //Kollar så ett elev id har angetts från elevlistan

                try {
                    String[] grade = cBoxRegisterGradeList.getSelectedItem().toString().split(" - "); //Delar upp det balda betyget i betyg_id/betygnamn

                    db.insert("insert into har_betyg_i (elev_id, kurs_id, kursbetyg) " //Läser in nytt betyg i databasen
                            + "values ((select elev_id from elev where elev_id ='" + lblRegisterGradeID.getText() + "'), "
                            + "(select kurs_id from kurs where kursnamn ='" + lstRegisterGradeCourses.getSelectedValue().toString() + "'), "
                            + "'" + grade[0] + "')");

                    lblRegisterGradeDone.setText("Betyget har registrerats."); //Meddelar resultat
                    
                    courseModel.addElement("Välj ett ämne"); //Nollställer fält
                    lstRegisterGradeCourses.setModel(courseModel);
                    lstRegisterGradeStudents.setModel(studentModel);
                    txtRegisterStudentFirstName.setText("");
                    txtRegisterStudentLastName.setText("");
                    lblRegisterGradeSelectedStudent.setText(" ");
                    lblRegisterGradeID.setText(" ");
                    cBoxRegisterGradeList.setSelectedIndex(0);
                    cBoxRegisterGradeChooseSubject.setSelectedIndex(0);
                } catch (InfException ex) {
                    JOptionPane.showMessageDialog(null, "Eleven har redan ett betyg i den valda kursen. Du kan ändra dennes betyg genom att klicka på 'Ändra på elev-betyg'.");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Elev ID hittades ej. Kontrollera att du har valt en elev från listan genom att klicka på denne.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Du måste välja en elev, ett betyg, ett ämne och en kurs.");
        }

    }//GEN-LAST:event_btnRegisterGradeActionPerformed

    private void cBoxRegisterGradeListPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cBoxRegisterGradeListPopupMenuWillBecomeInvisible
        lblRegisterGradeDone.setText(" "); //Nollställer resultat om comboboxen stängs

    }//GEN-LAST:event_cBoxRegisterGradeListPopupMenuWillBecomeInvisible

    private void btnChangeGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeGradeActionPerformed
        //Denna knapp kontrollerar input och uppdaterar betyg i databasen
        
        
        DefaultListModel studentModel = new DefaultListModel();
        DefaultListModel courseModel = new DefaultListModel();
        lblChangeGradeDone.setText(" "); //Nollställer resultat

        if (Validate.cBoxIsNotEmpty(cBoxChangeGradeList)) { //Kontroller så ett betyg har valts
            if (Validate.labelIsNotEmpty(lblChangeGradeSelectedGrade) && Validate.labelIsNotEmpty(lblChangeGradeID)) { //Kontrollerar så det tidigare betyget och ett elev_id har lästs in från listan

                try {

                    String[] studentGrade = lblChangeGradeSelectedGrade.getText().split(" - "); //Delar upp valt betyg
                    String[] grade = cBoxChangeGradeList.getSelectedItem().toString().split(" - "); //Delar upp nytt betyg

                    db.update("update har_betyg_I " //Uppdaterar betyg i databasen
                            + "set kursbetyg = '" + grade[0] + "' "
                            + "where elev_id = '" + lblChangeGradeID.getText() + "' "
                            + "and kurs_id = '" + studentGrade[1] + "'");

                    lblChangeGradeDone.setText("Betyget har ändrats."); //Meddelar resultat
                    
                    courseModel.addElement("Välj ett ämne"); //Nollställer fält
                    lstChangeGradeCourses.setModel(courseModel);
                    lstChangeGradeStudents.setModel(studentModel);
                    txtChangeStudentFirstName.setText("");
                    txtChangeStudentLastName.setText("");
                    lblChangeGradeSelectedStudent.setText(" ");
                    lblChangeGradeSelectedGrade.setText(" ");
                    lblChangeGradeID.setText(" ");
                    cBoxChangeGradeList.setSelectedIndex(0);
                    cBoxChangeGradeChooseSubject.setSelectedIndex(0);

                } catch (InfException ex) {
                    System.out.println(ex.getMessage());
                }

            } else {
                JOptionPane.showMessageDialog(null, "Kurs hittades ej. Kontrollera att du har valt en elev/kurs från listan genom att klicka på denne.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Du måste välja ett nytt betyg.");
        }


    }//GEN-LAST:event_btnChangeGradeActionPerformed

    private void btnChangeGradeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeGradeSearchActionPerformed
        //Denna knapp söker fram elever, kurser, betyg från databasen efter vilken kurs och elev som har valts
        
        
        DefaultListModel studentModel = new DefaultListModel();
        DefaultListModel courseModel = new DefaultListModel();

        try {

            String sqlFirstName;
            String sqlLastName;

            if (Validate.textIsNotEmptyNoMsg(txtChangeGradeFirstName)) { //Om textfältet lämnas tomt så söker databasen efter null-värden. Annars så söker den på ett string-värde.
                sqlFirstName = "where fornamn like '%" + txtChangeGradeFirstName.getText() + "%' ";
            } else {
                sqlFirstName = "where fornamn is null ";
            }

            if (Validate.textIsNotEmptyNoMsg(txtChangeGradeLastName)) {
                sqlLastName = "and efternamn like '%" + txtChangeGradeLastName.getText() + "%'";
            } else {
                sqlLastName = "and efternamn is null ";
            }

            if (Validate.listSelectedIsNotEmpty(lstChangeGradeCourses)) { //Kollar så ett giltigt värde har valts från listan

                ArrayList<HashMap<String, String>> studentList = db.fetchRows("select elev.elev_id, fornamn, efternamn, kursnamn, kurs.kurs_id, kursbetyg from elev " //Letar fram elev/kurs/betyg i databasen beroende på vald kurs och elev
                        + "join har_betyg_i on elev.elev_id = har_betyg_i.elev_id "
                        + "join kurs on har_betyg_i.kurs_id = kurs.kurs_id "
                        + sqlFirstName + sqlLastName
                        + "and kursnamn = '" + lstChangeGradeCourses.getSelectedValue().toString() + "'");

                if (!Validate.checkEmptyDBRows(studentList)) { //Kollar om elev/kurs/betyg hittades
                    for (HashMap<String, String> student : studentList) {
                        studentModel.addElement(student.get("ELEV_ID") + ",  " + student.get("FORNAMN") + ",  " //läser in elev/kurs/betyg i modellen
                                + student.get("EFTERNAMN") + ",  " + student.get("KURSNAMN") + ",  "
                                + student.get("KURS_ID") + ",  " + student.get("KURSBETYG"));

                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Inga betyg hittades. Försök med ett annat namn.");
                }

                lstChangeGradeStudents.setModel(studentModel); //Laddar in modell i listan
                
                
                courseModel.addElement(""); //Nollställer fält
                lstChangeGradeCourses.setModel(courseModel);
                txtChangeGradeFirstName.setText("");
                txtChangeGradeLastName.setText("");
                lblChangeGradeSelectedGrade.setText("");
                lblChangeGradeID.setText(" ");
                lblChangeGradeDone.setText(" ");
                lblChangeGradeSelectedStudent.setText(" ");
                cBoxChangeGradeList.setSelectedIndex(0);
                cBoxChangeGradeChooseSubject.setSelectedIndex(0);

            } else {
                JOptionPane.showMessageDialog(null, "Du måste ange ett ämne och en kurs.");
            }

        } catch (InfException ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_btnChangeGradeSearchActionPerformed

    private void lstChangeGradeStudentsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstChangeGradeStudentsValueChanged
        //Denna metod uppdaterar etiketter med elev/betyg-information när denne har valts i listan. Denna kod körs varje gång markören i listan flyttas.
        
        
        try {
            String[] student = lstChangeGradeStudents.getSelectedValue().toString().split(",  "); //Delar upp den valda raden
            lblChangeGradeSelectedStudent.setText("- " + student[1] + " " + student[2]); //Skriver ut namn
            lblChangeGradeID.setText(student[0]); //Skriver ut elev id
            lblChangeGradeSelectedGrade.setText(student[3] + " - " + student[4] + " - " + student[5]); //Skriver ut betyg

        } catch (Exception ex) {

        }

    }//GEN-LAST:event_lstChangeGradeStudentsValueChanged

    private void cBoxChangeGradeChooseSubjectPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cBoxChangeGradeChooseSubjectPopupMenuWillBecomeInvisible
        //Denna metod läser in alla kurser som hör till ett utvalt ämne till en lista
        
        
        DefaultListModel listModel = new DefaultListModel();
        lblChangeGradeDone.setText(" "); //Nollställer resultat

        if (Validate.cBoxIsNotEmpty(cBoxChangeGradeChooseSubject)) { //Kontrollerar så ett ämne har valts

            try {

                ArrayList<String> courseList = db.fetchColumn("select kursnamn from kurs " //Hämtar alla kurser som hör till det valda ämnet
                        + "join amne on kurs.amnestillhorighet = amne.AMNE_ID "
                        + "where amnesnamn ='" + cBoxChangeGradeChooseSubject.getSelectedItem().toString() + "'");

                if (!Validate.checkEmptyDBColumn(courseList)) {
                    for (String course : courseList) {
                        listModel.addElement(course); //Läser in kurserna i en modell

                    }
                } else {
                    listModel.addElement("Inga kurser funna");
                }

            } catch (InfException ex) {
                System.out.println(ex.getMessage());
            }

        } else {
            listModel.addElement("Välj ett ämne");

        }

        lstChangeGradeCourses.setModel(listModel);//Laddar in modellen i listan och placerar markören överst
        lstChangeGradeCourses.setSelectedIndex(0);
        
    }//GEN-LAST:event_cBoxChangeGradeChooseSubjectPopupMenuWillBecomeInvisible

    private void btnAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminActionPerformed
        Start.adminActions(pwd); //Ber start-klassen att öppna admin-gränssnittet
        dispose();
    }//GEN-LAST:event_btnAdminActionPerformed

    private void cBoxChangeStudentSubjectPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cBoxChangeStudentSubjectPopupMenuWillBecomeInvisible
        //Denna metod uppdaterar kurslistan med kurser som hör till ett valt ämne. Denna kod körs varje gång som comboboxen stängs
        
        
        DefaultListModel listModel = new DefaultListModel();

        if (Validate.cBoxIsNotEmpty(cBoxChangeStudentSubject)) { //Kollar så ett ämne har valts

            try {
                String[] subjectInfo = cBoxChangeStudentSubject.getSelectedItem().toString().split(" - "); //Delar upp ämnesinformationen

                ArrayList<HashMap<String, String>> courseList = db.fetchRows("select kurs_id, kursnamn from kurs " //hittar kurser som hör till ett ämnesID
                        + "join amne on kurs.amnestillhorighet = amne.AMNE_ID "
                        + "where amne_id ='" + subjectInfo[0] + "'");

                if (!Validate.checkEmptyDBRows(courseList)) { //Kollar om några kurser hittades eller

                    for (HashMap<String, String> course : courseList) {

                        listModel.addElement(course.get("KURS_ID") + ", " + course.get("KURSNAMN")); //Läser in kurserna i en modell

                    }

                } else {
                    listModel.addElement("Inga kurser funna");

                }

            } catch (InfException ex) {
                System.out.println(ex.getMessage());
            }

        } else {

            listModel.addElement("Välj ett ämne");

        }

        lstChangeStudentCourse.setModel(listModel); //Modellen läses in i en lista

    }//GEN-LAST:event_cBoxChangeStudentSubjectPopupMenuWillBecomeInvisible

    private void btnChangeStudentCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeStudentCourseActionPerformed
        //Denna knapp kontrollerar input och uppdaterar databasen med en ny kurs som registreras på en elev
        
        DefaultListModel studentModel = new DefaultListModel();
        DefaultListModel courseModel = new DefaultListModel();
        lblChangeStudentDone.setText(""); //Nollställer resultat

        if (Validate.labelIsNotEmpty(lblChangeStudentID)) { //kollar så ett Elev id har angetts
            if (Validate.listSelectedIsNotEmpty(lstChangeStudentCourse)) { ////kollar så en kurs har valts i listan

                try {
                    String[] courseInfo = lstChangeStudentCourse.getSelectedValue().toString().split(", "); //delar upp kursinformationen
                    db.insert("insert into registrerad_pa " //läser in en ny kurs/elev registrering i databasen
                            + "values ('" + lblChangeStudentID.getText() + "', '" + courseInfo[0] + "')"); 

                    lblChangeStudentDone.setText("Kurs registrerad."); //Meddelar resultat
                    
                    
                    lstChangeStudents.setModel(studentModel); //Nollställer fält
                    courseModel.addElement("Välj ett ämne");
                    lstChangeStudentCourse.setModel(courseModel);
                    txtChangeStudentFirstName.setText("");
                    txtChangeStudentLastName.setText("");
                    lblChangeStudentID.setText("");
                    txtChangeStudentFirstNameSearch.setText("");
                    txtChangeStudentLastNameSearch.setText("");

                } catch (InfException ex) {
                    JOptionPane.showMessageDialog(null, "Eleven är redan registrerad på denna kurs.");
                    
                }
            } else {
                JOptionPane.showMessageDialog(null, "Du måste välja en kurs från listan.");
                
            }
        } else {
            JOptionPane.showMessageDialog(null, "Elev ID hittades ej. Kontrollera att du har valt en elev från listan genom att klicka på denne.");
            
        }

    }//GEN-LAST:event_btnChangeStudentCourseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TeacherActions.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TeacherActions.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TeacherActions.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TeacherActions.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new TeacherActions().setVisible(true); 
                // Kommenterade bort denna autogenererade kod då den skapade exceptions - och den behövdes inte.
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPoints;
    private javax.swing.JButton btnAdmin;
    private javax.swing.JButton btnChangeGrade;
    private javax.swing.JButton btnChangeGradeSearch;
    private javax.swing.JButton btnChangePwd;
    private javax.swing.JButton btnChangeStudent;
    private javax.swing.JButton btnChangeStudentCourse;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnRegisterGrade;
    private javax.swing.JButton btnRegisterGradeSearch;
    private javax.swing.JButton btnRegisterStudent;
    private javax.swing.JButton btnStudentChangeSearch;
    private javax.swing.JButton btnSubtractPoints;
    private javax.swing.JButton btnTeacherAddStudentGrade;
    private javax.swing.JButton btnTeacherChangeStudentGrade;
    private javax.swing.JButton btnTeacherHouseCupChange;
    private javax.swing.JButton btnTeacherPassword;
    private javax.swing.JButton btnTeacherRegisterStudent;
    private javax.swing.JButton btnTeacherUpdateStudent;
    private javax.swing.JComboBox cBoxChangeGradeChooseSubject;
    private javax.swing.JComboBox cBoxChangeGradeList;
    private javax.swing.JComboBox cBoxChangeHouse;
    private javax.swing.JComboBox cBoxChangeStudentSubject;
    private javax.swing.JComboBox cBoxHouseCupPointsHouses;
    private javax.swing.JComboBox cBoxRegisterGradeChooseSubject;
    private javax.swing.JComboBox cBoxRegisterGradeList;
    private javax.swing.JComboBox cBoxRegisterStudentHouses;
    private javax.swing.JLabel lblAddPoints;
    private javax.swing.JLabel lblChangeGradeChooseSubject;
    private javax.swing.JLabel lblChangeGradeCourses;
    private javax.swing.JLabel lblChangeGradeDone;
    private javax.swing.JLabel lblChangeGradeFirstName;
    private javax.swing.JLabel lblChangeGradeFound;
    private javax.swing.JLabel lblChangeGradeFoundInfo;
    private javax.swing.JLabel lblChangeGradeID;
    private javax.swing.JLabel lblChangeGradeLastName;
    private javax.swing.JLabel lblChangeGradeList;
    private javax.swing.JLabel lblChangeGradeSearch;
    private javax.swing.JLabel lblChangeGradeSelectedGrade;
    private javax.swing.JLabel lblChangeGradeSelectedGradeText;
    private javax.swing.JLabel lblChangeGradeSelectedStudent;
    private javax.swing.JLabel lblChangeGradeSelectedStudentInfo;
    private javax.swing.JLabel lblChangeGradeText;
    private javax.swing.JLabel lblChangeHouse;
    private javax.swing.JLabel lblChangeHousePoints;
    private javax.swing.JLabel lblChangePointsHouse;
    private javax.swing.JLabel lblChangePwd;
    private javax.swing.JLabel lblChangeSearch;
    private javax.swing.JLabel lblChangeSelectedStudent;
    private javax.swing.JLabel lblChangeStudent;
    private javax.swing.JLabel lblChangeStudentCourse;
    private javax.swing.JLabel lblChangeStudentCourseInfo;
    private javax.swing.JLabel lblChangeStudentDone;
    private javax.swing.JLabel lblChangeStudentFirstName;
    private javax.swing.JLabel lblChangeStudentFirstNameSearch;
    private javax.swing.JLabel lblChangeStudentID;
    private javax.swing.JLabel lblChangeStudentInfo;
    private javax.swing.JLabel lblChangeStudentLastName;
    private javax.swing.JLabel lblChangeStudentLastNameSearch;
    private javax.swing.JLabel lblChangeStudentRoom;
    private javax.swing.JLabel lblChangeStudentSubject;
    private javax.swing.JLabel lblChangeStudentsFound;
    private javax.swing.JLabel lblHouseChoice;
    private javax.swing.JLabel lblHouseCurrentPointText;
    private javax.swing.JLabel lblHouseCurrentPoints;
    private javax.swing.JLabel lblNewPwd;
    private javax.swing.JLabel lblPwdChangeDone;
    private javax.swing.JLabel lblPwdRepeat;
    private javax.swing.JLabel lblQuestion;
    private javax.swing.JLabel lblRegisterGradeChooseSubject;
    private javax.swing.JLabel lblRegisterGradeCourses;
    private javax.swing.JLabel lblRegisterGradeDone;
    private javax.swing.JLabel lblRegisterGradeFirstName;
    private javax.swing.JLabel lblRegisterGradeFound;
    private javax.swing.JLabel lblRegisterGradeFoundInfo;
    private javax.swing.JLabel lblRegisterGradeID;
    private javax.swing.JLabel lblRegisterGradeLastName;
    private javax.swing.JLabel lblRegisterGradeList;
    private javax.swing.JLabel lblRegisterGradeSearch;
    private javax.swing.JLabel lblRegisterGradeSelectedStudent;
    private javax.swing.JLabel lblRegisterGradeSelectedStudentInfo;
    private javax.swing.JLabel lblRegisterGradeText;
    private javax.swing.JLabel lblRegisterStudent;
    private javax.swing.JLabel lblRooms;
    private javax.swing.JLabel lblStudentFirstName;
    private javax.swing.JLabel lblStudentIsRegistered;
    private javax.swing.JLabel lblStudentLastName;
    private javax.swing.JLabel lblSubtractPoints;
    private javax.swing.JLabel lblTeacherChangeGrade;
    private javax.swing.JLabel lblTeacherRegisterGrade;
    private javax.swing.JList lstChangeGradeCourses;
    private javax.swing.JList lstChangeGradeStudents;
    private javax.swing.JList lstChangeRooms;
    private javax.swing.JList lstChangeStudentCourse;
    private javax.swing.JList lstChangeStudents;
    private javax.swing.JList lstRegisterGradeCourses;
    private javax.swing.JList lstRegisterGradeStudents;
    private javax.swing.JList lstRooms;
    private javax.swing.JPanel pblTeacherRegisterGrade;
    private javax.swing.JPanel pnlChangePwd;
    private javax.swing.JPanel pnlHouseCupPoints;
    private javax.swing.JPanel pnlRegisterStudent;
    private javax.swing.JPanel pnlStart;
    private javax.swing.JPanel pnlTeacherChangeGrade;
    private javax.swing.JPanel pnlTeacherMain;
    private javax.swing.JPanel pnlTeacherUpdateStudent;
    private javax.swing.JPasswordField pwdNewPwd;
    private javax.swing.JPasswordField pwdRepeatPwd;
    private javax.swing.JScrollPane scrChangeGradeCourses;
    private javax.swing.JScrollPane scrChangeGradeStudents;
    private javax.swing.JScrollPane scrChangeRooms;
    private javax.swing.JScrollPane scrChangeStudentCourse;
    private javax.swing.JScrollPane scrChangeStudents;
    private javax.swing.JScrollPane scrRegisterGradeCourses;
    private javax.swing.JScrollPane scrRegisterGradeStudents;
    private javax.swing.JScrollPane scrRooms;
    private javax.swing.JTextField txtAddPoints;
    private javax.swing.JTextField txtChangeGradeFirstName;
    private javax.swing.JTextField txtChangeGradeLastName;
    private javax.swing.JTextField txtChangeStudentFirstName;
    private javax.swing.JTextField txtChangeStudentFirstNameSearch;
    private javax.swing.JLabel txtChangeStudentIDText;
    private javax.swing.JTextField txtChangeStudentLastName;
    private javax.swing.JTextField txtChangeStudentLastNameSearch;
    private javax.swing.JTextField txtRegisterGradeFirstName;
    private javax.swing.JTextField txtRegisterGradeLastName;
    private javax.swing.JTextField txtRegisterStudentFirstName;
    private javax.swing.JTextField txtRegisterStudentLastName;
    private javax.swing.JTextField txtSubtractPoints;
    // End of variables declaration//GEN-END:variables
}
