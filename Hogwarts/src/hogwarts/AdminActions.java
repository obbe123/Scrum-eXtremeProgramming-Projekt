package hogwarts;

import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import oru.inf.InfException;
import oru.inf.InfDB;
import javax.swing.DefaultListModel;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

/**
 *
 * @author Henric Berg and Peter Karlsson
 */
public class AdminActions extends javax.swing.JFrame {

    /**
     * Denna klass är administratörernas gränssnitt. Endast lärare med
     * administratörstatus kommer att använda denna.
     */
    boolean admin = true; //De fält som deklareras är en boolean adminstatus, ett lösenord och en databas
    String pwd;
    InfDB db;

    public AdminActions(String pwd) { //Konstuktorn initialiserar en databas med hjälp av Database-klassen och tilldelar pwd-fältet med ett lösenord som skickas med från lärar-gränsnittet. 
        initComponents();             //Sen visas den tomma start-containern med hjälp av getLayout-metoden
        this.pwd = pwd;
        db = Database.getDB();

        getLayout("pnlStart");

    }

    public void getLayout(String panelName) { //Denna metods jobb är att initialisera, och visa olika containers beroende på vilken funktion/knapp som användaren vill utnyttja.
        //Metoden tar endast emot containerns/panelens namn - och visar den.
        CardLayout card = (CardLayout) pnlAdminMain.getLayout();
        card.show(pnlAdminMain, panelName);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblQuestion = new javax.swing.JLabel();
        btnLogOut = new javax.swing.JButton();
        btnAdminAddTeacher = new javax.swing.JButton();
        btnAdminAddCourses = new javax.swing.JButton();
        btnAdminChangeCourses = new javax.swing.JButton();
        btnTeacher = new javax.swing.JButton();
        btnAdminDeleteStudent = new javax.swing.JButton();
        btnAdminChangeTeacher = new javax.swing.JButton();
        pnlAdminMain = new javax.swing.JPanel();
        pnlStart = new javax.swing.JPanel();
        pnlAdminRegisterTeacher = new javax.swing.JPanel();
        btnRegisterTeacher = new javax.swing.JButton();
        lblTeacherIsRegistered = new javax.swing.JLabel();
        txtRegisterTeacherFirstName = new javax.swing.JTextField();
        txtRegisterTeacherLastName = new javax.swing.JTextField();
        lblTeacherFirstName = new javax.swing.JLabel();
        lblTeacherLastName = new javax.swing.JLabel();
        lblRegisterTeacher = new javax.swing.JLabel();
        lblRegisterTeacherChoosePwd = new javax.swing.JLabel();
        ckbxRegisterTeacherAdmin = new javax.swing.JCheckBox();
        pwdRegisterTeacherPwd = new javax.swing.JPasswordField();
        pwdRegisterTeacherPwdRepeat = new javax.swing.JPasswordField();
        lblRegisterTeacherRepeatPwd = new javax.swing.JLabel();
        pnlAdminChangeTeacher = new javax.swing.JPanel();
        lblChangeTeacherLastNameSearch = new javax.swing.JLabel();
        lblChangeTeacherInfo = new javax.swing.JLabel();
        txtChangeTeacherLastNameSearch = new javax.swing.JTextField();
        lblChangeSelectedTeacher = new javax.swing.JLabel();
        txtChangeTeacherFirstName = new javax.swing.JTextField();
        lblChangeTeacherFound = new javax.swing.JLabel();
        txtChangeTeacherLastName = new javax.swing.JTextField();
        lblChangeTeacherDone = new javax.swing.JLabel();
        txtChangeTeacherFirstNameSearch = new javax.swing.JTextField();
        btnTeacherChangeSearch = new javax.swing.JButton();
        lblChangeTeacherFirstName = new javax.swing.JLabel();
        lblChangeTeacher = new javax.swing.JLabel();
        lblChangeTeacherLastName = new javax.swing.JLabel();
        txtChangeTeacherIDText = new javax.swing.JLabel();
        lblChangeTeacherFirstNameSearch = new javax.swing.JLabel();
        lblChangeTeacherSearch = new javax.swing.JLabel();
        btnChangeTeacher = new javax.swing.JButton();
        scrChangeTeachers = new javax.swing.JScrollPane();
        lstChangeTeachers = new javax.swing.JList();
        lblChangeTeacherID = new javax.swing.JLabel();
        ckbxChangeTeacherAdmin = new javax.swing.JCheckBox();
        pwdChangeTeacherNewPwd = new javax.swing.JPasswordField();
        pwdChangeTeacherRepeatPwd = new javax.swing.JPasswordField();
        lblChangeTeacherNewPwd = new javax.swing.JLabel();
        lblChangeTeacherRepeatPwd = new javax.swing.JLabel();
        lblChangeTeacherPwdInfo = new javax.swing.JLabel();
        btnChangeTeacherPwd = new javax.swing.JButton();
        lblChangeTeacherRemove = new javax.swing.JLabel();
        ckbxChangeTeacherFirstName = new javax.swing.JCheckBox();
        ckbxChangeTeacherLastName = new javax.swing.JCheckBox();
        ckbxChangeTeacherPwd = new javax.swing.JCheckBox();
        ckbxChangeTeacherRemoveAdmin = new javax.swing.JCheckBox();
        btnChangeTeacherRemove = new javax.swing.JButton();
        ckbxChangeTeacherRemoveAll = new javax.swing.JCheckBox();
        lblChangeTeacherRemoveWarning = new javax.swing.JLabel();
        ckbxChangeTeacherHead = new javax.swing.JCheckBox();
        cBoxChangeTeacherHouses = new javax.swing.JComboBox();
        ckbxChangeTeacherRemoveHead = new javax.swing.JCheckBox();
        lblChangeTeacherLevel = new javax.swing.JLabel();
        scrChangeTeacherLevel = new javax.swing.JScrollPane();
        lstChangeTeacherLevel = new javax.swing.JList();
        lblChangeTeacherLevelInfo = new javax.swing.JLabel();
        cBoxChangeTeacherNewLevel = new javax.swing.JComboBox();
        lblChangeTeacherNewLevel = new javax.swing.JLabel();
        btnChangeTeacherLevel = new javax.swing.JButton();
        btnChangeTeacherRemoveLevel = new javax.swing.JButton();
        lblChangeTeacherAddLevel = new javax.swing.JLabel();
        cBoxChangeTeacherSubject = new javax.swing.JComboBox();
        cBoxChangeTeacherAddLevel = new javax.swing.JComboBox();
        btnChangeTeacherAddLevel = new javax.swing.JButton();
        pnlAdminChangeStudent = new javax.swing.JPanel();
        ckbxChangeStudentRemovePrefect = new javax.swing.JCheckBox();
        ckbxChangeStudentRoom = new javax.swing.JCheckBox();
        ckbxChangeStudentLastName = new javax.swing.JCheckBox();
        ckbxChangeStudentFirstName = new javax.swing.JCheckBox();
        lblChangeStudentRemove = new javax.swing.JLabel();
        lblChangeStudentDone = new javax.swing.JLabel();
        txtChangeStudentFirstNameSearch = new javax.swing.JTextField();
        lblChangeStudentFound = new javax.swing.JLabel();
        lblChangeStudent = new javax.swing.JLabel();
        btnStudentChangeSearch = new javax.swing.JButton();
        lblChangeStudentNameText = new javax.swing.JLabel();
        lblChangeStudentSearch = new javax.swing.JLabel();
        lblChangeStudentFirstNameSearch = new javax.swing.JLabel();
        txtChangeStudentIDText = new javax.swing.JLabel();
        ckbxChangeStudentPrefect = new javax.swing.JCheckBox();
        cBoxChangeStudentHouses = new javax.swing.JComboBox();
        lblChangeStudentRemoveWarning = new javax.swing.JLabel();
        btnChangeStudentRemove = new javax.swing.JButton();
        ckbxChangeStudentRemoveAll = new javax.swing.JCheckBox();
        scrChangeStudent = new javax.swing.JScrollPane();
        lstChangeStudent = new javax.swing.JList();
        btnChangeStudentPrefect = new javax.swing.JButton();
        lblChangeStudentLastNameSearch = new javax.swing.JLabel();
        lblChangeStudentInfo = new javax.swing.JLabel();
        txtChangeStudentLastNameSearch = new javax.swing.JTextField();
        lblChangeSelectedStudent = new javax.swing.JLabel();
        lblChangeStudentID = new javax.swing.JLabel();
        lblChangeStudentFirstName = new javax.swing.JLabel();
        lblChangeStudentLastName = new javax.swing.JLabel();
        lblChangeStudentGradeInfo = new javax.swing.JLabel();
        scrChangeStudentGrade = new javax.swing.JScrollPane();
        lstChangeStudentGrade = new javax.swing.JList();
        btnChangeStudentGrade = new javax.swing.JButton();
        lblChangeStudentCourse = new javax.swing.JLabel();
        lblChangeStudentCourseInfo = new javax.swing.JLabel();
        scrChangeStudentCourse = new javax.swing.JScrollPane();
        lstChangeStudentCourse = new javax.swing.JList();
        btnChangeStudentCourse = new javax.swing.JButton();
        pnlAdminRegisterCourse = new javax.swing.JPanel();
        lblRegisterCourse = new javax.swing.JLabel();
        txtRegisterCourseName = new javax.swing.JTextField();
        txtRegisterCourseStartDate = new javax.swing.JTextField();
        txtRegisterCourseEndDate = new javax.swing.JTextField();
        cBoxRegisterCourseSubject = new javax.swing.JComboBox();
        btnRegisterCourse = new javax.swing.JButton();
        lblRegisterCourseName = new javax.swing.JLabel();
        lblRegisterCourseStartDate = new javax.swing.JLabel();
        lblRegisterCourseEndDate = new javax.swing.JLabel();
        lblRegisterCourseSubject = new javax.swing.JLabel();
        lblRegisterCourseTeacher = new javax.swing.JLabel();
        scrRegisterCourseTeacher = new javax.swing.JScrollPane();
        lstRegisterCourseTeacher = new javax.swing.JList();
        lblRegisterCourseDone = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaRegisterCourseDescription = new javax.swing.JTextArea();
        lblRegisterCourseSubjectInfo = new javax.swing.JLabel();
        lblRegisterCourseTeacherInfo = new javax.swing.JLabel();
        pnlAdminChangeCourse = new javax.swing.JPanel();
        lblChangeCourse = new javax.swing.JLabel();
        cBoxChangeCourseSubjectSort = new javax.swing.JComboBox();
        lblChangeCourseSubject = new javax.swing.JLabel();
        lblChangeCourseList = new javax.swing.JLabel();
        lblChangeCourseListInfo = new javax.swing.JLabel();
        scrChangeCourseList = new javax.swing.JScrollPane();
        lstChangeCourseList = new javax.swing.JList();
        lblChangeCourseIDText = new javax.swing.JLabel();
        lblChangeCourseID = new javax.swing.JLabel();
        txtChangeCourseName = new javax.swing.JTextField();
        txtChangeCourseStartDate = new javax.swing.JTextField();
        txtChangeCourseEndDate = new javax.swing.JTextField();
        cBoxChangeCourseTeacher = new javax.swing.JComboBox();
        lblChangeCourseName = new javax.swing.JLabel();
        lblChangeCourseStartDate = new javax.swing.JLabel();
        lblChangeCourseEndDate = new javax.swing.JLabel();
        lblChangeCourseTeacher = new javax.swing.JLabel();
        lblChangeCourseText = new javax.swing.JLabel();
        btnChangeCourse = new javax.swing.JButton();
        lblChangeCourseRemove = new javax.swing.JLabel();
        ckbxChangeCourseName = new javax.swing.JCheckBox();
        ckbxChangeCourseStartDate = new javax.swing.JCheckBox();
        ckbxChangeCourseEndDate = new javax.swing.JCheckBox();
        ckbxChangeCourseTeacher = new javax.swing.JCheckBox();
        ckbxChangeCourseSubject = new javax.swing.JCheckBox();
        btnChangeCourseShowAll = new javax.swing.JButton();
        cBoxChangeCourseSubject = new javax.swing.JComboBox();
        lblChangeCourseNewSubject = new javax.swing.JLabel();
        ckbxChangeCourseRemoveAll = new javax.swing.JCheckBox();
        lblChangeTeacherRemoveWarning1 = new javax.swing.JLabel();
        btnChangeCourseRemove = new javax.swing.JButton();
        lblChangeCourseDone = new javax.swing.JLabel();
        lblChangeCourseOR = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        lblQuestion.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblQuestion.setText("Välj funktion:");

        btnLogOut.setText("Logga ut");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        btnAdminAddTeacher.setText("Registrera ny lärare");
        btnAdminAddTeacher.setMaximumSize(new java.awt.Dimension(127, 23));
        btnAdminAddTeacher.setMinimumSize(new java.awt.Dimension(127, 23));
        btnAdminAddTeacher.setPreferredSize(new java.awt.Dimension(127, 23));
        btnAdminAddTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminAddTeacherActionPerformed(evt);
            }
        });

        btnAdminAddCourses.setText("Registrera ny kurs");
        btnAdminAddCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminAddCoursesActionPerformed(evt);
            }
        });

        btnAdminChangeCourses.setText("Ändra eller ta bort kurs");
        btnAdminChangeCourses.setMaximumSize(new java.awt.Dimension(127, 23));
        btnAdminChangeCourses.setMinimumSize(new java.awt.Dimension(127, 23));
        btnAdminChangeCourses.setPreferredSize(new java.awt.Dimension(127, 23));
        btnAdminChangeCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminChangeCoursesActionPerformed(evt);
            }
        });

        btnTeacher.setText("Lärarfunktioner");
        btnTeacher.setMaximumSize(new java.awt.Dimension(151, 23));
        btnTeacher.setMinimumSize(new java.awt.Dimension(151, 23));
        btnTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeacherActionPerformed(evt);
            }
        });

        btnAdminDeleteStudent.setText("Ändra eller ta bort elev/prefekt");
        btnAdminDeleteStudent.setMaximumSize(new java.awt.Dimension(127, 23));
        btnAdminDeleteStudent.setMinimumSize(new java.awt.Dimension(127, 23));
        btnAdminDeleteStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminDeleteStudentActionPerformed(evt);
            }
        });

        btnAdminChangeTeacher.setText("Ändra eller ta bort lärare/föreståndare");
        btnAdminChangeTeacher.setMaximumSize(new java.awt.Dimension(127, 23));
        btnAdminChangeTeacher.setMinimumSize(new java.awt.Dimension(127, 23));
        btnAdminChangeTeacher.setPreferredSize(new java.awt.Dimension(127, 23));
        btnAdminChangeTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminChangeTeacherActionPerformed(evt);
            }
        });

        pnlAdminMain.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout pnlStartLayout = new javax.swing.GroupLayout(pnlStart);
        pnlStart.setLayout(pnlStartLayout);
        pnlStartLayout.setHorizontalGroup(
            pnlStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1010, Short.MAX_VALUE)
        );
        pnlStartLayout.setVerticalGroup(
            pnlStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 492, Short.MAX_VALUE)
        );

        pnlAdminMain.add(pnlStart, "pnlStart");

        btnRegisterTeacher.setText("Registrera lärare");
        btnRegisterTeacher.setPreferredSize(new java.awt.Dimension(90, 60));
        btnRegisterTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterTeacherActionPerformed(evt);
            }
        });

        lblTeacherIsRegistered.setText(" ");

        lblTeacherFirstName.setText("Lärarens förnamn:");

        lblTeacherLastName.setText("Lärarens efternamn:");

        lblRegisterTeacher.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblRegisterTeacher.setText("Registrera ny lärare");

        lblRegisterTeacherChoosePwd.setText("Välj lösenord:");

        ckbxRegisterTeacherAdmin.setText("Administratör");

        lblRegisterTeacherRepeatPwd.setText("Upprepa lösenord:");

        javax.swing.GroupLayout pnlAdminRegisterTeacherLayout = new javax.swing.GroupLayout(pnlAdminRegisterTeacher);
        pnlAdminRegisterTeacher.setLayout(pnlAdminRegisterTeacherLayout);
        pnlAdminRegisterTeacherLayout.setHorizontalGroup(
            pnlAdminRegisterTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminRegisterTeacherLayout.createSequentialGroup()
                .addGroup(pnlAdminRegisterTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAdminRegisterTeacherLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblRegisterTeacher))
                    .addGroup(pnlAdminRegisterTeacherLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(pnlAdminRegisterTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTeacherFirstName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblTeacherLastName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblRegisterTeacherChoosePwd, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblRegisterTeacherRepeatPwd, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAdminRegisterTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ckbxRegisterTeacherAdmin)
                            .addGroup(pnlAdminRegisterTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(pwdRegisterTeacherPwdRepeat)
                                .addComponent(txtRegisterTeacherLastName)
                                .addComponent(txtRegisterTeacherFirstName)
                                .addComponent(pwdRegisterTeacherPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblTeacherIsRegistered)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAdminRegisterTeacherLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnRegisterTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)))
                .addContainerGap(688, Short.MAX_VALUE))
        );
        pnlAdminRegisterTeacherLayout.setVerticalGroup(
            pnlAdminRegisterTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminRegisterTeacherLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRegisterTeacher)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTeacherIsRegistered)
                .addGap(12, 12, 12)
                .addGroup(pnlAdminRegisterTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTeacherFirstName)
                    .addComponent(txtRegisterTeacherFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAdminRegisterTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRegisterTeacherLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTeacherLastName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAdminRegisterTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRegisterTeacherChoosePwd)
                    .addComponent(pwdRegisterTeacherPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAdminRegisterTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwdRegisterTeacherPwdRepeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRegisterTeacherRepeatPwd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ckbxRegisterTeacherAdmin)
                .addGap(18, 18, 18)
                .addComponent(btnRegisterTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(199, Short.MAX_VALUE))
        );

        pnlAdminMain.add(pnlAdminRegisterTeacher, "pnlAdminRegisterTeacher");

        lblChangeTeacherLastNameSearch.setText("Efternamn:");

        lblChangeTeacherInfo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblChangeTeacherInfo.setText("LärarID, Förnamn, Efternamn, Administratör, Föreståndare");

        lblChangeSelectedTeacher.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeSelectedTeacher.setText("Här kan lärarens uppgifter ändras när du har klickat på denne i listan");

        lblChangeTeacherFound.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeTeacherFound.setText("Här visas de lärare med det angivna namnet");

        lblChangeTeacherDone.setText(" ");

        btnTeacherChangeSearch.setText("Hitta lärare");
        btnTeacherChangeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeacherChangeSearchActionPerformed(evt);
            }
        });

        lblChangeTeacherFirstName.setText("Nytt förnamn:");

        lblChangeTeacher.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblChangeTeacher.setText("Ändra information om lärare");

        lblChangeTeacherLastName.setText("Nytt efternamn:");

        txtChangeTeacherIDText.setText("LärarID:");

        lblChangeTeacherFirstNameSearch.setText("Förnamn:");

        lblChangeTeacherSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeTeacherSearch.setText("Här kan du söka efter lärare");

        btnChangeTeacher.setText("Ändra information");
        btnChangeTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeTeacherActionPerformed(evt);
            }
        });

        lstChangeTeachers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstChangeTeachersValueChanged(evt);
            }
        });
        scrChangeTeachers.setViewportView(lstChangeTeachers);

        ckbxChangeTeacherAdmin.setText("Administratör");

        lblChangeTeacherNewPwd.setText("Nytt lösenord:");

        lblChangeTeacherRepeatPwd.setText("Upprepa lösenord:");

        lblChangeTeacherPwdInfo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeTeacherPwdInfo.setText("Här kan lärarens lösenord ändras när du har klickat på denne i listan");

        btnChangeTeacherPwd.setText("Ändra lösenord");
        btnChangeTeacherPwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeTeacherPwdActionPerformed(evt);
            }
        });

        lblChangeTeacherRemove.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeTeacherRemove.setText("Här kan du ta bort delar av lärarens information när du har klickat på denne i listan");

        ckbxChangeTeacherFirstName.setText("Förnamn");

        ckbxChangeTeacherLastName.setText("Efternamn");

        ckbxChangeTeacherPwd.setText("Lösenord");

        ckbxChangeTeacherRemoveAdmin.setText("Administratör");

        btnChangeTeacherRemove.setText("Ta bort");
        btnChangeTeacherRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeTeacherRemoveActionPerformed(evt);
            }
        });

        ckbxChangeTeacherRemoveAll.setText("Radera läraren helt");

        lblChangeTeacherRemoveWarning.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblChangeTeacherRemoveWarning.setText("(OBS! Använd endast detta alternativ vid uppenbara fel!)");

        ckbxChangeTeacherHead.setText("Föreståndare");
        ckbxChangeTeacherHead.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ckbxChangeTeacherHeadStateChanged(evt);
            }
        });

        cBoxChangeTeacherHouses.setEnabled(false);

        ckbxChangeTeacherRemoveHead.setText("Föreståndare");
        ckbxChangeTeacherRemoveHead.setEnabled(false);

        lblChangeTeacherLevel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeTeacherLevel.setText("Här kan du ändra/ta bort och lägga till kompetensnivåer");

        scrChangeTeacherLevel.setViewportView(lstChangeTeacherLevel);

        lblChangeTeacherLevelInfo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblChangeTeacherLevelInfo.setText("Ämnes ID, Ämne, Kompetensnivå");

        cBoxChangeTeacherNewLevel.setMaximumRowCount(11);
        cBoxChangeTeacherNewLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        lblChangeTeacherNewLevel.setText("Ändra/ta bort kompetensnivå:");

        btnChangeTeacherLevel.setText("Ändra kompetensnivå");
        btnChangeTeacherLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeTeacherLevelActionPerformed(evt);
            }
        });

        btnChangeTeacherRemoveLevel.setText("Ta bort kompetensnivå");
        btnChangeTeacherRemoveLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeTeacherRemoveLevelActionPerformed(evt);
            }
        });

        lblChangeTeacherAddLevel.setText("Lägg till ny kompetensnivå:");

        cBoxChangeTeacherAddLevel.setMaximumRowCount(11);
        cBoxChangeTeacherAddLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        btnChangeTeacherAddLevel.setText("Lägg till kompetensnivå");
        btnChangeTeacherAddLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeTeacherAddLevelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAdminChangeTeacherLayout = new javax.swing.GroupLayout(pnlAdminChangeTeacher);
        pnlAdminChangeTeacher.setLayout(pnlAdminChangeTeacherLayout);
        pnlAdminChangeTeacherLayout.setHorizontalGroup(
            pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblChangeTeacher)
                            .addComponent(lblChangeTeacherRemoveWarning))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                            .addGap(48, 48, 48)
                                            .addComponent(txtChangeTeacherIDText))
                                        .addComponent(lblChangeTeacherFirstName, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(lblChangeTeacherLastName, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                        .addComponent(txtChangeTeacherLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnChangeTeacher))
                                    .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtChangeTeacherFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblChangeTeacherID))
                                        .addGap(18, 18, 18)
                                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                                .addComponent(ckbxChangeTeacherHead)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cBoxChangeTeacherHouses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(ckbxChangeTeacherAdmin)))))
                            .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblChangeTeacherNewPwd, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblChangeTeacherRepeatPwd, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pwdChangeTeacherNewPwd)
                                    .addComponent(pwdChangeTeacherRepeatPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnChangeTeacherPwd))
                            .addComponent(lblChangeTeacherPwdInfo)
                            .addComponent(lblChangeTeacherRemove)
                            .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                .addComponent(ckbxChangeTeacherFirstName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ckbxChangeTeacherLastName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ckbxChangeTeacherPwd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ckbxChangeTeacherRemoveAdmin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ckbxChangeTeacherRemoveHead)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnChangeTeacherRemove))
                            .addComponent(ckbxChangeTeacherRemoveAll)
                            .addComponent(lblChangeSelectedTeacher)
                            .addComponent(lblChangeTeacherSearch)
                            .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtChangeTeacherFirstNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblChangeTeacherFirstNameSearch))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblChangeTeacherLastNameSearch)
                                    .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                        .addComponent(txtChangeTeacherLastNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnTeacherChangeSearch)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblChangeTeacherDone)))))
                        .addGap(18, 18, 18)
                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                        .addComponent(lblChangeTeacherLevelInfo)
                                        .addGap(70, 70, 70))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAdminChangeTeacherLayout.createSequentialGroup()
                                        .addComponent(scrChangeTeacherLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                        .addComponent(lblChangeTeacherNewLevel)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                        .addComponent(cBoxChangeTeacherNewLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnChangeTeacherLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(btnChangeTeacherRemoveLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblChangeTeacherInfo)
                                    .addComponent(lblChangeTeacherFound)
                                    .addComponent(lblChangeTeacherLevel)
                                    .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                        .addComponent(cBoxChangeTeacherSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cBoxChangeTeacherAddLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblChangeTeacherAddLevel)
                                    .addComponent(btnChangeTeacherAddLevel))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(scrChangeTeachers))))
                .addContainerGap())
        );
        pnlAdminChangeTeacherLayout.setVerticalGroup(
            pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAdminChangeTeacherLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                        .addComponent(lblChangeTeacher)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(lblChangeTeacherSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChangeTeacherFirstNameSearch)
                            .addComponent(lblChangeTeacherLastNameSearch))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtChangeTeacherFirstNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtChangeTeacherLastNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTeacherChangeSearch)
                            .addComponent(lblChangeTeacherDone))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(lblChangeSelectedTeacher)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtChangeTeacherIDText)
                            .addComponent(lblChangeTeacherID)
                            .addComponent(ckbxChangeTeacherHead)
                            .addComponent(cBoxChangeTeacherHouses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblChangeTeacherFound)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblChangeTeacherInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrChangeTeachers, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChangeTeacherFirstName)
                            .addComponent(txtChangeTeacherFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ckbxChangeTeacherAdmin))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChangeTeacherLastName)
                            .addComponent(txtChangeTeacherLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnChangeTeacher))
                        .addGap(28, 28, 28)
                        .addComponent(lblChangeTeacherPwdInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pwdChangeTeacherNewPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblChangeTeacherNewPwd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pwdChangeTeacherRepeatPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblChangeTeacherRepeatPwd)
                            .addComponent(btnChangeTeacherPwd))
                        .addGap(31, 31, 31)
                        .addComponent(lblChangeTeacherRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ckbxChangeTeacherFirstName)
                            .addComponent(ckbxChangeTeacherLastName)
                            .addComponent(ckbxChangeTeacherPwd)
                            .addComponent(ckbxChangeTeacherRemoveAdmin)
                            .addComponent(btnChangeTeacherRemove)
                            .addComponent(ckbxChangeTeacherRemoveHead)))
                    .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                        .addComponent(lblChangeTeacherLevel)
                        .addGap(7, 7, 7)
                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                .addComponent(lblChangeTeacherLevelInfo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scrChangeTeacherLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlAdminChangeTeacherLayout.createSequentialGroup()
                                .addComponent(lblChangeTeacherNewLevel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnChangeTeacherLevel)
                                    .addComponent(cBoxChangeTeacherNewLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnChangeTeacherRemoveLevel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblChangeTeacherAddLevel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAdminChangeTeacherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cBoxChangeTeacherSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cBoxChangeTeacherAddLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChangeTeacherAddLevel)))
                .addGap(18, 18, 18)
                .addComponent(ckbxChangeTeacherRemoveAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblChangeTeacherRemoveWarning))
        );

        pnlAdminMain.add(pnlAdminChangeTeacher, "pnlAdminChangeTeacher");

        ckbxChangeStudentRemovePrefect.setText("Prefekt");

        ckbxChangeStudentRoom.setText("Sovsal");

        ckbxChangeStudentLastName.setText("Efternamn");

        ckbxChangeStudentFirstName.setText("Förnamn");

        lblChangeStudentRemove.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeStudentRemove.setText("Här kan du ta bort delar av elevens information när du har klickat på denne i listan");

        lblChangeStudentFound.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeStudentFound.setText("Här visas de elever med det angivna namnet");

        lblChangeStudent.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblChangeStudent.setText("Ändra information om elev");

        btnStudentChangeSearch.setText("Hitta elever");
        btnStudentChangeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStudentChangeSearchActionPerformed(evt);
            }
        });

        lblChangeStudentNameText.setText("Namn:");

        lblChangeStudentSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeStudentSearch.setText("Här kan du söka efter elever");

        lblChangeStudentFirstNameSearch.setText("Förnamn:");

        txtChangeStudentIDText.setText("Elev ID:");

        ckbxChangeStudentPrefect.setText("Prefekt");
        ckbxChangeStudentPrefect.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ckbxChangeStudentPrefectStateChanged(evt);
            }
        });

        cBoxChangeStudentHouses.setEnabled(false);

        lblChangeStudentRemoveWarning.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblChangeStudentRemoveWarning.setText("(OBS! Använd endast detta alternativ vid uppenbara fel!)");

        btnChangeStudentRemove.setText("Ta bort");
        btnChangeStudentRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeStudentRemoveActionPerformed(evt);
            }
        });

        ckbxChangeStudentRemoveAll.setText("Radera eleven helt");

        lstChangeStudent.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstChangeStudentValueChanged(evt);
            }
        });
        scrChangeStudent.setViewportView(lstChangeStudent);

        btnChangeStudentPrefect.setText("Ändra prefekt");
        btnChangeStudentPrefect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeStudentPrefectActionPerformed(evt);
            }
        });

        lblChangeStudentLastNameSearch.setText("Efternamn:");

        lblChangeStudentInfo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblChangeStudentInfo.setText("Elev ID, Förnamn, Efternamn, Sovsal, Prefekt");

        lblChangeSelectedStudent.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeSelectedStudent.setText("Här kan du ändra elevens prefektstatus och betyg när du har klickat på denne i listan");

        lblChangeStudentID.setText(" ");
        lblChangeStudentID.setToolTipText("");

        lblChangeStudentFirstName.setText(" ");

        lblChangeStudentLastName.setText(" ");

        lblChangeStudentGradeInfo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblChangeStudentGradeInfo.setText("Kurs ID, Kursnamn, Betyg");

        scrChangeStudentGrade.setViewportView(lstChangeStudentGrade);

        btnChangeStudentGrade.setText("Ta bort betyg");
        btnChangeStudentGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeStudentGradeActionPerformed(evt);
            }
        });

        lblChangeStudentCourse.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeStudentCourse.setText("Här kan du avregistrera eleven från en kurs");

        lblChangeStudentCourseInfo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblChangeStudentCourseInfo.setText("Kurs ID, Kursnamn");

        scrChangeStudentCourse.setViewportView(lstChangeStudentCourse);

        btnChangeStudentCourse.setText("Ta bort kursregistrering");
        btnChangeStudentCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeStudentCourseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAdminChangeStudentLayout = new javax.swing.GroupLayout(pnlAdminChangeStudent);
        pnlAdminChangeStudent.setLayout(pnlAdminChangeStudentLayout);
        pnlAdminChangeStudentLayout.setHorizontalGroup(
            pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                        .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblChangeStudent)
                            .addComponent(lblChangeStudentDone))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                        .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblChangeStudentSearch)
                            .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                                .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtChangeStudentFirstNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblChangeStudentFirstNameSearch))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblChangeStudentLastNameSearch)
                                    .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                                        .addComponent(txtChangeStudentLastNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnStudentChangeSearch))))
                            .addComponent(lblChangeSelectedStudent)
                            .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                                        .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblChangeStudentNameText)
                                            .addComponent(txtChangeStudentIDText))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblChangeStudentID)
                                            .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                                                .addComponent(lblChangeStudentFirstName)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblChangeStudentLastName)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                                                .addComponent(scrChangeStudentGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnChangeStudentGrade))
                                            .addComponent(lblChangeStudentGradeInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnChangeStudentPrefect)
                                            .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                                                .addComponent(ckbxChangeStudentPrefect)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cBoxChangeStudentHouses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addComponent(lblChangeStudentRemove)
                            .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                                .addComponent(ckbxChangeStudentFirstName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ckbxChangeStudentLastName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ckbxChangeStudentRoom)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ckbxChangeStudentRemovePrefect)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnChangeStudentRemove))
                            .addComponent(ckbxChangeStudentRemoveAll)
                            .addComponent(lblChangeStudentRemoveWarning))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                        .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                                .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblChangeStudentFound)
                                    .addComponent(lblChangeStudentInfo))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                                .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(scrChangeStudent)
                                        .addComponent(lblChangeStudentCourse)
                                        .addComponent(lblChangeStudentCourseInfo)
                                        .addComponent(scrChangeStudentCourse))
                                    .addComponent(btnChangeStudentCourse))
                                .addContainerGap(116, Short.MAX_VALUE))))))
        );
        pnlAdminChangeStudentLayout.setVerticalGroup(
            pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAdminChangeStudentLayout.createSequentialGroup()
                        .addComponent(lblChangeStudent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblChangeStudentDone)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAdminChangeStudentLayout.createSequentialGroup()
                        .addGap(0, 61, Short.MAX_VALUE)
                        .addComponent(lblChangeStudentFound)
                        .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(lblChangeStudentSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblChangeStudentFirstNameSearch)
                                    .addComponent(lblChangeStudentLastNameSearch))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtChangeStudentFirstNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtChangeStudentLastNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnStudentChangeSearch))
                                .addGap(26, 26, 26)
                                .addComponent(lblChangeSelectedStudent)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtChangeStudentIDText)
                                    .addComponent(lblChangeStudentID)
                                    .addComponent(lblChangeStudentGradeInfo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                                        .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnlAdminChangeStudentLayout.createSequentialGroup()
                                                .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(lblChangeStudentNameText)
                                                    .addComponent(lblChangeStudentFirstName)
                                                    .addComponent(lblChangeStudentLastName))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(ckbxChangeStudentPrefect)
                                                    .addComponent(cBoxChangeStudentHouses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(11, 11, 11)
                                                .addComponent(btnChangeStudentPrefect))
                                            .addComponent(scrChangeStudentGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(27, 27, 27)
                                        .addComponent(lblChangeStudentRemove)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnlAdminChangeStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(ckbxChangeStudentFirstName)
                                            .addComponent(ckbxChangeStudentLastName)
                                            .addComponent(ckbxChangeStudentRoom)
                                            .addComponent(ckbxChangeStudentRemovePrefect)
                                            .addComponent(btnChangeStudentRemove))
                                        .addGap(18, 18, 18)
                                        .addComponent(ckbxChangeStudentRemoveAll)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblChangeStudentRemoveWarning))
                                    .addComponent(btnChangeStudentGrade))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAdminChangeStudentLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addComponent(lblChangeStudentInfo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scrChangeStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblChangeStudentCourse)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblChangeStudentCourseInfo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scrChangeStudentCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnChangeStudentCourse)
                                .addGap(41, 41, 41))))))
        );

        pnlAdminMain.add(pnlAdminChangeStudent, "pnlAdminChangeStudent");

        lblRegisterCourse.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblRegisterCourse.setText("Lägg till kurs");

        cBoxRegisterCourseSubject.setMaximumRowCount(9);
        cBoxRegisterCourseSubject.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cBoxRegisterCourseSubjectPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        btnRegisterCourse.setText("Lägg till");
        btnRegisterCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterCourseActionPerformed(evt);
            }
        });

        lblRegisterCourseName.setText("Ange kursnamn:");

        lblRegisterCourseStartDate.setText("Ange datum för kursstart:");

        lblRegisterCourseEndDate.setText("Ange datum för kursslut:");

        lblRegisterCourseSubject.setText("Ange ämne:");

        lblRegisterCourseTeacher.setText("Lärare med ämneskompetens:");

        scrRegisterCourseTeacher.setViewportView(lstRegisterCourseTeacher);

        lblRegisterCourseDone.setText(" ");

        txtAreaRegisterCourseDescription.setColumns(20);
        txtAreaRegisterCourseDescription.setLineWrap(true);
        txtAreaRegisterCourseDescription.setRows(5);
        jScrollPane1.setViewportView(txtAreaRegisterCourseDescription);

        lblRegisterCourseSubjectInfo.setText("Ämnesbeskrivning:");

        lblRegisterCourseTeacherInfo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblRegisterCourseTeacherInfo.setText("(LärarID, Förnamn, Efternamn, Kompetensnivå)");

        javax.swing.GroupLayout pnlAdminRegisterCourseLayout = new javax.swing.GroupLayout(pnlAdminRegisterCourse);
        pnlAdminRegisterCourse.setLayout(pnlAdminRegisterCourseLayout);
        pnlAdminRegisterCourseLayout.setHorizontalGroup(
            pnlAdminRegisterCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminRegisterCourseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRegisterCourse)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlAdminRegisterCourseLayout.createSequentialGroup()
                .addContainerGap(122, Short.MAX_VALUE)
                .addGroup(pnlAdminRegisterCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblRegisterCourseName)
                    .addComponent(lblRegisterCourseStartDate)
                    .addGroup(pnlAdminRegisterCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblRegisterCourseDone)
                        .addComponent(lblRegisterCourseEndDate)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAdminRegisterCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRegisterCourseStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRegisterCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRegisterCourseEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRegisterCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                .addGroup(pnlAdminRegisterCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRegisterCourseSubjectInfo)
                    .addComponent(lblRegisterCourseTeacher)
                    .addComponent(cBoxRegisterCourseSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRegisterCourseSubject)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlAdminRegisterCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(scrRegisterCourseTeacher, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(lblRegisterCourseTeacherInfo, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(191, Short.MAX_VALUE))
        );
        pnlAdminRegisterCourseLayout.setVerticalGroup(
            pnlAdminRegisterCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminRegisterCourseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRegisterCourse)
                .addGap(18, 18, 18)
                .addGroup(pnlAdminRegisterCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAdminRegisterCourseLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(pnlAdminRegisterCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtRegisterCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRegisterCourseName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAdminRegisterCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtRegisterCourseStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRegisterCourseStartDate)))
                    .addGroup(pnlAdminRegisterCourseLayout.createSequentialGroup()
                        .addComponent(lblRegisterCourseSubject)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cBoxRegisterCourseSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblRegisterCourseTeacher)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlAdminRegisterCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAdminRegisterCourseLayout.createSequentialGroup()
                        .addComponent(lblRegisterCourseTeacherInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrRegisterCourseTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(lblRegisterCourseSubjectInfo))
                    .addGroup(pnlAdminRegisterCourseLayout.createSequentialGroup()
                        .addGroup(pnlAdminRegisterCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtRegisterCourseEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRegisterCourseEndDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRegisterCourse)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAdminRegisterCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRegisterCourseDone)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pnlAdminMain.add(pnlAdminRegisterCourse, "pnlAdminRegisterCourse");

        lblChangeCourse.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblChangeCourse.setText("Ändra information om kurs");

        cBoxChangeCourseSubjectSort.setMaximumRowCount(9);
        cBoxChangeCourseSubjectSort.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cBoxChangeCourseSubjectSortPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        lblChangeCourseSubject.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeCourseSubject.setText("Här kan du välja att visa alla kurser samtidigt, eller sortera dem efter ämne");

        lblChangeCourseList.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeCourseList.setText("Här visas en lista över de kurser som du har valt");

        lblChangeCourseListInfo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblChangeCourseListInfo.setText("Kurs ID, Kursnamn, Kursstart, Kursslut, LärarID,  Kurslärare, Ämne, Ämne ID");

        lstChangeCourseList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstChangeCourseListValueChanged(evt);
            }
        });
        scrChangeCourseList.setViewportView(lstChangeCourseList);

        lblChangeCourseIDText.setText("Kurs ID:");

        lblChangeCourseName.setText("Nytt kursnamn:");

        lblChangeCourseStartDate.setText("Nytt startdatum:");

        lblChangeCourseEndDate.setText("Nytt slutdatum:");

        lblChangeCourseTeacher.setText("Ny lärare:");

        lblChangeCourseText.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeCourseText.setText("Här kan kursen ändras när du har klickat på den i listan");

        btnChangeCourse.setText("Ändra kurs");
        btnChangeCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeCourseActionPerformed(evt);
            }
        });

        lblChangeCourseRemove.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblChangeCourseRemove.setText("Här kan du ta bort delar av kursen när du har klickat på den i listan");

        ckbxChangeCourseName.setText("Kursnamn");

        ckbxChangeCourseStartDate.setText("Startdatum");

        ckbxChangeCourseEndDate.setText("Slutdatum");

        ckbxChangeCourseTeacher.setText("Lärare");

        ckbxChangeCourseSubject.setText("Ämne");

        btnChangeCourseShowAll.setText("Visa alla kurser");
        btnChangeCourseShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeCourseShowAllActionPerformed(evt);
            }
        });

        cBoxChangeCourseSubject.setMaximumRowCount(9);

        lblChangeCourseNewSubject.setText("Nytt ämne:");

        ckbxChangeCourseRemoveAll.setText("Radera hela kursen");

        lblChangeTeacherRemoveWarning1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblChangeTeacherRemoveWarning1.setText("(OBS! Använd endast detta alternativ vid uppenbara fel!)");

        btnChangeCourseRemove.setText("Ta bort");
        btnChangeCourseRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeCourseRemoveActionPerformed(evt);
            }
        });

        lblChangeCourseOR.setText("...eller...");

        javax.swing.GroupLayout pnlAdminChangeCourseLayout = new javax.swing.GroupLayout(pnlAdminChangeCourse);
        pnlAdminChangeCourse.setLayout(pnlAdminChangeCourseLayout);
        pnlAdminChangeCourseLayout.setHorizontalGroup(
            pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminChangeCourseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblChangeCourseSubject)
                    .addGroup(pnlAdminChangeCourseLayout.createSequentialGroup()
                        .addComponent(ckbxChangeCourseName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckbxChangeCourseStartDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckbxChangeCourseEndDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckbxChangeCourseTeacher)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckbxChangeCourseSubject)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChangeCourseRemove))
                    .addComponent(lblChangeCourseText)
                    .addGroup(pnlAdminChangeCourseLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlAdminChangeCourseLayout.createSequentialGroup()
                                    .addGap(7, 7, 7)
                                    .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblChangeCourseName)
                                        .addComponent(lblChangeCourseIDText)))
                                .addComponent(lblChangeCourseStartDate, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblChangeCourseEndDate, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblChangeCourseTeacher, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(lblChangeCourseNewSubject))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblChangeCourseID)
                            .addComponent(txtChangeCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtChangeCourseStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtChangeCourseEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cBoxChangeCourseTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cBoxChangeCourseSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlAdminChangeCourseLayout.createSequentialGroup()
                                .addComponent(btnChangeCourse)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblChangeCourseDone))))
                    .addComponent(lblChangeCourseRemove)
                    .addGroup(pnlAdminChangeCourseLayout.createSequentialGroup()
                        .addComponent(ckbxChangeCourseRemoveAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblChangeTeacherRemoveWarning1))
                    .addComponent(lblChangeCourse)
                    .addGroup(pnlAdminChangeCourseLayout.createSequentialGroup()
                        .addComponent(btnChangeCourseShowAll)
                        .addGap(27, 27, 27)
                        .addComponent(lblChangeCourseOR)
                        .addGap(41, 41, 41)
                        .addComponent(cBoxChangeCourseSubjectSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(83, 83, 83)
                .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblChangeCourseList)
                    .addComponent(lblChangeCourseListInfo)
                    .addComponent(scrChangeCourseList, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlAdminChangeCourseLayout.setVerticalGroup(
            pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminChangeCourseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlAdminChangeCourseLayout.createSequentialGroup()
                        .addComponent(lblChangeCourse)
                        .addGap(25, 25, 25)
                        .addComponent(lblChangeCourseSubject)
                        .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAdminChangeCourseLayout.createSequentialGroup()
                                .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnChangeCourseShowAll)
                                    .addComponent(cBoxChangeCourseSubjectSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblChangeCourseOR))
                                .addGap(18, 18, 18)
                                .addComponent(lblChangeCourseText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblChangeCourseIDText)
                                    .addComponent(lblChangeCourseID))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblChangeCourseName)
                                    .addComponent(txtChangeCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblChangeCourseStartDate)
                                    .addComponent(txtChangeCourseStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblChangeCourseEndDate)
                                    .addComponent(txtChangeCourseEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblChangeCourseTeacher)
                                    .addComponent(cBoxChangeCourseTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cBoxChangeCourseSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblChangeCourseNewSubject))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnChangeCourse)
                                    .addComponent(lblChangeCourseDone))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                                .addComponent(lblChangeCourseRemove)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ckbxChangeCourseName)
                                    .addComponent(ckbxChangeCourseStartDate)
                                    .addComponent(ckbxChangeCourseEndDate)
                                    .addComponent(ckbxChangeCourseTeacher)
                                    .addComponent(ckbxChangeCourseSubject)
                                    .addComponent(btnChangeCourseRemove))
                                .addGap(42, 42, 42))
                            .addGroup(pnlAdminChangeCourseLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(pnlAdminChangeCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ckbxChangeCourseRemoveAll)
                                    .addComponent(lblChangeTeacherRemoveWarning1)))))
                    .addGroup(pnlAdminChangeCourseLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblChangeCourseList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblChangeCourseListInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrChangeCourseList, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pnlAdminMain.add(pnlAdminChangeCourse, "pnlAdminChangeCourse");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblQuestion)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnAdminChangeCourses, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAdminAddCourses, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAdminDeleteStudent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                        .addComponent(btnAdminAddTeacher, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTeacher, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                        .addComponent(btnLogOut, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAdminChangeTeacher, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlAdminMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(lblQuestion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdminAddTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(btnAdminChangeTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAdminDeleteStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAdminAddCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAdminChangeCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLogOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlAdminMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        Start.welcome(); //Loggar ut. Öppnar startsidan och nollställer lösenordet.
        pwd = "";
        dispose();
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnAdminChangeTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminChangeTeacherActionPerformed
        //Denna knapp nollställer, förbereder och visar ändra lärare-containern

        DefaultListModel listModel = new DefaultListModel(); //DefaultListModel är en modell som innehåller allt som kan/ska visas i t.ex. en JList.

        cBoxChangeTeacherHouses.removeAllItems(); //Nollställer fält
        lstChangeTeachers.setModel(listModel);
        txtChangeTeacherLastName.setText("");
        txtChangeTeacherFirstName.setText("");
        lblChangeTeacherID.setText("");
        txtChangeTeacherFirstNameSearch.setText("");
        txtChangeTeacherLastNameSearch.setText("");
        lblChangeTeacherDone.setText("");
        ckbxChangeTeacherFirstName.setSelected(false);
        ckbxChangeTeacherLastName.setSelected(false);
        ckbxChangeTeacherPwd.setSelected(false);
        ckbxChangeTeacherRemoveAdmin.setSelected(false);
        ckbxChangeTeacherRemoveAll.setSelected(false);
        ckbxChangeTeacherAdmin.setSelected(false);
        ckbxChangeTeacherHead.setSelected(false);
        ckbxChangeTeacherRemoveHead.setSelected(false);
        pwdChangeTeacherNewPwd.setText("");
        pwdChangeTeacherRepeatPwd.setText("");
        lblChangeTeacherDone.setText(" ");
        cBoxChangeTeacherAddLevel.setSelectedIndex(0);
        cBoxChangeTeacherNewLevel.setSelectedIndex(0);
        lstChangeTeacherLevel.setModel(listModel);

        try {

            ArrayList<HashMap<String, String>> subjectList = db.fetchRows("select amne_id, amnesnamn from amne"); //Hämtar ämnen

            if (!Validate.checkEmptyDBRows(subjectList)) { //Kollar om några ämnen hittades

                for (HashMap<String, String> subject : subjectList) {
                    cBoxChangeTeacherSubject.addItem(subject.get("AMNE_ID") + " - " + subject.get("AMNESNAMN")); //Läser in ämnen i en lista
                }

                ArrayList<String> houses = db.fetchColumn("select elevhemsnamn from elevhem"); //Hämtar elevhem

                if (!Validate.checkEmptyDBColumn(houses)) {

                    for (String house : houses) {

                        cBoxChangeTeacherHouses.addItem(house); //Läser in elevhem i lista

                    }
                }
            }

        } catch (InfException ex) {

            System.out.println(ex.getMessage());

        }

        getLayout("pnlAdminChangeTeacher"); //Visar containern
    }//GEN-LAST:event_btnAdminChangeTeacherActionPerformed

    private void btnAdminAddTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminAddTeacherActionPerformed
        //Denna knapp nollställer och visar registrera lärare-kontainern

        txtRegisterTeacherFirstName.setText(""); //Nollställer fält
        txtRegisterTeacherLastName.setText("");
        lblTeacherIsRegistered.setText(" ");
        pwdRegisterTeacherPwd.setText("");
        pwdRegisterTeacherPwdRepeat.setText("");

        getLayout("pnlAdminRegisterTeacher"); //Visar containern
    }//GEN-LAST:event_btnAdminAddTeacherActionPerformed

    private void btnTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeacherActionPerformed
        Start.teacherActions(pwd, admin); //Denna knapp går tillbaka till lärargränssnittet igen.
        dispose();
    }//GEN-LAST:event_btnTeacherActionPerformed

    private void btnAdminDeleteStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminDeleteStudentActionPerformed
        //Denna knapp nollställer, förbereder och visar ändra/ta bort student-containern

        DefaultListModel listModel = new DefaultListModel();

        cBoxChangeStudentHouses.removeAllItems(); //Nollställer fält
        lstChangeStudent.setModel(listModel);
        lstChangeStudentGrade.setModel(listModel);
        lstChangeStudentCourse.setModel(listModel);
        lblChangeStudentFirstName.setText("");
        lblChangeStudentLastName.setText("");
        lblChangeStudentID.setText("");
        txtChangeStudentFirstNameSearch.setText("");
        txtChangeStudentLastNameSearch.setText("");
        lblChangeStudentDone.setText("");
        ckbxChangeStudentFirstName.setSelected(false);
        ckbxChangeStudentLastName.setSelected(false);
        ckbxChangeStudentRemoveAll.setSelected(false);
        ckbxChangeStudentPrefect.setSelected(false);
        ckbxChangeStudentRoom.setSelected(false);
        ckbxChangeStudentRemovePrefect.setSelected(false);

        try {

            ArrayList<String> houses = db.fetchColumn("select elevhemsnamn from elevhem"); //Hämtar elevhem

            if (!Validate.checkEmptyDBColumn(houses)) { //Kollar om några elevhem hittades

                for (String house : houses) {

                    cBoxChangeStudentHouses.addItem(house); //Läser in elevhem i lista

                }

            }

        } catch (InfException ex) {

            System.out.println(ex.getMessage());

        }

        getLayout("pnlAdminChangeStudent"); //Visar containern
    }//GEN-LAST:event_btnAdminDeleteStudentActionPerformed

    private void btnRegisterTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterTeacherActionPerformed
        //Denna knapp kontrollerar input och läser in en ny rad i databasen

        lblTeacherIsRegistered.setText(" "); //Nollställer resultatetikett

        if (Validate.textIsNotEmpty(txtRegisterTeacherFirstName) && Validate.textIsNotEmpty(txtRegisterTeacherLastName) //Kollar så textfält och lösenordsfält inte är tomma
                && Validate.pwdIsNotEmpty(pwdRegisterTeacherPwd) && Validate.pwdIsNotEmpty(pwdRegisterTeacherPwdRepeat)) {

            char[] newPwdChar = pwdRegisterTeacherPwd.getPassword(); //Lösenordsfält görs om till strings
            String newPwd = new String(newPwdChar);
            char[] repeatPwdChar = pwdRegisterTeacherPwdRepeat.getPassword();
            String repeatPwd = new String(repeatPwdChar);

            if (Validate.pwdMatching(newPwd, repeatPwd)) { //Kollar om de två angivna lösenorden matchar

                if (!Validate.pwdExisting(newPwd)) { //Kollar om lösenorden är upptagna

                    try {
                        String admin;
                        if (ckbxRegisterTeacherAdmin.isSelected()) { //Denna checkbox kontrollerar om läraren ska vara admin eller ej, och anger ett värde till variabeln "admin" därefter.
                            admin = "T";
                        } else {
                            admin = "F";
                        }

                        db.insert("insert into larare " //lägger till lärare i databasen
                                + "values ('" + db.getAutoIncrement("larare", "larar_ID")
                                + "', '" + txtRegisterTeacherFirstName.getText()
                                + "', '" + txtRegisterTeacherLastName.getText()
                                + "', '" + newPwd + "', '" + admin + "')");

                        lblTeacherIsRegistered.setText("Läraren har registrerats."); //Meddelar resultat

                        txtRegisterTeacherFirstName.setText(""); //Nollställer fält
                        pwdRegisterTeacherPwd.setText("");
                        pwdRegisterTeacherPwdRepeat.setText("");
                        txtRegisterTeacherLastName.setText("");
                        ckbxRegisterTeacherAdmin.setSelected(false);

                    } catch (InfException ex) {
                        JOptionPane.showMessageDialog(null, "Något gick fel. Läraren har inte registrerats.");
                        System.out.println(ex.getMessage());

                    }

                }
            }
        }


    }//GEN-LAST:event_btnRegisterTeacherActionPerformed

    private void btnTeacherChangeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeacherChangeSearchActionPerformed
        //Denna knapp kontrollerar input och söker fram lärare ur databasen

        DefaultListModel teacherModel = new DefaultListModel();
        DefaultListModel levelModel = new DefaultListModel();

        try {
            String sqlFirstName; //Dessa lokala variabler initialiseras beroende på värden i textrutor och innehåll i databasen
            String sqlLastName;
            String sqlAdmin;
            String sqlHead;

            if (Validate.textIsNotEmptyNoMsg(txtChangeTeacherFirstNameSearch)) { //Om textrutan är tom så söker programmet efter null-värden i databasen. Annars söker den på angiven text.
                sqlFirstName = "where fornamn like '%" + txtChangeTeacherFirstNameSearch.getText() + "%' ";
            } else {
                sqlFirstName = "where fornamn is null ";
            }

            if (Validate.textIsNotEmptyNoMsg(txtChangeTeacherLastNameSearch)) {
                sqlLastName = "and efternamn like '%" + txtChangeTeacherLastNameSearch.getText() + "%'";
            } else {
                sqlLastName = "and efternamn is null";
            }

            ArrayList<HashMap<String, String>> teacherList = db.fetchRows("select larar_id, fornamn, efternamn, administrator, elevhemsnamn from larare " //Hämtar lärare ur databasen
                    + "left join elevhem on elevhem.forestandare = larare.larar_id "
                    + sqlFirstName + sqlLastName);

            if (!Validate.checkEmptyDBRows(teacherList)) { //kollar om några lärare hittades
                for (HashMap<String, String> teacher : teacherList) {

                    if (Validate.checkNullString(teacher.get("ADMINISTRATOR"))) { //kollar om admin-värde är angivet i databasen och tilldelar variabeln "sqlAdmin" värde därefter
                        sqlAdmin = "Ej angivet";
                    } else if (teacher.get("ADMINISTRATOR").equals("T")) {
                        sqlAdmin = "Ja";
                    } else {
                        sqlAdmin = "Nej";
                    }

                    if (Validate.checkNullString(teacher.get("ELEVHEMSNAMN"))) { //Kollar om läraren är angiven som föreståndare och tilldelar variabeln "sqlHead" värde därefter.
                        sqlHead = "Nej";
                    } else {
                        sqlHead = teacher.get("ELEVHEMSNAMN");
                    }

                    teacherModel.addElement(teacher.get("LARAR_ID") + ",  " + teacher.get("FORNAMN") + ",  " + teacher.get("EFTERNAMN") + ",  " + sqlAdmin + ",  " + sqlHead); //Läser in lärarinfo i modell
                }

            } else {
                JOptionPane.showMessageDialog(null, "Inga lärare hittades. Försök med ett annat namn.");
            }

            lstChangeTeachers.setModel(teacherModel); //Läser in modell i lista

            txtChangeTeacherLastName.setText(""); //Nollställer fält
            txtChangeTeacherFirstName.setText("");
            lblChangeTeacherID.setText("");
            txtChangeTeacherFirstNameSearch.setText("");
            txtChangeTeacherLastNameSearch.setText("");
            lblChangeTeacherDone.setText("");
            ckbxChangeTeacherFirstName.setSelected(false);
            ckbxChangeTeacherLastName.setSelected(false);
            ckbxChangeTeacherPwd.setSelected(false);
            ckbxChangeTeacherRemoveAdmin.setSelected(false);
            ckbxChangeTeacherRemoveAll.setSelected(false);
            ckbxChangeTeacherAdmin.setSelected(false);
            ckbxChangeTeacherHead.setSelected(false);
            ckbxChangeTeacherRemoveHead.setSelected(false);
            pwdChangeTeacherNewPwd.setText("");
            pwdChangeTeacherRepeatPwd.setText("");
            cBoxChangeTeacherAddLevel.setSelectedIndex(0);
            cBoxChangeTeacherNewLevel.setSelectedIndex(0);
            lstChangeTeacherLevel.setModel(levelModel);

        } catch (InfException ex) {
            System.out.println(ex.getMessage());
        }

    }//GEN-LAST:event_btnTeacherChangeSearchActionPerformed

    private void btnChangeTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeTeacherActionPerformed
        //Denna knapp kontrollerar input och uppdaterar databas

        DefaultListModel listModel = new DefaultListModel();
        lblChangeTeacherDone.setText(""); //Nollställer resultatfält
        String sqlAdmin;

        if (Validate.labelIsNotEmpty(lblChangeTeacherID)) { //kollar så ett lärarID har valts från listan och tilldelats till etiketten

            if (Validate.textIsNotEmpty(txtChangeTeacherFirstName) && Validate.textIsNotEmpty(txtChangeTeacherLastName)) { //kollar om textfälten är tomma

                try {

                    if (ckbxChangeTeacherAdmin.isSelected()) { //kontrollerar om administratör är vald, och tilldelar variabeln "sqlAdmin" ett värde därefter
                        sqlAdmin = "T";
                    } else {
                        sqlAdmin = "F";
                    }

                    db.update("update larare " //uppdaterar lärare i databas
                            + "set fornamn = '" + txtChangeTeacherFirstName.getText() + "', "
                            + "efternamn = '" + txtChangeTeacherLastName.getText() + "', "
                            + "administrator = '" + sqlAdmin + "' "
                            + "where larar_id = '" + lblChangeTeacherID.getText() + "'");

                    if (ckbxChangeTeacherHead.isSelected()) { //uppdaterar föreståndare i databas om föreståndare är ikryssat
                        db.update("update elevhem "
                                + "set forestandare = '" + lblChangeTeacherID.getText() + "' "
                                + "where elevhemsnamn = '" + cBoxChangeTeacherHouses.getSelectedItem().toString() + "'");
                    }

                    lblChangeTeacherDone.setText("Ändringen har genomförts."); //Meddelar resultat

                    lstChangeTeachers.setModel(listModel);//Nollställer fält
                    txtChangeTeacherLastName.setText("");
                    txtChangeTeacherFirstName.setText("");
                    lblChangeTeacherID.setText("");
                    txtChangeTeacherFirstNameSearch.setText("");
                    txtChangeTeacherLastNameSearch.setText("");
                    ckbxChangeTeacherFirstName.setSelected(false);
                    ckbxChangeTeacherLastName.setSelected(false);
                    ckbxChangeTeacherPwd.setSelected(false);
                    ckbxChangeTeacherRemoveAdmin.setSelected(false);
                    ckbxChangeTeacherRemoveAll.setSelected(false);
                    ckbxChangeTeacherAdmin.setSelected(false);
                    ckbxChangeTeacherHead.setSelected(false);
                    ckbxChangeTeacherRemoveHead.setSelected(false);
                    pwdChangeTeacherNewPwd.setText("");
                    pwdChangeTeacherRepeatPwd.setText("");
                    cBoxChangeTeacherAddLevel.setSelectedIndex(0);
                    cBoxChangeTeacherNewLevel.setSelectedIndex(0);
                    lstChangeTeacherLevel.setModel(listModel);

                } catch (InfException ex) {
                    System.out.println(ex.getMessage());
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "LärarID hittades ej. Kontrollera att du har valt en lärare från listan genom att klicka på denne.");

        }
    }//GEN-LAST:event_btnChangeTeacherActionPerformed

    private void lstChangeTeachersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstChangeTeachersValueChanged
        //Denna metod tilldelar täxtfält och etiketter värden enligt vad som har valts i listan. Denna kod körs när listmarkören flyttas.

        DefaultListModel listModel = new DefaultListModel();

        try {
            String[] teacherInfo = lstChangeTeachers.getSelectedValue().toString().split(",  "); //Delar upp den valda raden

            if (teacherInfo[1].equals("null")) { //Om värdet är null så innebär det att fältet i databasen är tomt. Då blir textrutan också tom
                txtChangeTeacherFirstName.setText("");
            } else {
                txtChangeTeacherFirstName.setText(teacherInfo[1]);
            }

            if (teacherInfo[2].equals("null")) {
                txtChangeTeacherLastName.setText("");
            } else {
                txtChangeTeacherLastName.setText(teacherInfo[2]);
            }

            lblChangeTeacherID.setText(teacherInfo[0]); //Anger lärarID

            if (teacherInfo[3].equals("Ja")) { //anger administratörstatus
                ckbxChangeTeacherAdmin.setSelected(true);
            } else {
                ckbxChangeTeacherAdmin.setSelected(false);
            }

            if (teacherInfo[4].equals("Nej")) { //föreståndarstatus
                ckbxChangeTeacherHead.setSelected(false);
                ckbxChangeTeacherRemoveHead.setEnabled(false);
            } else {
                ckbxChangeTeacherHead.setSelected(true);
                ckbxChangeTeacherRemoveHead.setEnabled(true);
                cBoxChangeTeacherHouses.setSelectedItem(teacherInfo[4]);
            }

            try {
                ArrayList<HashMap<String, String>> levelList = db.fetchRows("select HAR_KOMPETENS_I.amne_id, amnesnamn, kompetensniva from HAR_KOMPETENS_I " //hämtar kompetenslista för lärare
                        + "join amne on amne.amne_id = HAR_KOMPETENS_I.AMNE_ID "
                        + "where larar_id = '" + teacherInfo[0] + "'");

                if (!Validate.checkEmptyDBRows(levelList)) {  //kollar om kompetens fanns

                    for (HashMap<String, String> level : levelList) {
                        listModel.addElement(level.get("AMNE_ID") + ", " + level.get("AMNESNAMN") + ", " + level.get("KOMPETENSNIVA")); //läser in kompetens i modell
                    }

                } else {
                    listModel.addElement("Ingen kompetensnivå funnen");

                }

            } catch (InfException ex) {
                System.out.println(ex.getMessage());
            }

        } catch (Exception ex) {

        }
        lstChangeTeacherLevel.setModel(listModel); //Laddar in modell i lista
    }//GEN-LAST:event_lstChangeTeachersValueChanged

    private void btnChangeTeacherPwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeTeacherPwdActionPerformed
        //Denna knapp kontrollerar input och ändrar lösenord för lärare

        DefaultListModel listModel = new DefaultListModel();

        lblChangeTeacherDone.setText(""); //Nollställer resultatetikett

        if (Validate.labelIsNotEmpty(lblChangeTeacherID)) { //Kollar så lärarid har angivits till etiketten från listan

            char[] newPwdChar = pwdChangeTeacherNewPwd.getPassword(); //Gör om lösenordsfält till string-variabler
            String newPwd = new String(newPwdChar);
            char[] repeatPwdChar = pwdChangeTeacherRepeatPwd.getPassword();
            String repeatPwd = new String(repeatPwdChar);

            if (Validate.pwdIsNotEmpty(pwdChangeTeacherNewPwd) && Validate.pwdIsNotEmpty(pwdChangeTeacherRepeatPwd) && //Kollar så lösenordsfälten inte är tomma, så lösenorden matchar och så lösenordet inte är upptaget
                    Validate.pwdMatching(newPwd, repeatPwd) && !Validate.pwdExisting(newPwd)) {

                try {

                    db.update("update LARARE " //Uppdaterar lösenord i databas
                            + "set losenord='" + newPwd + "' "
                            + "where larar_id='" + lblChangeTeacherID.getText() + "'");

                } catch (InfException ex) {
                    System.out.println(ex.getMessage());
                    JOptionPane.showMessageDialog(null, "Något gick fel. Lösenordet har inte ändrats.");

                }

                lblChangeTeacherDone.setText("Lösenordet har uppdaterats."); //Meddelar resultat
                pwd = newPwd; //Uppdaterar lösenordsfält

                lstChangeTeachers.setModel(listModel); //Nollställer fält
                txtChangeTeacherLastName.setText("");
                txtChangeTeacherFirstName.setText("");
                lblChangeTeacherID.setText("");
                txtChangeTeacherFirstNameSearch.setText("");
                txtChangeTeacherLastNameSearch.setText("");
                ckbxChangeTeacherFirstName.setSelected(false);
                ckbxChangeTeacherLastName.setSelected(false);
                ckbxChangeTeacherPwd.setSelected(false);
                ckbxChangeTeacherRemoveAdmin.setSelected(false);
                ckbxChangeTeacherRemoveAll.setSelected(false);
                ckbxChangeTeacherAdmin.setSelected(false);
                ckbxChangeTeacherHead.setSelected(false);
                ckbxChangeTeacherRemoveHead.setSelected(false);
                pwdChangeTeacherNewPwd.setText("");
                pwdChangeTeacherRepeatPwd.setText("");
                cBoxChangeTeacherAddLevel.setSelectedIndex(0);
                cBoxChangeTeacherNewLevel.setSelectedIndex(0);
                lstChangeTeacherLevel.setModel(listModel);

            }
        } else {
            JOptionPane.showMessageDialog(null, "LärarID hittades ej. Kontrollera att du har valt en lärare från listan genom att klicka på denne.");

        }


    }//GEN-LAST:event_btnChangeTeacherPwdActionPerformed

    private void btnChangeTeacherRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeTeacherRemoveActionPerformed
        //Denna knapp kontrollerar vilka (om några) värden som ska tas bort databasen och gör det.

        DefaultListModel listModel = new DefaultListModel();
        lblChangeTeacherDone.setText(" "); //Nollställer resultat

        if (Validate.labelIsNotEmpty(lblChangeTeacherID)) { //Kollar så lärarid har angivits via listan

            try {
                boolean deleteInfo = false; //Denna boolean håller koll på om något har raderats eller ej
                if (ckbxChangeTeacherFirstName.isSelected()) { //om en checkbox är ikryssad så sätts detta värde till null i databasen
                    db.update("update larare "
                            + "set fornamn = null "
                            + "where larar_id ='" + lblChangeTeacherID.getText() + "'");
                    lblChangeTeacherDone.setText("Information har raderats.");
                    deleteInfo = true;
                }

                if (ckbxChangeTeacherLastName.isSelected()) {
                    db.update("update larare "
                            + "set efternamn = null "
                            + "where larar_id ='" + lblChangeTeacherID.getText() + "'");
                    lblChangeTeacherDone.setText("Information har raderats.");
                    deleteInfo = true;
                }

                if (ckbxChangeTeacherPwd.isSelected()) {
                    db.update("update larare "
                            + "set losenord = null "
                            + "where larar_id ='" + lblChangeTeacherID.getText() + "'");
                    lblChangeTeacherDone.setText("Information har raderats.");
                    deleteInfo = true;
                }

                if (ckbxChangeTeacherRemoveAdmin.isSelected()) {
                    db.update("update larare "
                            + "set administrator = null "
                            + "where larar_id ='" + lblChangeTeacherID.getText() + "'");
                    lblChangeTeacherDone.setText("Information har raderats.");
                    deleteInfo = true;
                }

                if (ckbxChangeTeacherRemoveHead.isSelected()) {
                    db.update("update elevhem "
                            + "set forestandare = null "
                            + "where forestandare ='" + lblChangeTeacherID.getText() + "'");
                    lblChangeTeacherDone.setText("Information har raderats.");
                    deleteInfo = true;

                }

                if (ckbxChangeTeacherRemoveAll.isSelected()) { //Om denna checkbox är ikryssad så tas hela raden bort ifrån tabellen i databasen
                    db.delete("delete from larare "
                            + "where larar_id = '" + lblChangeTeacherID.getText() + "'");
                    lblChangeTeacherDone.setText("Information har raderats.");
                    deleteInfo = true;

                }

                if (!deleteInfo) {
                    lblChangeTeacherDone.setText("Ingen information har raderats."); //Om deleteInfo fortfarande är "false" så skrivs detta ut.
                }

                lstChangeTeachers.setModel(listModel); //Nollställer fält
                txtChangeTeacherLastName.setText("");
                txtChangeTeacherFirstName.setText("");
                lblChangeTeacherID.setText("");
                txtChangeTeacherFirstNameSearch.setText("");
                txtChangeTeacherLastNameSearch.setText("");
                ckbxChangeTeacherFirstName.setSelected(false);
                ckbxChangeTeacherLastName.setSelected(false);
                ckbxChangeTeacherPwd.setSelected(false);
                ckbxChangeTeacherRemoveAdmin.setSelected(false);
                ckbxChangeTeacherRemoveAll.setSelected(false);
                ckbxChangeTeacherAdmin.setSelected(false);
                ckbxChangeTeacherHead.setSelected(false);
                ckbxChangeTeacherRemoveHead.setSelected(false);
                pwdChangeTeacherNewPwd.setText("");
                pwdChangeTeacherRepeatPwd.setText("");
                cBoxChangeTeacherAddLevel.setSelectedIndex(0);
                cBoxChangeTeacherNewLevel.setSelectedIndex(0);
                lstChangeTeacherLevel.setModel(listModel);

            } catch (InfException ex) {
                JOptionPane.showMessageDialog(null, "Den valda läraren kan inte tas bort. Se till att läraren inte är föreståndare, är kopplad till en kurs, eller liknande.");
            }

        } else {
            JOptionPane.showMessageDialog(null, "LärarID hittades ej. Kontrollera att du har valt en lärare från listan genom att klicka på denne.");

        }


    }//GEN-LAST:event_btnChangeTeacherRemoveActionPerformed

    private void ckbxChangeTeacherHeadStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ckbxChangeTeacherHeadStateChanged

        //Om denna checkbox för föreståndare kryssas i, så ger det möjlighet att välja elevhem i en lista - som annars är disabled.
        if (ckbxChangeTeacherHead.isSelected()) {
            cBoxChangeTeacherHouses.setEnabled(true);
        } else {
            cBoxChangeTeacherHouses.setEnabled(false);
        }

    }//GEN-LAST:event_ckbxChangeTeacherHeadStateChanged

    private void btnStudentChangeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStudentChangeSearchActionPerformed
        //Denna knapp kontrollerar input och söker fram elever

        DefaultListModel studentModel = new DefaultListModel();
        DefaultListModel gradeModel = new DefaultListModel();
        DefaultListModel courseModel = new DefaultListModel();

        try {
            String sqlFirstName;
            String sqlLastName;
            String sqlPrefect;

            if (Validate.textIsNotEmptyNoMsg(txtChangeStudentFirstNameSearch)) { //Om textfältet lämnas tomt så söker programmet efter nullvärden i databasen. Annars söker den på angiven text.
                sqlFirstName = "where fornamn like '%" + txtChangeStudentFirstNameSearch.getText() + "%' ";
            } else {
                sqlFirstName = "where fornamn is null ";
            }

            if (Validate.textIsNotEmptyNoMsg(txtChangeStudentLastNameSearch)) {
                sqlLastName = "and efternamn like '%" + txtChangeStudentLastNameSearch.getText() + "%'";
            } else {
                sqlLastName = "and efternamn is null";
            }
            ArrayList<HashMap<String, String>> studentList = db.fetchRows("select elev_id, fornamn, efternamn, sovsal, elevhemsnamn from elev " //hämtar elevinformation
                    + "left join elevhem on elevhem.prefekt = elev.elev_id "
                    + sqlFirstName + sqlLastName);

            if (!Validate.checkEmptyDBRows(studentList)) { //kollar om elever hittades
                for (HashMap<String, String> student : studentList) {

                    if (Validate.checkNullString(student.get("ELEVHEMSNAMN"))) { //Om elevhemsnamnet är null i databasen så innebär det att eleven inte är prefekt. Då anges "Nej" i listan.
                        sqlPrefect = "Nej";
                    } else {
                        sqlPrefect = student.get("ELEVHEMSNAMN");
                    }

                    studentModel.addElement(student.get("ELEV_ID") + ",  " + student.get("FORNAMN") + ",  " //Läser in elevinfo i modell
                            + student.get("EFTERNAMN") + ",  " + student.get("SOVSAL") + ",  " + sqlPrefect);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Inga elever hittades. Försök med ett annat namn.");
            }

            lstChangeStudent.setModel(studentModel); //Laddar in modell i listan

            lstChangeStudentGrade.setModel(gradeModel); //nollställer fält
            lstChangeStudentCourse.setModel(courseModel);
            lblChangeStudentFirstName.setText("");
            lblChangeStudentLastName.setText("");
            lblChangeStudentID.setText("");
            txtChangeStudentFirstNameSearch.setText("");
            txtChangeStudentLastNameSearch.setText("");
            lblChangeStudentDone.setText("");
            ckbxChangeStudentFirstName.setSelected(false);
            ckbxChangeStudentLastName.setSelected(false);
            ckbxChangeStudentRemoveAll.setSelected(false);
            ckbxChangeStudentPrefect.setSelected(false);
            ckbxChangeStudentRoom.setSelected(false);
            ckbxChangeStudentRemovePrefect.setSelected(false);

        } catch (InfException ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_btnStudentChangeSearchActionPerformed

    private void ckbxChangeStudentPrefectStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ckbxChangeStudentPrefectStateChanged

        //Om denna checkbox för prefekt kryssas i, så ger det möjlighet att välja elevhem i en lista - som annars är disabled.
        if (ckbxChangeStudentPrefect.isSelected()) {
            cBoxChangeStudentHouses.setEnabled(true);
        } else {
            cBoxChangeStudentHouses.setEnabled(false);
        }

    }//GEN-LAST:event_ckbxChangeStudentPrefectStateChanged

    private void btnChangeStudentRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeStudentRemoveActionPerformed
        //Denna knapp kontrollerar vilka (om några) värden som ska tas bort databasen och gör det.

        DefaultListModel listModel = new DefaultListModel();
        lblChangeStudentDone.setText(" "); //Nollställer resultatetikett

        if (Validate.labelIsNotEmpty(lblChangeStudentID)) { //Kollar så elevid har hämtats från listan

            try {
                boolean deleteInfo = false; //Denna boolean håller koll på om information har raderats eller ej
                if (ckbxChangeStudentFirstName.isSelected()) { //Om en checkbox är ikryssad så sätts det värdet som null i databasen
                    db.update("update elev "
                            + "set fornamn = null "
                            + "where elev_id ='" + lblChangeStudentID.getText() + "'");
                    lblChangeStudentDone.setText("Information har raderats.");
                    deleteInfo = true;
                }

                if (ckbxChangeStudentLastName.isSelected()) {
                    db.update("update elev "
                            + "set efternamn = null "
                            + "where elev_id ='" + lblChangeStudentID.getText() + "'");
                    lblChangeStudentDone.setText("Information har raderats.");
                    deleteInfo = true;
                }

                if (ckbxChangeStudentRoom.isSelected()) {
                    db.update("update elev "
                            + "set sovsal = null "
                            + "where elev_id ='" + lblChangeStudentID.getText() + "'");
                    lblChangeStudentDone.setText("Information har raderats.");
                    deleteInfo = true;
                }

                if (ckbxChangeStudentRemovePrefect.isSelected()) {
                    db.update("update elevhem "
                            + "set prefekt = null "
                            + "where prefekt ='" + lblChangeStudentID.getText() + "'");
                    lblChangeStudentDone.setText("Information har raderats.");
                    deleteInfo = true;

                }

                if (ckbxChangeStudentRemoveAll.isSelected()) { //Om denna checkbox är ikryssas så tas hela raden bort från tabellen i databasen
                    db.delete("delete from elev "
                            + "where elev_id = '" + lblChangeStudentID.getText() + "'");
                    lblChangeStudentDone.setText("Information har raderats.");
                    deleteInfo = true;

                }

                if (!deleteInfo) { //Om deleteinfo fortfarande är false så har inget raderats.
                    lblChangeStudentDone.setText("Ingen information har raderats.");
                }

                lstChangeStudent.setModel(listModel); //Nollställer fält
                lstChangeStudentGrade.setModel(listModel);
                lstChangeStudentCourse.setModel(listModel);
                lblChangeStudentLastName.setText("");
                lblChangeStudentFirstName.setText("");
                lblChangeStudentID.setText("");
                txtChangeStudentFirstNameSearch.setText("");
                txtChangeStudentLastNameSearch.setText("");
                ckbxChangeStudentFirstName.setSelected(false);
                ckbxChangeStudentLastName.setSelected(false);
                ckbxChangeStudentRoom.setSelected(false);
                ckbxChangeStudentRemovePrefect.setSelected(false);
                ckbxChangeStudentRemoveAll.setSelected(false);
                ckbxChangeStudentPrefect.setSelected(false);

            } catch (InfException ex) {
                JOptionPane.showMessageDialog(null, "Den valda eleven kan inte tas bort. Se till att eleven inte är prefekt, är kopplad till en kurs, eller liknande.");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Elev ID hittades ej. Kontrollera att du har valt en elev från listan genom att klicka på denne.");

        }


    }//GEN-LAST:event_btnChangeStudentRemoveActionPerformed

    private void lstChangeStudentValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstChangeStudentValueChanged
        //Denna metod läser in information från listan till textfält/etiketter

        DefaultListModel gradeModel = new DefaultListModel();
        DefaultListModel courseModel = new DefaultListModel();

        try {
            String[] studentInfo = lstChangeStudent.getSelectedValue().toString().split(",  "); //Den valda raden delas upp

            if (studentInfo[1].equals("null")) { //Om värdet är "null" så innebär det att fältet är tomt i databasen. Då blir textfältet blankt.
                lblChangeStudentFirstName.setText("");
            } else {
                lblChangeStudentFirstName.setText(studentInfo[1]);
            }

            if (studentInfo[2].equals("null")) {
                lblChangeStudentLastName.setText("");
            } else {
                lblChangeStudentLastName.setText(studentInfo[2]);
            }

            lblChangeStudentID.setText(studentInfo[0]);

            if (studentInfo[4].equals("Nej")) { //Anger prefektstatus och ger möjlighet till att ta bort prefektstatus
                ckbxChangeStudentPrefect.setSelected(false);
                ckbxChangeStudentRemovePrefect.setEnabled(false);
            } else {
                ckbxChangeStudentPrefect.setSelected(true);
                ckbxChangeStudentRemovePrefect.setEnabled(true);
                cBoxChangeStudentHouses.setSelectedItem(studentInfo[4]);
            }

            try {
                ArrayList<HashMap<String, String>> gradeList = db.fetchRows("select har_betyg_i.kurs_id, kursnamn, kursbetyg from HAR_BETYG_I " //Hämtar betyg
                        + "join kurs on kurs.kurs_id = har_betyg_i.KURS_ID "
                        + "where elev_id = '" + studentInfo[0] + "'");

                ArrayList<HashMap<String, String>> courseList = db.fetchRows("select REGISTRERAD_PA.KURS_ID, kursnamn from REGISTRERAD_PA " //Hämtar kurser
                        + "join kurs on REGISTRERAD_PA.KURS_ID = KURS.KURS_ID "
                        + "where elev_id = '" + studentInfo[0] + "'");

                if (!Validate.checkEmptyDBRows(courseList)) { //kollar om några kurser hittades
                    for (HashMap<String, String> course : courseList) {
                        courseModel.addElement(course.get("KURS_ID") + ", " + course.get("KURSNAMN")); //Läser in kurser i modell
                    }

                } else {
                    courseModel.addElement("Inga kurser funna");

                }

                if (!Validate.checkEmptyDBRows(gradeList)) { //Kollar om betyg hittades

                    for (HashMap<String, String> grade : gradeList) {
                        gradeModel.addElement(grade.get("KURS_ID") + ", " + grade.get("KURSNAMN") + ", " + grade.get("KURSBETYG")); //läser in betyg i modell
                    }

                } else {
                    gradeModel.addElement("Inga betyg funna");

                }

            } catch (InfException ex) {
                System.out.println(ex.getMessage());
            }

        } catch (Exception ex) {

        }
        lstChangeStudentCourse.setModel(courseModel); //Laddar in modell i kurslista
        lstChangeStudentGrade.setModel(gradeModel); //Laddar in modell i betyglista
    }//GEN-LAST:event_lstChangeStudentValueChanged

    private void btnChangeStudentPrefectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeStudentPrefectActionPerformed
        //Denna knapp kontrollerar input och uppdaterar info om prefekt i databasen

        DefaultListModel listModel = new DefaultListModel();
        lblChangeStudentDone.setText(""); //Nollställer resultat

        if (Validate.labelIsNotEmpty(lblChangeStudentID)) { //Kollar så elev ID har valts i listan
            if (ckbxChangeStudentPrefect.isSelected()) { //kollar om prefektrutan är ikryssad

                try {

                    db.update("update elevhem " //uppdaterar prefekt i databas
                            + "set prefekt = '" + lblChangeStudentID.getText() + "' "
                            + "where elevhemsnamn = '" + cBoxChangeStudentHouses.getSelectedItem().toString() + "'");

                    lblChangeStudentDone.setText("Prefekt för " + cBoxChangeStudentHouses.getSelectedItem().toString() + " har ändrats."); //Meddelar resultat

                    lstChangeStudent.setModel(listModel); //Nollställer fält
                    lstChangeStudentGrade.setModel(listModel);
                    lstChangeStudentCourse.setModel(listModel);
                    lblChangeStudentFirstName.setText("");
                    lblChangeStudentLastName.setText("");
                    lblChangeStudentID.setText("");
                    txtChangeStudentFirstNameSearch.setText("");
                    txtChangeStudentLastNameSearch.setText("");
                    ckbxChangeStudentFirstName.setSelected(false);
                    ckbxChangeStudentLastName.setSelected(false);
                    ckbxChangeStudentRemoveAll.setSelected(false);
                    ckbxChangeStudentPrefect.setSelected(false);
                    ckbxChangeStudentRoom.setSelected(false);
                    ckbxChangeStudentRemovePrefect.setSelected(false);

                } catch (InfException ex) {
                    System.out.println(ex.getMessage());
                }
            } else {
                lblChangeStudentDone.setText("Inga förändringar har utförts.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Elev ID hittades ej. Kontrollera att du har valt en elev från listan genom att klicka på denne.");

        }


    }//GEN-LAST:event_btnChangeStudentPrefectActionPerformed

    private void btnAdminAddCoursesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminAddCoursesActionPerformed
        //Denna knapp förbereder, nollställer och visar registrera kurs-containern

        DefaultListModel listModel = new DefaultListModel();

        listModel.addElement("Välj ett ämne"); //Nollställer fält
        lstRegisterCourseTeacher.setModel(listModel);
        cBoxRegisterCourseSubject.removeAllItems();
        cBoxRegisterCourseSubject.addItem("");
        txtRegisterCourseName.setText("");
        txtRegisterCourseStartDate.setText("");
        txtRegisterCourseEndDate.setText("");
        txtAreaRegisterCourseDescription.setText("");
        lblRegisterCourseDone.setText(" ");

        try {
            ArrayList<HashMap<String, String>> subjectList = db.fetchRows("select amne_id, amnesnamn from amne"); //Hämtar ämnen

            if (!Validate.checkEmptyDBRows(subjectList)) { //Kollar så ämnen hittades

                for (HashMap<String, String> subject : subjectList) {
                    cBoxRegisterCourseSubject.addItem(subject.get("AMNE_ID") + " - " + subject.get("AMNESNAMN")); //läser in ämnen i lista
                }

            }

        } catch (InfException ex) {
            System.out.println(ex.getMessage());
        }

        getLayout("pnlAdminRegisterCourse"); //Visar containern
    }//GEN-LAST:event_btnAdminAddCoursesActionPerformed

    private void btnRegisterCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterCourseActionPerformed
        //Denna knapp kontrollerar input och registerar ny kursrad i databasen

        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");//SimpleDateFormat används för att formatera text till datumformat
        DefaultListModel listModel = new DefaultListModel();
        lblRegisterCourseDone.setText(" ");//Nollställer resultatetikett

        if (Validate.textIsNotEmpty(txtRegisterCourseName) && Validate.textIsNotEmpty(txtRegisterCourseStartDate) && Validate.textIsNotEmpty(txtRegisterCourseEndDate)) { //kontrollerar om textrutorna är tomma

            if (Validate.listSelectedIsNotEmpty(lstRegisterCourseTeacher) && Validate.cBoxIsNotEmpty(cBoxRegisterCourseSubject)) { //kontrollerar så lärare och ämne är valt i listorna

                if (Validate.checkDateFormat(txtRegisterCourseStartDate) && Validate.checkDateFormat(txtRegisterCourseEndDate)) { //kontrollerar formatet på datumet i textfälten

                    try {
                        Date startDate = format.parse(txtRegisterCourseStartDate.getText()); //gör om textfält till Date-objekt
                        Date endDate = format.parse(txtRegisterCourseEndDate.getText());

                        if (startDate.after(endDate)) { //kollar så startdatumer inte sker efter slutdatumer
                            JOptionPane.showMessageDialog(null, "Startdatumet måste vara före slutdatumet.");
                            lblRegisterCourseDone.setText(" ");
                        } else {

                            try {

                                String[] subjectInfo = cBoxRegisterCourseSubject.getSelectedItem().toString().split(" - "); //Delar upp ämnesinfo från lista
                                String[] teacherInfo = lstRegisterCourseTeacher.getSelectedValue().toString().split(",  "); //Delar upp lärarinfo från lista

                                db.insert("insert into kurs " //Lägger till ny rad till kurstabellen i databasen
                                        + "values (" + db.getAutoIncrement("KURS", "KURS_ID")
                                        + ", '" + txtRegisterCourseName.getText()
                                        + "', '" + txtRegisterCourseStartDate.getText()
                                        + "', '" + txtRegisterCourseEndDate.getText()
                                        + "', '" + teacherInfo[0]
                                        + "', '" + subjectInfo[0] + "')");

                                lblRegisterCourseDone.setText("Kurs registrerad."); //Meddelar resultat

                                cBoxRegisterCourseSubject.setSelectedItem(""); //Nollställer fält
                                txtRegisterCourseName.setText("");
                                txtRegisterCourseStartDate.setText("");
                                txtRegisterCourseEndDate.setText("");
                                txtAreaRegisterCourseDescription.setText("");
                                lstRegisterCourseTeacher.setModel(listModel);

                            } catch (InfException ex) {
                                JOptionPane.showMessageDialog(null, "Det är fel format på något av de angivna datumen. Försök med formatet: åååå-mm-dd");

                            }

                        }
                    } catch (Exception ex) {

                    }

                }

            } else {
                JOptionPane.showMessageDialog(null, "Du måste välja en kurs och en lärare.");

            }
        }


    }//GEN-LAST:event_btnRegisterCourseActionPerformed

    private void cBoxRegisterCourseSubjectPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cBoxRegisterCourseSubjectPopupMenuWillBecomeInvisible
        //Denna metod uppdaterar en lista över lärare med kompetens (och ämnesbeskrivning) i det valda ämnet. Denna kod körs varje gång som comboboxen stängs.

        DefaultListModel listModel = new DefaultListModel();

        lstRegisterCourseTeacher.setModel(listModel); //Nollställer fält
        lblRegisterCourseDone.setText(" ");

        if (Validate.cBoxIsNotEmpty(cBoxRegisterCourseSubject)) { //Kollar så ett ämne har valts

            try {

                String[] subjectInfo = cBoxRegisterCourseSubject.getSelectedItem().toString().split(" - "); //Delar upp ämnesinfo

                ArrayList<HashMap<String, String>> teacherList = db.fetchRows("select larare.larar_id, fornamn, efternamn, kompetensniva from larare " //Hämtar lärar/kompetensinfo
                        + "join har_kompetens_i on HAR_KOMPETENS_I.LARAR_ID = LARARE.LARAR_ID "
                        + "where amne_id = '" + subjectInfo[0] + "'");

                if (!Validate.checkEmptyDBRows(teacherList)) { //kollar om lärar/kompetens hittades

                    for (HashMap<String, String> teacher : teacherList) {
                        listModel.addElement(teacher.get("LARAR_ID") + ",  " + teacher.get("FORNAMN") + ",  " //Läser in lärare/kompetens i modell
                                + teacher.get("EFTERNAMN") + ",  " + teacher.get("KOMPETENSNIVA"));
                    }

                } else {
                    listModel.addElement("Inga lärare funna");

                }

                String description = db.fetchSingle("select amnesbeskrivning from amne where amne_id ='" + subjectInfo[0] + "'"); //Hämtar ämnesbeskrivning
                txtAreaRegisterCourseDescription.setText(description); //Matar in ämnesbeskrivning i textruta

            } catch (InfException ex) {
                System.out.println(ex.getMessage());
            }
        } else {

            listModel.addElement("Välj ett ämne");

            txtAreaRegisterCourseDescription.setText("");
        }

        lstRegisterCourseTeacher.setModel(listModel);
    }//GEN-LAST:event_cBoxRegisterCourseSubjectPopupMenuWillBecomeInvisible

    private void btnAdminChangeCoursesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminChangeCoursesActionPerformed
        //Denna knapp förbereder, nollställer och visar ändra kurs-containern

        DefaultListModel listModel = new DefaultListModel();

        listModel.addElement("Välj ett ämne"); //Nollställer fält
        lstChangeCourseList.setModel(listModel);
        cBoxChangeCourseSubjectSort.removeAllItems();
        cBoxChangeCourseSubject.removeAllItems();
        cBoxChangeCourseTeacher.removeAllItems();
        cBoxChangeCourseSubjectSort.addItem("");
        cBoxChangeCourseSubject.addItem("");
        cBoxChangeCourseTeacher.addItem("");
        txtChangeCourseName.setText("");
        txtChangeCourseStartDate.setText("");
        txtChangeCourseEndDate.setText("");
        lblChangeCourseID.setText("");
        lblChangeCourseDone.setText("");
        lstChangeCourseList.setModel(listModel);
        cBoxChangeCourseTeacher.setSelectedIndex(0);
        cBoxChangeCourseSubject.setSelectedIndex(0);
        cBoxChangeCourseSubjectSort.setSelectedIndex(0);
        ckbxChangeCourseName.setSelected(false);
        ckbxChangeCourseStartDate.setSelected(false);
        ckbxChangeCourseEndDate.setSelected(false);
        ckbxChangeCourseTeacher.setSelected(false);
        ckbxChangeCourseSubject.setSelected(false);
        ckbxChangeCourseRemoveAll.setSelected(false);

        try {
            ArrayList<HashMap<String, String>> subjectList = db.fetchRows("select amne_id, amnesnamn from amne"); //Hämtar ämnen
            ArrayList<HashMap<String, String>> teacherList = db.fetchRows("select larar_id, fornamn, efternamn from larare"); //Hämtar lärare

            if (!Validate.checkEmptyDBRows(teacherList)) { //Kollar om lärare hittades

                for (HashMap<String, String> teacher : teacherList) {
                    cBoxChangeCourseTeacher.addItem(teacher.get("LARAR_ID") + " - " + teacher.get("FORNAMN") + " " + teacher.get("EFTERNAMN")); //Läser in lärare i lista
                }

            }

            if (!Validate.checkEmptyDBRows(subjectList)) { //Kollar om ämnen hittades

                for (HashMap<String, String> subject : subjectList) {
                    cBoxChangeCourseSubjectSort.addItem(subject.get("AMNE_ID") + " - " + subject.get("AMNESNAMN")); //Läser in ämnen i två listor
                    cBoxChangeCourseSubject.addItem(subject.get("AMNE_ID") + " - " + subject.get("AMNESNAMN"));
                }

            }

        } catch (InfException ex) {
            System.out.println(ex.getMessage());
        }

        getLayout("pnlAdminChangeCourse"); //Visar container
    }//GEN-LAST:event_btnAdminChangeCoursesActionPerformed

    private void btnChangeTeacherLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeTeacherLevelActionPerformed
        //Denna knapp kontrollerar input och uppdaterar kompetensnivå i databasen

        DefaultListModel listModel = new DefaultListModel();
        lblChangeTeacherDone.setText(""); //Nollställer resultatetikett

        if (Validate.labelIsNotEmpty(lblChangeTeacherID)) { //kollar så att lärarid har angetts via listan
            if (Validate.listSelectedIsNotEmpty(lstChangeTeacherLevel)) { //Kollar så en tidigare kompetensnivå har valts i listan

                try {

                    String[] levelInfo = lstChangeTeacherLevel.getSelectedValue().toString().split(", "); //Delar upp kompetensnivåinfo från lista

                    db.update("update har_kompetens_i " //uppdaterar databas med ny kompetensnivå
                            + "set kompetensniva = '" + cBoxChangeTeacherNewLevel.getSelectedItem().toString() + "' "
                            + "where larar_id = '" + lblChangeTeacherID.getText() + "' "
                            + "and amne_id = '" + levelInfo[0] + "'");

                    lblChangeTeacherDone.setText("Kompetensnivå ändrad."); //Meddelar resultat

                    lstChangeTeachers.setModel(listModel); //Nollställer fält
                    lstChangeTeacherLevel.setModel(listModel);
                    txtChangeTeacherLastName.setText("");
                    txtChangeTeacherFirstName.setText("");
                    lblChangeTeacherID.setText("");
                    txtChangeTeacherFirstNameSearch.setText("");
                    txtChangeTeacherLastNameSearch.setText("");
                    ckbxChangeTeacherFirstName.setSelected(false);
                    ckbxChangeTeacherLastName.setSelected(false);
                    ckbxChangeTeacherPwd.setSelected(false);
                    ckbxChangeTeacherRemoveAdmin.setSelected(false);
                    ckbxChangeTeacherRemoveAll.setSelected(false);
                    ckbxChangeTeacherAdmin.setSelected(false);
                    ckbxChangeTeacherHead.setSelected(false);
                    ckbxChangeTeacherRemoveHead.setSelected(false);
                    pwdChangeTeacherNewPwd.setText("");
                    pwdChangeTeacherRepeatPwd.setText("");
                    cBoxChangeTeacherAddLevel.setSelectedIndex(0);
                    cBoxChangeTeacherNewLevel.setSelectedIndex(0);
                    lstChangeTeacherLevel.setModel(listModel);

                } catch (InfException ex) {
                    System.out.println(ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Du måste välja ett ämne med kompetensnivå i listan.");

            }
        } else {
            JOptionPane.showMessageDialog(null, "LärarID hittades ej. Kontrollera att du har valt en lärare från listan genom att klicka på denne.");

        }
    }//GEN-LAST:event_btnChangeTeacherLevelActionPerformed

    private void btnChangeTeacherRemoveLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeTeacherRemoveLevelActionPerformed
        //Denna knapp kontrollerar input och tar bort kompetensrad ifrån databasen

        DefaultListModel listModel = new DefaultListModel();
        lblChangeTeacherDone.setText(""); //Nollställer resultatetikett

        if (Validate.labelIsNotEmpty(lblChangeTeacherID)) { //kollar så lärarid har angivits via listan
            if (Validate.listSelectedIsNotEmpty(lstChangeTeacherLevel)) { //Kollar så en kompetens har valts i listan

                try {
                    String[] levelInfo = lstChangeTeacherLevel.getSelectedValue().toString().split(", "); //Delar upp kompetensinfon

                    db.delete("delete from har_kompetens_i " //Tar bort kompetensrad i databasen
                            + "where larar_id = '" + lblChangeTeacherID.getText() + "' "
                            + "and amne_id = '" + levelInfo[0] + "'");

                    lblChangeTeacherDone.setText("Kompetensnivå raderad."); //Meddelar resultat

                    lstChangeTeachers.setModel(listModel); //Nollställer fält
                    lstChangeTeacherLevel.setModel(listModel);
                    txtChangeTeacherLastName.setText("");
                    txtChangeTeacherFirstName.setText("");
                    lblChangeTeacherID.setText("");
                    txtChangeTeacherFirstNameSearch.setText("");
                    txtChangeTeacherLastNameSearch.setText("");
                    ckbxChangeTeacherFirstName.setSelected(false);
                    ckbxChangeTeacherLastName.setSelected(false);
                    ckbxChangeTeacherPwd.setSelected(false);
                    ckbxChangeTeacherRemoveAdmin.setSelected(false);
                    ckbxChangeTeacherRemoveAll.setSelected(false);
                    ckbxChangeTeacherAdmin.setSelected(false);
                    ckbxChangeTeacherHead.setSelected(false);
                    ckbxChangeTeacherRemoveHead.setSelected(false);
                    pwdChangeTeacherNewPwd.setText("");
                    pwdChangeTeacherRepeatPwd.setText("");
                    cBoxChangeTeacherAddLevel.setSelectedIndex(0);
                    cBoxChangeTeacherNewLevel.setSelectedIndex(0);
                    lstChangeTeacherLevel.setModel(listModel);

                } catch (InfException ex) {

                    System.out.println(ex.getMessage());

                }
            } else {

                JOptionPane.showMessageDialog(null, "Du måste välja ett ämne med kompetensnivå i listan.");

            }
        } else {
            JOptionPane.showMessageDialog(null, "LärarID hittades ej. Kontrollera att du har valt en lärare från listan genom att klicka på denne.");

        }


    }//GEN-LAST:event_btnChangeTeacherRemoveLevelActionPerformed

    private void btnChangeTeacherAddLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeTeacherAddLevelActionPerformed
        //Denna knapp kontrollerar input och lägger till ny kompetensrad i databasen

        DefaultListModel listModel = new DefaultListModel();
        lblChangeTeacherDone.setText(""); //Nollställer resultatetikett

        if (Validate.labelIsNotEmpty(lblChangeTeacherID)) { //Kollar så ett lärarid har angivits via listan

            try {
                String[] levelInfo = cBoxChangeTeacherSubject.getSelectedItem().toString().split(" - "); //Deelar upp lärarinfo
                db.insert("insert into har_kompetens_i " //Lägger till den valda läraren+kompetensnivå i databasen
                        + "values ('" + lblChangeTeacherID.getText() + "', '" + levelInfo[0] + "', '"
                        + cBoxChangeTeacherAddLevel.getSelectedItem().toString() + "')");

                lblChangeTeacherDone.setText("Kompetensnivå registrerad."); //Meddelar resultat

                lstChangeTeachers.setModel(listModel); //Nollställer fält
                txtChangeTeacherLastName.setText("");
                txtChangeTeacherFirstName.setText("");
                lblChangeTeacherID.setText("");
                txtChangeTeacherFirstNameSearch.setText("");
                txtChangeTeacherLastNameSearch.setText("");
                ckbxChangeTeacherFirstName.setSelected(false);
                ckbxChangeTeacherLastName.setSelected(false);
                ckbxChangeTeacherPwd.setSelected(false);
                ckbxChangeTeacherRemoveAdmin.setSelected(false);
                ckbxChangeTeacherRemoveAll.setSelected(false);
                ckbxChangeTeacherAdmin.setSelected(false);
                ckbxChangeTeacherHead.setSelected(false);
                ckbxChangeTeacherRemoveHead.setSelected(false);
                pwdChangeTeacherNewPwd.setText("");
                pwdChangeTeacherRepeatPwd.setText("");
                cBoxChangeTeacherAddLevel.setSelectedIndex(0);
                cBoxChangeTeacherNewLevel.setSelectedIndex(0);
                lstChangeTeacherLevel.setModel(listModel);

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }

        } else {
            JOptionPane.showMessageDialog(null, "LärarID hittades ej. Kontrollera att du har valt en lärare från listan genom att klicka på denne.");

        }

    }//GEN-LAST:event_btnChangeTeacherAddLevelActionPerformed

    private void btnChangeStudentGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeStudentGradeActionPerformed
        //Denna knapp kontrollerar input och tar bort betygsrad från databasen

        DefaultListModel listModel = new DefaultListModel();
        lblChangeStudentDone.setText(""); //Nollställer resultatetikett

        if (Validate.labelIsNotEmpty(lblChangeStudentID)) { //kontrollerar så ett elevid har angivits via listan
            if (Validate.listSelectedIsNotEmpty(lstChangeStudentGrade)) { //kollar så ett betyg har valts i listan

                try {
                    String[] gradeInfo = lstChangeStudentGrade.getSelectedValue().toString().split(", "); //Delar upp betyginfo

                    db.delete("delete from har_betyg_i " //Tar bort betygsrad från databasen
                            + "where elev_id = '" + lblChangeStudentID.getText() + "' "
                            + "and kurs_id = '" + gradeInfo[0] + "'");

                    lblChangeStudentDone.setText("Betyget har raderats."); //Meddelar resultat

                    lstChangeStudent.setModel(listModel); //Nollställer fält
                    lstChangeStudentGrade.setModel(listModel);
                    lstChangeStudentCourse.setModel(listModel);
                    lblChangeStudentFirstName.setText("");
                    lblChangeStudentLastName.setText("");
                    lblChangeStudentID.setText("");
                    txtChangeStudentFirstNameSearch.setText("");
                    txtChangeStudentLastNameSearch.setText("");
                    lblChangeStudentDone.setText("");
                    ckbxChangeStudentFirstName.setSelected(false);
                    ckbxChangeStudentLastName.setSelected(false);
                    ckbxChangeStudentRemoveAll.setSelected(false);
                    ckbxChangeStudentPrefect.setSelected(false);
                    ckbxChangeStudentRoom.setSelected(false);
                    ckbxChangeStudentRemovePrefect.setSelected(false);

                } catch (InfException ex) {
                    System.out.println(ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Du måste välja ett betyg från listan.");

            }
        } else {
            JOptionPane.showMessageDialog(null, "Elev ID hittades ej. Kontrollera att du har valt en elev från listan genom att klicka på denne.");

        }
    }//GEN-LAST:event_btnChangeStudentGradeActionPerformed

    private void btnChangeStudentCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeStudentCourseActionPerformed
        //Denna knapp kontrollerar input och tar bort kurs/elev-registrering

        DefaultListModel listModel = new DefaultListModel();
        lblChangeStudentDone.setText(""); //Nollställer resultatetikett

        if (Validate.labelIsNotEmpty(lblChangeStudentID)) { //Kontrollerar så ett elevid har valts via listan
            if (Validate.listSelectedIsNotEmpty(lstChangeStudentCourse)) { //Kollar så en kurs har valts i listan

                try {
                    String[] courseInfo = lstChangeStudentCourse.getSelectedValue().toString().split(", "); //Delar upp kursinfo

                    db.delete("delete from registrerad_pa " //tar bort elev/kurs-registrerings-rad från databasen
                            + "where elev_id = '" + lblChangeStudentID.getText() + "' "
                            + "and kurs_id = '" + courseInfo[0] + "'");

                    lblChangeStudentDone.setText("Kurs avregistrerad."); //Meddelar resultat

                    lstChangeStudent.setModel(listModel); //Nollställer fält
                    lstChangeStudentGrade.setModel(listModel);
                    lstChangeStudentCourse.setModel(listModel);
                    lblChangeStudentFirstName.setText("");
                    lblChangeStudentLastName.setText("");
                    lblChangeStudentID.setText("");
                    txtChangeStudentFirstNameSearch.setText("");
                    txtChangeStudentLastNameSearch.setText("");
                    ckbxChangeStudentFirstName.setSelected(false);
                    ckbxChangeStudentLastName.setSelected(false);
                    ckbxChangeStudentRemoveAll.setSelected(false);
                    ckbxChangeStudentPrefect.setSelected(false);
                    ckbxChangeStudentRoom.setSelected(false);
                    ckbxChangeStudentRemovePrefect.setSelected(false);

                } catch (InfException ex) {
                    System.out.println(ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Du måste välja en kurs från listan.");

            }
        } else {
            JOptionPane.showMessageDialog(null, "Elev ID hittades ej. Kontrollera att du har valt en elev från listan genom att klicka på denne.");

        }


    }//GEN-LAST:event_btnChangeStudentCourseActionPerformed

    private void btnChangeCourseShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeCourseShowAllActionPerformed
        //Denna kurs visar alla kurser som finns i em lista

        DefaultListModel listModel = new DefaultListModel();
        lblChangeCourseDone.setText(""); //Nollställer resultat

        try {
            ArrayList<HashMap<String, String>> courseList = db.fetchRows("select kurs_id, kursnamn, kursstart, kursslut, larar_id, fornamn, efternamn, amnesnamn, amne_id from kurs " //Hämtar kurser, lärare och ämnen
                    + "left join larare on larare.larar_id = kurs.kurslarare "
                    + "left join amne on amne.amne_id = kurs.amnestillhorighet");

            if (!Validate.checkEmptyDBRows(courseList)) { //Kollar så listan inte är tom

                for (HashMap<String, String> course : courseList) {
                    listModel.addElement(course.get("KURS_ID") + ",  " + course.get("KURSNAMN") + ",  " + course.get("KURSSTART") + ",  " //Läser in all info i en modell
                            + course.get("KURSSLUT") + ",  " + course.get("LARAR_ID") + ",  " + course.get("FORNAMN") + ",  "
                            + course.get("EFTERNAMN") + ",  " + course.get("AMNESNAMN") + ",  " + course.get("AMNE_ID"));
                }

            } else {
                JOptionPane.showMessageDialog(null, "Inga kurser hittades. Registrera en ny kurs och försök igen.");
            }

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

        lstChangeCourseList.setModel(listModel); //laddar in modell i listan
    }//GEN-LAST:event_btnChangeCourseShowAllActionPerformed

    private void cBoxChangeCourseSubjectSortPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cBoxChangeCourseSubjectSortPopupMenuWillBecomeInvisible
        //Denna metod visar kurser som hör till det valda ämnet i en lista

        DefaultListModel listModel = new DefaultListModel();
        lblChangeCourseDone.setText(""); //Nollställer resultat

        if (Validate.cBoxIsNotEmpty(cBoxChangeCourseSubjectSort)) { //Kollar så att ett ämne har valts
            try {

                String[] subjectInfo = cBoxChangeCourseSubjectSort.getSelectedItem().toString().split(" - "); //Delar upp ämnesinfo

                ArrayList<HashMap<String, String>> courseList = db.fetchRows("select kurs_id, kursnamn, kursstart, kursslut, larar_id, fornamn, efternamn, amnesnamn, amne_id from kurs " //Hämrar kurs, lärare och ämne
                        + "join larare on larare.larar_id = kurs.kurslarare "
                        + "join amne on amne.amne_id = kurs.amnestillhorighet "
                        + "where amnestillhorighet = '" + subjectInfo[0] + "'");

                if (!Validate.checkEmptyDBRows(courseList)) { //Kollar så listan inte är tom

                    for (HashMap<String, String> course : courseList) {
                        listModel.addElement(course.get("KURS_ID") + ",  " + course.get("KURSNAMN") + ",  " + course.get("KURSSTART") + ",  " //Läser in listan i modell
                                + course.get("KURSSLUT") + ",  " + course.get("LARAR_ID") + ",  " + course.get("FORNAMN") + ",  "
                                + course.get("EFTERNAMN") + ",  " + course.get("AMNESNAMN") + ",  " + course.get("AMNE_ID"));
                    }

                } else {
                    listModel.addElement("Inga kurser funna");
                }

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        } else {
            listModel.addElement("Välj ett ämne");
        }
        lstChangeCourseList.setModel(listModel); //Laddar in modell i lista

    }//GEN-LAST:event_cBoxChangeCourseSubjectSortPopupMenuWillBecomeInvisible

    private void lstChangeCourseListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstChangeCourseListValueChanged
        //Denna metod uppdaterar fält med den info som har valts i listan. Denna kod körs varje gång markören flyttas i listan.

        if (Validate.listSelectedIsNotEmpty(lstChangeCourseList)) { //kollar så ett giltigt val har gjorts i listan

            try {
                String[] courseInfo = lstChangeCourseList.getSelectedValue().toString().split(",  "); //Delar upp kursinfo

                lblChangeCourseID.setText(courseInfo[0]); //Anger kursID

                if (courseInfo[1].equals("null")) { //Om värdet är null så innebär det att fältet är tomt i databasen. Då blir textrutan också tom.
                    txtChangeCourseName.setText("");
                } else {
                    txtChangeCourseName.setText(courseInfo[1]);
                }

                if (courseInfo[2].equals("null")) {
                    txtChangeCourseStartDate.setText("");
                } else {
                    txtChangeCourseStartDate.setText(courseInfo[2]);
                }

                if (courseInfo[3].equals("null")) {
                    txtChangeCourseEndDate.setText("");
                } else {
                    txtChangeCourseEndDate.setText(courseInfo[3]);
                }

                if (courseInfo[4].equals("null")) {
                    cBoxChangeCourseTeacher.setSelectedIndex(0);
                } else {
                    String teacherFullName = courseInfo[4] + " - " + courseInfo[5] + " " + courseInfo[6]; //Slåt ihop id, för och efternamn på lärare
                    cBoxChangeCourseTeacher.setSelectedItem(teacherFullName);
                }

                if (courseInfo[8].equals("null")) {
                    cBoxChangeCourseSubject.setSelectedIndex(0);
                } else {
                    cBoxChangeCourseSubject.setSelectedItem(courseInfo[8] + " - " + courseInfo[7]); //Slår ihop id och namn på ämne
                }

            } catch (Exception ex) {

            }
        }


    }//GEN-LAST:event_lstChangeCourseListValueChanged

    private void btnChangeCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeCourseActionPerformed
        //Denna knapp kontrollerar input och uppdaterar kursinfo i databasen

        DefaultListModel listModel = new DefaultListModel();
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        lblChangeCourseDone.setText("");//Nollställer resultatfält

        if (Validate.labelIsNotEmpty(lblChangeCourseID)) { //Kollar så kursid har angivits via listan
            if (Validate.textIsNotEmpty(txtChangeCourseName) && Validate.textIsNotEmpty(txtChangeCourseStartDate) && Validate.textIsNotEmpty(txtChangeCourseEndDate)) { //Kollar så textfälten inte är tomma
                if (Validate.cBoxIsNotEmpty(cBoxChangeCourseSubject) && Validate.cBoxIsNotEmpty(cBoxChangeCourseTeacher)) { //Kollar så ämne och lärare har valts
                    if (Validate.checkDateFormat(txtChangeCourseStartDate) && Validate.checkDateFormat(txtChangeCourseEndDate)) { //Kollar så giltiga datum har angivits

                        try {
                            Date startDate = format.parse(txtChangeCourseStartDate.getText()); //Gör om textruta till Date-objekt
                            Date endDate = format.parse(txtChangeCourseEndDate.getText());

                            if (startDate.after(endDate)) { //Kollar så startdatumet inte är efter slutdatumet

                                JOptionPane.showMessageDialog(null, "Startdatumet måste vara före slutdatumet.");
                                lblChangeCourseDone.setText(" ");

                            } else {
                                try {
                                    String[] teacherInfo = cBoxChangeCourseTeacher.getSelectedItem().toString().split(" - "); //Delar på lärarinfo
                                    String[] subjectInfo = cBoxChangeCourseSubject.getSelectedItem().toString().split(" - ");  //Delar på ämnesinfo

                                    db.update("update kurs " //Uppdaterar kursinfo i databasen
                                            + "set kursnamn = '" + txtChangeCourseName.getText() + "', "
                                            + "kursstart = '" + txtChangeCourseStartDate.getText() + "', "
                                            + "kursslut = '" + txtChangeCourseEndDate.getText() + "', "
                                            + "kurslarare = '" + teacherInfo[0] + "', "
                                            + "amnestillhorighet = '" + subjectInfo[0] + "' "
                                            + "where kurs_id = '" + lblChangeCourseID.getText() + "'");

                                    lblChangeCourseDone.setText("Kurs ändrad."); //Meddelar resultat

                                    lblChangeCourseID.setText(""); //Nollställer fält
                                    txtChangeCourseName.setText("");
                                    txtChangeCourseStartDate.setText("");
                                    txtChangeCourseEndDate.setText("");
                                    lstChangeCourseList.setModel(listModel);
                                    cBoxChangeCourseTeacher.setSelectedIndex(0);
                                    cBoxChangeCourseSubject.setSelectedIndex(0);
                                    cBoxChangeCourseSubjectSort.setSelectedIndex(0);
                                    ckbxChangeCourseName.setSelected(false);
                                    ckbxChangeCourseStartDate.setSelected(false);
                                    ckbxChangeCourseEndDate.setSelected(false);
                                    ckbxChangeCourseTeacher.setSelected(false);
                                    ckbxChangeCourseSubject.setSelected(false);
                                    ckbxChangeCourseRemoveAll.setSelected(false);

                                } catch (InfException ex) {
                                    JOptionPane.showMessageDialog(null, "Det är fel format på något av de angivna datumen. Försök med formatet: åååå-mm-dd");

                                }
                            }
                        } catch (Exception ex) {

                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Du måste ange en lärare och ett ämne.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Kurs ID hittades ej. Kontrollera att du har valt en kurs från listan genom att klicka på den.");

        }

    }//GEN-LAST:event_btnChangeCourseActionPerformed

    private void btnChangeCourseRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeCourseRemoveActionPerformed
        //Denna knapp tar bort den valda (om någon) kursinformationen i databasen

        DefaultListModel listModel = new DefaultListModel();
        lblChangeCourseDone.setText(""); //Nollställer resultatetikett

        if (Validate.labelIsNotEmpty(lblChangeCourseID)) { //Kollar så kursid har angivits via listan
            try {

                boolean deleteInfo = false; //Håller koll på om någon info har raderats eller ej

                if (ckbxChangeCourseName.isSelected()) { //Om en checkbox är ikryssad så sätts det fältet som null i databasen

                    db.update("update kurs "
                            + "set kursnamn = null "
                            + "where kurs_id = '" + lblChangeCourseID.getText() + "'");

                    lblChangeCourseDone.setText("Information har raderats.");
                    deleteInfo = true;
                }

                if (ckbxChangeCourseStartDate.isSelected()) {

                    db.update("update kurs "
                            + "set kursstart = null "
                            + "where kurs_id = '" + lblChangeCourseID.getText() + "'");

                    lblChangeCourseDone.setText("Information har raderats.");
                    deleteInfo = true;
                }

                if (ckbxChangeCourseEndDate.isSelected()) {

                    db.update("update kurs "
                            + "set kursslut = null "
                            + "where kurs_id = '" + lblChangeCourseID.getText() + "'");

                    lblChangeCourseDone.setText("Information har raderats.");
                    deleteInfo = true;
                }

                if (ckbxChangeCourseTeacher.isSelected()) {

                    db.update("update kurs "
                            + "set kurslarare = null "
                            + "where kurs_id = '" + lblChangeCourseID.getText() + "'");

                    lblChangeCourseDone.setText("Information har raderats.");
                    deleteInfo = true;
                }

                if (ckbxChangeCourseSubject.isSelected()) {

                    db.update("update kurs "
                            + "set amnestillhorighet = null "
                            + "where kurs_id = '" + lblChangeCourseID.getText() + "'");

                    lblChangeCourseDone.setText("Information har raderats.");
                    deleteInfo = true;
                }

                if (ckbxChangeCourseRemoveAll.isSelected()) { //Om denna checkbox är ikryssad så tas hela kursraden bort från databasen

                    db.delete("delete from kurs "
                            + "where kurs_id = '" + lblChangeCourseID.getText() + "'");

                    lblChangeCourseDone.setText("Information har raderats.");
                    deleteInfo = true;
                }

                if (!deleteInfo) {
                    lblChangeCourseDone.setText("Ingen information har raderats."); //Om deleteInfo fortfarande är false så meddelas detta.
                }

                lblChangeCourseID.setText(""); //Nollställer fält
                txtChangeCourseName.setText("");
                txtChangeCourseStartDate.setText("");
                txtChangeCourseEndDate.setText("");
                lstChangeCourseList.setModel(listModel);
                cBoxChangeCourseTeacher.setSelectedIndex(0);
                cBoxChangeCourseSubject.setSelectedIndex(0);
                cBoxChangeCourseSubjectSort.setSelectedIndex(0);
                ckbxChangeCourseName.setSelected(false);
                ckbxChangeCourseStartDate.setSelected(false);
                ckbxChangeCourseEndDate.setSelected(false);
                ckbxChangeCourseTeacher.setSelected(false);
                ckbxChangeCourseSubject.setSelected(false);
                ckbxChangeCourseRemoveAll.setSelected(false);

            } catch (InfException ex) {
                System.out.println(ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Kurs ID hittades ej. Kontrollera att du har valt en kurs från listan genom att klicka på den.");
        }

    }//GEN-LAST:event_btnChangeCourseRemoveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminActions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminActions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminActions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminActions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new AdminActions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdminAddCourses;
    private javax.swing.JButton btnAdminAddTeacher;
    private javax.swing.JButton btnAdminChangeCourses;
    private javax.swing.JButton btnAdminChangeTeacher;
    private javax.swing.JButton btnAdminDeleteStudent;
    private javax.swing.JButton btnChangeCourse;
    private javax.swing.JButton btnChangeCourseRemove;
    private javax.swing.JButton btnChangeCourseShowAll;
    private javax.swing.JButton btnChangeStudentCourse;
    private javax.swing.JButton btnChangeStudentGrade;
    private javax.swing.JButton btnChangeStudentPrefect;
    private javax.swing.JButton btnChangeStudentRemove;
    private javax.swing.JButton btnChangeTeacher;
    private javax.swing.JButton btnChangeTeacherAddLevel;
    private javax.swing.JButton btnChangeTeacherLevel;
    private javax.swing.JButton btnChangeTeacherPwd;
    private javax.swing.JButton btnChangeTeacherRemove;
    private javax.swing.JButton btnChangeTeacherRemoveLevel;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnRegisterCourse;
    private javax.swing.JButton btnRegisterTeacher;
    private javax.swing.JButton btnStudentChangeSearch;
    private javax.swing.JButton btnTeacher;
    private javax.swing.JButton btnTeacherChangeSearch;
    private javax.swing.JComboBox cBoxChangeCourseSubject;
    private javax.swing.JComboBox cBoxChangeCourseSubjectSort;
    private javax.swing.JComboBox cBoxChangeCourseTeacher;
    private javax.swing.JComboBox cBoxChangeStudentHouses;
    private javax.swing.JComboBox cBoxChangeTeacherAddLevel;
    private javax.swing.JComboBox cBoxChangeTeacherHouses;
    private javax.swing.JComboBox cBoxChangeTeacherNewLevel;
    private javax.swing.JComboBox cBoxChangeTeacherSubject;
    private javax.swing.JComboBox cBoxRegisterCourseSubject;
    private javax.swing.JCheckBox ckbxChangeCourseEndDate;
    private javax.swing.JCheckBox ckbxChangeCourseName;
    private javax.swing.JCheckBox ckbxChangeCourseRemoveAll;
    private javax.swing.JCheckBox ckbxChangeCourseStartDate;
    private javax.swing.JCheckBox ckbxChangeCourseSubject;
    private javax.swing.JCheckBox ckbxChangeCourseTeacher;
    private javax.swing.JCheckBox ckbxChangeStudentFirstName;
    private javax.swing.JCheckBox ckbxChangeStudentLastName;
    private javax.swing.JCheckBox ckbxChangeStudentPrefect;
    private javax.swing.JCheckBox ckbxChangeStudentRemoveAll;
    private javax.swing.JCheckBox ckbxChangeStudentRemovePrefect;
    private javax.swing.JCheckBox ckbxChangeStudentRoom;
    private javax.swing.JCheckBox ckbxChangeTeacherAdmin;
    private javax.swing.JCheckBox ckbxChangeTeacherFirstName;
    private javax.swing.JCheckBox ckbxChangeTeacherHead;
    private javax.swing.JCheckBox ckbxChangeTeacherLastName;
    private javax.swing.JCheckBox ckbxChangeTeacherPwd;
    private javax.swing.JCheckBox ckbxChangeTeacherRemoveAdmin;
    private javax.swing.JCheckBox ckbxChangeTeacherRemoveAll;
    private javax.swing.JCheckBox ckbxChangeTeacherRemoveHead;
    private javax.swing.JCheckBox ckbxRegisterTeacherAdmin;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblChangeCourse;
    private javax.swing.JLabel lblChangeCourseDone;
    private javax.swing.JLabel lblChangeCourseEndDate;
    private javax.swing.JLabel lblChangeCourseID;
    private javax.swing.JLabel lblChangeCourseIDText;
    private javax.swing.JLabel lblChangeCourseList;
    private javax.swing.JLabel lblChangeCourseListInfo;
    private javax.swing.JLabel lblChangeCourseName;
    private javax.swing.JLabel lblChangeCourseNewSubject;
    private javax.swing.JLabel lblChangeCourseOR;
    private javax.swing.JLabel lblChangeCourseRemove;
    private javax.swing.JLabel lblChangeCourseStartDate;
    private javax.swing.JLabel lblChangeCourseSubject;
    private javax.swing.JLabel lblChangeCourseTeacher;
    private javax.swing.JLabel lblChangeCourseText;
    private javax.swing.JLabel lblChangeSelectedStudent;
    private javax.swing.JLabel lblChangeSelectedTeacher;
    private javax.swing.JLabel lblChangeStudent;
    private javax.swing.JLabel lblChangeStudentCourse;
    private javax.swing.JLabel lblChangeStudentCourseInfo;
    private javax.swing.JLabel lblChangeStudentDone;
    private javax.swing.JLabel lblChangeStudentFirstName;
    private javax.swing.JLabel lblChangeStudentFirstNameSearch;
    private javax.swing.JLabel lblChangeStudentFound;
    private javax.swing.JLabel lblChangeStudentGradeInfo;
    private javax.swing.JLabel lblChangeStudentID;
    private javax.swing.JLabel lblChangeStudentInfo;
    private javax.swing.JLabel lblChangeStudentLastName;
    private javax.swing.JLabel lblChangeStudentLastNameSearch;
    private javax.swing.JLabel lblChangeStudentNameText;
    private javax.swing.JLabel lblChangeStudentRemove;
    private javax.swing.JLabel lblChangeStudentRemoveWarning;
    private javax.swing.JLabel lblChangeStudentSearch;
    private javax.swing.JLabel lblChangeTeacher;
    private javax.swing.JLabel lblChangeTeacherAddLevel;
    private javax.swing.JLabel lblChangeTeacherDone;
    private javax.swing.JLabel lblChangeTeacherFirstName;
    private javax.swing.JLabel lblChangeTeacherFirstNameSearch;
    private javax.swing.JLabel lblChangeTeacherFound;
    private javax.swing.JLabel lblChangeTeacherID;
    private javax.swing.JLabel lblChangeTeacherInfo;
    private javax.swing.JLabel lblChangeTeacherLastName;
    private javax.swing.JLabel lblChangeTeacherLastNameSearch;
    private javax.swing.JLabel lblChangeTeacherLevel;
    private javax.swing.JLabel lblChangeTeacherLevelInfo;
    private javax.swing.JLabel lblChangeTeacherNewLevel;
    private javax.swing.JLabel lblChangeTeacherNewPwd;
    private javax.swing.JLabel lblChangeTeacherPwdInfo;
    private javax.swing.JLabel lblChangeTeacherRemove;
    private javax.swing.JLabel lblChangeTeacherRemoveWarning;
    private javax.swing.JLabel lblChangeTeacherRemoveWarning1;
    private javax.swing.JLabel lblChangeTeacherRepeatPwd;
    private javax.swing.JLabel lblChangeTeacherSearch;
    private javax.swing.JLabel lblQuestion;
    private javax.swing.JLabel lblRegisterCourse;
    private javax.swing.JLabel lblRegisterCourseDone;
    private javax.swing.JLabel lblRegisterCourseEndDate;
    private javax.swing.JLabel lblRegisterCourseName;
    private javax.swing.JLabel lblRegisterCourseStartDate;
    private javax.swing.JLabel lblRegisterCourseSubject;
    private javax.swing.JLabel lblRegisterCourseSubjectInfo;
    private javax.swing.JLabel lblRegisterCourseTeacher;
    private javax.swing.JLabel lblRegisterCourseTeacherInfo;
    private javax.swing.JLabel lblRegisterTeacher;
    private javax.swing.JLabel lblRegisterTeacherChoosePwd;
    private javax.swing.JLabel lblRegisterTeacherRepeatPwd;
    private javax.swing.JLabel lblTeacherFirstName;
    private javax.swing.JLabel lblTeacherIsRegistered;
    private javax.swing.JLabel lblTeacherLastName;
    private javax.swing.JList lstChangeCourseList;
    private javax.swing.JList lstChangeStudent;
    private javax.swing.JList lstChangeStudentCourse;
    private javax.swing.JList lstChangeStudentGrade;
    private javax.swing.JList lstChangeTeacherLevel;
    private javax.swing.JList lstChangeTeachers;
    private javax.swing.JList lstRegisterCourseTeacher;
    private javax.swing.JPanel pnlAdminChangeCourse;
    private javax.swing.JPanel pnlAdminChangeStudent;
    private javax.swing.JPanel pnlAdminChangeTeacher;
    private javax.swing.JPanel pnlAdminMain;
    private javax.swing.JPanel pnlAdminRegisterCourse;
    private javax.swing.JPanel pnlAdminRegisterTeacher;
    private javax.swing.JPanel pnlStart;
    private javax.swing.JPasswordField pwdChangeTeacherNewPwd;
    private javax.swing.JPasswordField pwdChangeTeacherRepeatPwd;
    private javax.swing.JPasswordField pwdRegisterTeacherPwd;
    private javax.swing.JPasswordField pwdRegisterTeacherPwdRepeat;
    private javax.swing.JScrollPane scrChangeCourseList;
    private javax.swing.JScrollPane scrChangeStudent;
    private javax.swing.JScrollPane scrChangeStudentCourse;
    private javax.swing.JScrollPane scrChangeStudentGrade;
    private javax.swing.JScrollPane scrChangeTeacherLevel;
    private javax.swing.JScrollPane scrChangeTeachers;
    private javax.swing.JScrollPane scrRegisterCourseTeacher;
    private javax.swing.JTextArea txtAreaRegisterCourseDescription;
    private javax.swing.JTextField txtChangeCourseEndDate;
    private javax.swing.JTextField txtChangeCourseName;
    private javax.swing.JTextField txtChangeCourseStartDate;
    private javax.swing.JTextField txtChangeStudentFirstNameSearch;
    private javax.swing.JLabel txtChangeStudentIDText;
    private javax.swing.JTextField txtChangeStudentLastNameSearch;
    private javax.swing.JTextField txtChangeTeacherFirstName;
    private javax.swing.JTextField txtChangeTeacherFirstNameSearch;
    private javax.swing.JLabel txtChangeTeacherIDText;
    private javax.swing.JTextField txtChangeTeacherLastName;
    private javax.swing.JTextField txtChangeTeacherLastNameSearch;
    private javax.swing.JTextField txtRegisterCourseEndDate;
    private javax.swing.JTextField txtRegisterCourseName;
    private javax.swing.JTextField txtRegisterCourseStartDate;
    private javax.swing.JTextField txtRegisterTeacherFirstName;
    private javax.swing.JTextField txtRegisterTeacherLastName;
    // End of variables declaration//GEN-END:variables
}
