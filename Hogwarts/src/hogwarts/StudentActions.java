package hogwarts;

import java.util.ArrayList;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.awt.CardLayout;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author Henric Berg and Peter Karlsson
 */
public class StudentActions extends javax.swing.JFrame {
/*
    * Denna klass är elevernas gränssnitt. 
    *
    */
    
    InfDB db; //Deklarerar ett databas-fält.

    public StudentActions() { //Konstruktorn initialiserar databas-fältet genom att be Database-klassen att skicka tillbaks ett sådant objekt.
        initComponents();
        db = Database.getDB();
        getLayout("pnlStart");
    }

    public void getLayout(String panelName) {//Denna metods jobb är att initialisera, och visa olika containers beroende på vilken funktion/knapp som användaren vill utnyttja.
                                              //Metoden tar endast emot containerns/panelens namn - och visar den.
        CardLayout card = (CardLayout) pnlStudentMain.getLayout();
        card.show(pnlStudentMain, panelName);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblQuestion = new javax.swing.JLabel();
        btnLogOut = new javax.swing.JButton();
        btnStudentList = new javax.swing.JButton();
        btnTeacherCourse = new javax.swing.JButton();
        btnStudentCourse = new javax.swing.JButton();
        btnCourseGrade = new javax.swing.JButton();
        btnHouseCup = new javax.swing.JButton();
        btnPrefect = new javax.swing.JButton();
        pnlStudentMain = new javax.swing.JPanel();
        pnlStart = new javax.swing.JPanel();
        pnlStudentList = new javax.swing.JPanel();
        lblStudentList = new javax.swing.JLabel();
        cBoxHouses = new javax.swing.JComboBox();
        scrListStudents = new javax.swing.JScrollPane();
        lstStudents = new javax.swing.JList();
        lblStudentNames = new javax.swing.JLabel();
        lblChooseHouse = new javax.swing.JLabel();
        lblStudentListWarning = new javax.swing.JLabel();
        pnlListTeacherCourses = new javax.swing.JPanel();
        scrListTeacherCourses = new javax.swing.JScrollPane();
        lstTeacherCourses = new javax.swing.JList();
        lblTeacherCourse = new javax.swing.JLabel();
        lblTeacherCourseDescription = new javax.swing.JLabel();
        lblSelectDate = new javax.swing.JLabel();
        btnSearchTeacherCourses = new javax.swing.JButton();
        lblFrom = new javax.swing.JLabel();
        lblTo = new javax.swing.JLabel();
        txtStartDate = new javax.swing.JTextField();
        txtEndDate = new javax.swing.JTextField();
        lblTeacher = new javax.swing.JLabel();
        cBoxTeachers = new javax.swing.JComboBox();
        lblFormat = new javax.swing.JLabel();
        pnlHouseCup = new javax.swing.JPanel();
        lblCupStandings = new javax.swing.JLabel();
        scrHouseCupTxtArea = new javax.swing.JScrollPane();
        txtAreaHouseCup = new javax.swing.JTextArea();
        pnlListStudentCourses = new javax.swing.JPanel();
        scrListStudentCourses = new javax.swing.JScrollPane();
        lstStudentCourses = new javax.swing.JList();
        lblStudentCourses = new javax.swing.JLabel();
        lblStudentCourseDescription = new javax.swing.JLabel();
        btnSearchStudentCourses = new javax.swing.JButton();
        txtStudentCourseFirstName = new javax.swing.JTextField();
        lblStudentCourseName = new javax.swing.JLabel();
        txtStudentCourseLastName = new javax.swing.JTextField();
        lblStudentCourseFirstName = new javax.swing.JLabel();
        lblStudentCourseLastName = new javax.swing.JLabel();
        pnlStudentGrades = new javax.swing.JPanel();
        lblStudentGradeName = new javax.swing.JLabel();
        txtStudentGradeFirstName = new javax.swing.JTextField();
        scrListStudentGrades = new javax.swing.JScrollPane();
        lstStudentGrades = new javax.swing.JList();
        btnSearchStudentGrades = new javax.swing.JButton();
        txtStudentGradeLastName = new javax.swing.JTextField();
        lblGradeDescription = new javax.swing.JLabel();
        lblStudentGrades = new javax.swing.JLabel();
        lblStudentGradeFirstName = new javax.swing.JLabel();
        lblStudentGradeLastName = new javax.swing.JLabel();
        pnlShowPrefect = new javax.swing.JPanel();
        lblChoosePrefectHouse = new javax.swing.JLabel();
        lblPrefectName = new javax.swing.JLabel();
        lblShowPrefect = new javax.swing.JLabel();
        cBoxPrefectHouse = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        lblQuestion.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblQuestion.setText("Välj funktion:");

        btnLogOut.setText("Logga ut");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        btnStudentList.setText("Se lista över elever");
        btnStudentList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStudentListActionPerformed(evt);
            }
        });

        btnTeacherCourse.setText("Se lista över en lärares kurser");
        btnTeacherCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeacherCourseActionPerformed(evt);
            }
        });

        btnStudentCourse.setText("Se lista över en elevs kurser");
        btnStudentCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStudentCourseActionPerformed(evt);
            }
        });

        btnCourseGrade.setText("Se en elevs kursbetyg");
        btnCourseGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCourseGradeActionPerformed(evt);
            }
        });

        btnHouseCup.setText("Se ställningen i elevhemspokalen");
        btnHouseCup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHouseCupActionPerformed(evt);
            }
        });

        btnPrefect.setText("Visa prefekter");
        btnPrefect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrefectActionPerformed(evt);
            }
        });

        pnlStudentMain.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout pnlStartLayout = new javax.swing.GroupLayout(pnlStart);
        pnlStart.setLayout(pnlStartLayout);
        pnlStartLayout.setHorizontalGroup(
            pnlStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 625, Short.MAX_VALUE)
        );
        pnlStartLayout.setVerticalGroup(
            pnlStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 492, Short.MAX_VALUE)
        );

        pnlStudentMain.add(pnlStart, "pnlStart");

        lblStudentList.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblStudentList.setText("Elevlista efter elevhem");

        cBoxHouses.setToolTipText("");
        cBoxHouses.setPreferredSize(new java.awt.Dimension(90, 60));
        cBoxHouses.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cBoxHousesPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        scrListStudents.setBorder(null);

        lstStudents.setBackground(new java.awt.Color(240, 240, 240));
        scrListStudents.setViewportView(lstStudents);

        lblStudentNames.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblStudentNames.setText("Namnlista:");

        lblChooseHouse.setText("Välj elevhem:");

        lblStudentListWarning.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblStudentListWarning.setText("OBS! Endast elever med en tilldelad sovsal visas.");

        javax.swing.GroupLayout pnlStudentListLayout = new javax.swing.GroupLayout(pnlStudentList);
        pnlStudentList.setLayout(pnlStudentListLayout);
        pnlStudentListLayout.setHorizontalGroup(
            pnlStudentListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStudentListLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlStudentListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlStudentListLayout.createSequentialGroup()
                        .addComponent(lblStudentList)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlStudentListLayout.createSequentialGroup()
                        .addGroup(pnlStudentListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cBoxHouses, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlStudentListLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblChooseHouse)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                        .addGroup(pnlStudentListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrListStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStudentNames, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStudentListWarning))
                        .addGap(28, 28, 28))))
        );
        pnlStudentListLayout.setVerticalGroup(
            pnlStudentListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStudentListLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblStudentList)
                .addGap(18, 18, 18)
                .addGroup(pnlStudentListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblChooseHouse)
                    .addComponent(lblStudentNames, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlStudentListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlStudentListLayout.createSequentialGroup()
                        .addComponent(scrListStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStudentListWarning))
                    .addComponent(cBoxHouses, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(71, Short.MAX_VALUE))
        );

        pnlStudentMain.add(pnlStudentList, "pnlStudentList");

        scrListTeacherCourses.setBorder(null);

        lstTeacherCourses.setBackground(new java.awt.Color(240, 240, 240));
        lstTeacherCourses.setToolTipText("");
        scrListTeacherCourses.setViewportView(lstTeacherCourses);

        lblTeacherCourse.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblTeacherCourse.setText("Visa en lärares kurser");

        lblTeacherCourseDescription.setText("Kursnamn,   Startdatum,   Slutdatum:");

        lblSelectDate.setText("Datum:");

        btnSearchTeacherCourses.setText("Sök kurser");
        btnSearchTeacherCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchTeacherCoursesActionPerformed(evt);
            }
        });

        lblFrom.setText("Från");

        lblTo.setText("Till");

        txtStartDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtEndDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        lblTeacher.setText("Ange lärare:");

        lblFormat.setText("(åååå-mm-dd)");

        javax.swing.GroupLayout pnlListTeacherCoursesLayout = new javax.swing.GroupLayout(pnlListTeacherCourses);
        pnlListTeacherCourses.setLayout(pnlListTeacherCoursesLayout);
        pnlListTeacherCoursesLayout.setHorizontalGroup(
            pnlListTeacherCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListTeacherCoursesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlListTeacherCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlListTeacherCoursesLayout.createSequentialGroup()
                        .addComponent(lblTeacherCourse)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlListTeacherCoursesLayout.createSequentialGroup()
                        .addGroup(pnlListTeacherCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cBoxTeachers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlListTeacherCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnSearchTeacherCourses)
                                .addGroup(pnlListTeacherCoursesLayout.createSequentialGroup()
                                    .addGroup(pnlListTeacherCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblTo)
                                        .addComponent(lblFrom))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlListTeacherCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblFormat)
                                        .addGroup(pnlListTeacherCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(lblTeacher)
                                        .addComponent(lblSelectDate)))))
                        .addGap(97, 97, 97)
                        .addGroup(pnlListTeacherCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrListTeacherCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTeacherCourseDescription))
                        .addGap(19, 19, 19))))
        );
        pnlListTeacherCoursesLayout.setVerticalGroup(
            pnlListTeacherCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListTeacherCoursesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTeacherCourse)
                .addGap(31, 31, 31)
                .addGroup(pnlListTeacherCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTeacher)
                    .addComponent(lblTeacherCourseDescription))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlListTeacherCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlListTeacherCoursesLayout.createSequentialGroup()
                        .addComponent(cBoxTeachers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96)
                        .addComponent(lblSelectDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFormat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlListTeacherCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFrom))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlListTeacherCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchTeacherCourses)
                        .addGap(0, 139, Short.MAX_VALUE))
                    .addComponent(scrListTeacherCourses))
                .addContainerGap())
        );

        pnlStudentMain.add(pnlListTeacherCourses, "pnlListTeacherCourses");

        pnlHouseCup.setForeground(new java.awt.Color(240, 240, 240));
        pnlHouseCup.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pnlHouseCup.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lblCupStandings.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblCupStandings.setText("Ställning i Elevhemspokalen");

        scrHouseCupTxtArea.setBorder(null);

        txtAreaHouseCup.setBackground(new java.awt.Color(240, 240, 240));
        txtAreaHouseCup.setColumns(20);
        txtAreaHouseCup.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        txtAreaHouseCup.setRows(5);
        txtAreaHouseCup.setText("här skrivs poäng ut");
        txtAreaHouseCup.setBorder(null);
        scrHouseCupTxtArea.setViewportView(txtAreaHouseCup);

        javax.swing.GroupLayout pnlHouseCupLayout = new javax.swing.GroupLayout(pnlHouseCup);
        pnlHouseCup.setLayout(pnlHouseCupLayout);
        pnlHouseCupLayout.setHorizontalGroup(
            pnlHouseCupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHouseCupLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(lblCupStandings)
                .addContainerGap(123, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHouseCupLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(scrHouseCupTxtArea, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlHouseCupLayout.setVerticalGroup(
            pnlHouseCupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHouseCupLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(lblCupStandings)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(scrHouseCupTxtArea, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        pnlStudentMain.add(pnlHouseCup, "pnlHouseCup");

        scrListStudentCourses.setBorder(null);

        lstStudentCourses.setBackground(new java.awt.Color(240, 240, 240));
        lstStudentCourses.setToolTipText("");
        scrListStudentCourses.setViewportView(lstStudentCourses);

        lblStudentCourses.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblStudentCourses.setText("Visa en elevs kurser");

        lblStudentCourseDescription.setText("Kursnamn,   Startdatum,   Slutdatum:");

        btnSearchStudentCourses.setText("Sök kurser");
        btnSearchStudentCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchStudentCoursesActionPerformed(evt);
            }
        });

        lblStudentCourseName.setText(" ");

        lblStudentCourseFirstName.setText("Förnamn:");

        lblStudentCourseLastName.setText("Efternamn:");

        javax.swing.GroupLayout pnlListStudentCoursesLayout = new javax.swing.GroupLayout(pnlListStudentCourses);
        pnlListStudentCourses.setLayout(pnlListStudentCoursesLayout);
        pnlListStudentCoursesLayout.setHorizontalGroup(
            pnlListStudentCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListStudentCoursesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblStudentCourses)
                .addGap(0, 300, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlListStudentCoursesLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(pnlListStudentCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearchStudentCourses)
                    .addGroup(pnlListStudentCoursesLayout.createSequentialGroup()
                        .addGroup(pnlListStudentCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtStudentCourseFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStudentCourseFirstName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlListStudentCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStudentCourseLastName)
                            .addComponent(txtStudentCourseLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlListStudentCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStudentCourseDescription)
                    .addComponent(scrListStudentCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlListStudentCoursesLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(lblStudentCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlListStudentCoursesLayout.setVerticalGroup(
            pnlListStudentCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListStudentCoursesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblStudentCourses)
                .addGroup(pnlListStudentCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlListStudentCoursesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblStudentCourseName)
                        .addGap(13, 13, 13)
                        .addComponent(lblStudentCourseDescription)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scrListStudentCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlListStudentCoursesLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(pnlListStudentCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentCourseFirstName)
                            .addComponent(lblStudentCourseLastName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlListStudentCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtStudentCourseFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStudentCourseLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchStudentCourses)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblStudentCourseName.getAccessibleContext().setAccessibleName("");

        pnlStudentMain.add(pnlListStudentCourses, "pnlListStudentCourses");

        lblStudentGradeName.setText(" ");

        scrListStudentGrades.setBorder(null);

        lstStudentGrades.setBackground(new java.awt.Color(240, 240, 240));
        lstStudentGrades.setToolTipText("");
        scrListStudentGrades.setViewportView(lstStudentGrades);

        btnSearchStudentGrades.setText("Visa betyg");
        btnSearchStudentGrades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchStudentGradesActionPerformed(evt);
            }
        });

        lblGradeDescription.setText("Kursnamn,    Betyg,    Startdatum,   Slutdatum:");

        lblStudentGrades.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblStudentGrades.setText("Visa en elevs betyg");

        lblStudentGradeFirstName.setText("Förnamn:");

        lblStudentGradeLastName.setText("Efternamn:");

        javax.swing.GroupLayout pnlStudentGradesLayout = new javax.swing.GroupLayout(pnlStudentGrades);
        pnlStudentGrades.setLayout(pnlStudentGradesLayout);
        pnlStudentGradesLayout.setHorizontalGroup(
            pnlStudentGradesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStudentGradesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblStudentGrades)
                .addGap(0, 310, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStudentGradesLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(pnlStudentGradesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearchStudentGrades)
                    .addGroup(pnlStudentGradesLayout.createSequentialGroup()
                        .addGroup(pnlStudentGradesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtStudentGradeFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStudentGradeFirstName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlStudentGradesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStudentGradeLastName)
                            .addComponent(txtStudentGradeLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlStudentGradesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblGradeDescription)
                    .addComponent(scrListStudentGrades, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlStudentGradesLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(lblStudentGradeName, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlStudentGradesLayout.setVerticalGroup(
            pnlStudentGradesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStudentGradesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblStudentGrades)
                .addGroup(pnlStudentGradesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlStudentGradesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblStudentGradeName)
                        .addGap(13, 13, 13)
                        .addComponent(lblGradeDescription)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scrListStudentGrades, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlStudentGradesLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(pnlStudentGradesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentGradeFirstName)
                            .addComponent(lblStudentGradeLastName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlStudentGradesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtStudentGradeFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStudentGradeLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchStudentGrades)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlStudentMain.add(pnlStudentGrades, "pnlStudentGrades");

        lblChoosePrefectHouse.setText("Välj elevhem:");

        lblPrefectName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblPrefectName.setText(" ");

        lblShowPrefect.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblShowPrefect.setText("Visa prefekt efter elevhem");

        cBoxPrefectHouse.setToolTipText("");
        cBoxPrefectHouse.setPreferredSize(new java.awt.Dimension(90, 60));
        cBoxPrefectHouse.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cBoxPrefectHousePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        javax.swing.GroupLayout pnlShowPrefectLayout = new javax.swing.GroupLayout(pnlShowPrefect);
        pnlShowPrefect.setLayout(pnlShowPrefectLayout);
        pnlShowPrefectLayout.setHorizontalGroup(
            pnlShowPrefectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlShowPrefectLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlShowPrefectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cBoxPrefectHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlShowPrefectLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblChoosePrefectHouse))
                    .addComponent(lblShowPrefect)
                    .addComponent(lblPrefectName, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        pnlShowPrefectLayout.setVerticalGroup(
            pnlShowPrefectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlShowPrefectLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblShowPrefect)
                .addGap(62, 62, 62)
                .addComponent(lblPrefectName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(lblChoosePrefectHouse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cBoxPrefectHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(228, Short.MAX_VALUE))
        );

        pnlStudentMain.add(pnlShowPrefect, "pnlShowPrefect");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCourseGrade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnStudentCourse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTeacherCourse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnStudentList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPrefect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnHouseCup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblQuestion)
                            .addComponent(btnLogOut))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(25, 25, 25)
                .addComponent(pnlStudentMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlStudentMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(lblQuestion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStudentList, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(btnTeacherCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(btnStudentCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCourseGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnHouseCup, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPrefect, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLogOut)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnStudentListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStudentListActionPerformed
        //Denna knapp förbereder och visar 'visa elevlista'-funktionen
        
        
        DefaultListModel listModel = new DefaultListModel(); //DefaultListModel används för att förvara/läsa in information till t.ex. JLists
        
        lstStudents.setModel(listModel); //Nollställer fält
        cBoxHouses.removeAllItems(); 
        cBoxHouses.addItem("");
        try {

            ArrayList<String> houses = db.fetchColumn("select elevhemsnamn from elevhem"); //Hämtar elevhem

           
            if (!Validate.checkEmptyDBColumn(houses)) {

                for (String house :houses) {
                    cBoxHouses.addItem(house); //Läser in elevhem i lista
                    
                }

            }

        } catch (InfException ex) {

            System.out.println(ex.getMessage());

        }

        getLayout("pnlStudentList"); //Visar container


    }//GEN-LAST:event_btnStudentListActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        Start.welcome(); //Loggar ut/Visar startsidan igen
        dispose();
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnTeacherCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeacherCourseActionPerformed
        DefaultListModel listModel = new DefaultListModel(); 
        
        lstTeacherCourses.setModel(listModel); //Nollställer fält
        txtStartDate.setText("");
        txtEndDate.setText("");
        cBoxTeachers.removeAllItems();
        
        try {

            ArrayList<HashMap<String, String>> nameList = db.fetchRows("select fornamn, efternamn from larare"); //Hämtar lärare

            if (Validate.checkEmptyDBRows(nameList)) { //Kollar om några lärare hittades eller ej

            } else {
                for (HashMap<String, String> name : nameList) {

                    cBoxTeachers.addItem(name.get("FORNAMN") + " " + name.get("EFTERNAMN")); //läser in lärare i lista

                }
            }

        } catch (InfException ex) {

            System.out.println(ex.getMessage());

        }

        getLayout("pnlListTeacherCourses"); //Visar container

    }//GEN-LAST:event_btnTeacherCourseActionPerformed

    private void btnSearchTeacherCoursesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchTeacherCoursesActionPerformed

        String[] splitName = cBoxTeachers.getSelectedItem().toString().split(" "); //Delar upp lärarinformation
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd"); //SimpleDateFormat används för att formatera text till datumformat
        DefaultListModel listModel = new DefaultListModel();

        if (Validate.checkDateFormat(txtEndDate) && Validate.checkDateFormat(txtStartDate)) { //Kontrollerar så giltiga datumformat har angivits

            try {

                ArrayList<HashMap<String, String>> dateList = db.fetchRows("select kursnamn, kursstart, kursslut from kurs " //Hämtar lista över kurser/kursdatum
                        + "join larare on kurs.kurslarare = larare.LARAR_ID "
                        + "where fornamn = '" + splitName[0] + "' and efternamn = '" + splitName[1] + "'");

                if (Validate.checkEmptyDBRows(dateList)) { //Kollar om kurser hittades
                    JOptionPane.showMessageDialog(null, "Den angivna läraren har inga kurser registrerade mellan dessa datum."); 

                } else {
                    boolean coursesFound = false; //Denna boolean kollar om kurser hittades mellan angivna datum
                    for (HashMap<String, String> courses : dateList) { 
                        try {
                            Date startDate = format.parse(txtStartDate.getText()); //Gör om textfält till Date-objekt genom SimpleDateFormat
                            Date endDate = format.parse(txtEndDate.getText());

                            Date dbStartDate = format.parse(courses.get("KURSSTART")); //Gör om string till Date-objekt
                            Date dbEndDate = format.parse(courses.get("KURSSLUT"));
                            
                            if (startDate.before(dbStartDate) && endDate.after(dbEndDate)) { //Kollar om datum i kurslistan ligger mellan de angivna datumen
                                listModel.addElement(courses.get("KURSNAMN") + ",     " + courses.get("KURSSTART") + ",     " + courses.get("KURSSLUT")); //Läser in kurser i modellen
                                coursesFound = true; //Anger att kurser hittades
                            }

                        } catch (Exception ex) {
                             
                        }

                    }

                    if (!coursesFound) {
                        JOptionPane.showMessageDialog(null, "Den angivna läraren har inga kurser registrerade mellan dessa datum.");
                    }

                }

            } catch (InfException ex) {
                System.out.println(ex.getMessage());
            }

            lstTeacherCourses.setModel(listModel); //Laddar in modellen i listan

        }
    }//GEN-LAST:event_btnSearchTeacherCoursesActionPerformed

    private void btnHouseCupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHouseCupActionPerformed
        //Denna knapp hämtar elevhem och poäng och visar dem i en container
        
        
        try {

            String houseCup = "";
            ArrayList<HashMap<String, String>> houseList = db.fetchRows("select elevhemsnamn, huspoang from elevhem"); //Hämtar elevhem/poäng

            try {
                for (HashMap<String, String> house : houseList) {

                    houseCup = houseCup + house.get("ELEVHEMSNAMN") + ": " + house.get("HUSPOANG") + "\n" + "\n"; //Lägger till alla elevhem och poäng i string

                }
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
            txtAreaHouseCup.setText(houseCup); //String skrivs ut i en textruta

        } catch (InfException ex) {

            System.out.println(ex.getMessage());

        }

        getLayout("pnlHouseCup"); //Container visas
    }//GEN-LAST:event_btnHouseCupActionPerformed

    private void btnStudentCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStudentCourseActionPerformed
        //Denna knapp nollställer och visar elev-kurs-funktionen
        
        DefaultListModel listModel = new DefaultListModel();
        
        lstStudentCourses.setModel(listModel);//Nollställer fält
        txtStudentCourseFirstName.setText("");
        txtStudentCourseLastName.setText("");
        lblStudentCourseName.setText(" ");
        
        
        getLayout("pnlListStudentCourses"); //Visar container
    }//GEN-LAST:event_btnStudentCourseActionPerformed

    private void btnSearchStudentCoursesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchStudentCoursesActionPerformed
        //Denna knapp kontrollerar input och söker fram kurser som en elev är registrerad på
        
        
        DefaultListModel listModel = new DefaultListModel();

        if (Validate.textIsNotEmpty(txtStudentCourseFirstName) && Validate.textIsNotEmpty(txtStudentCourseLastName)) { //Kontrollerar om fälten är tomt

            try {

                ArrayList<HashMap<String, String>> studentCourseList = db.fetchRows("select kursnamn, kursstart, kursslut from KURS " //Hämtar lista över kurser
                        + "join REGISTRERAD_PA on kurs.kurs_id = REGISTRERAD_PA.KURS_ID "
                        + "join ELEV on REGISTRERAD_PA.elev_id = elev.ELEV_ID "
                        + "where fornamn = '" + txtStudentCourseFirstName.getText() + "' and efternamn = '" + txtStudentCourseLastName.getText() + "'");

                if (Validate.checkEmptyDBRows(studentCourseList)) { //Kollar om några kurser hittades
                    listModel.addElement("Inga kurser funna");
                    lblStudentCourseName.setText(" ");
                } else {

                    lblStudentCourseName.setText("Kurser för " + txtStudentCourseFirstName.getText() + " " + txtStudentCourseLastName.getText() + ":");

                    for (HashMap<String, String> courses : studentCourseList) {

                        listModel.addElement(courses.get("KURSNAMN") + ",     " + courses.get("KURSSTART") + ",     " + courses.get("KURSSLUT")); //Läser in kurser till modell

                    }

                }
            } catch (InfException ex) {
                System.out.println(ex);
            }

            lstStudentCourses.setModel(listModel); //Laddar modell till lista
            
            txtStudentCourseFirstName.setText(""); //Nollställer fält
            txtStudentCourseLastName.setText("");

        }
    }//GEN-LAST:event_btnSearchStudentCoursesActionPerformed

    private void btnCourseGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCourseGradeActionPerformed
        //Denna knapp nollställer och visar containern för studentbetyg
        
        DefaultListModel listModel = new DefaultListModel();
        
        lstStudentGrades.setModel(listModel); //Nollställer fält
        txtStudentGradeFirstName.setText("");
        txtStudentGradeLastName.setText("");
        lblStudentGradeName.setText(" ");
        
        getLayout("pnlStudentGrades"); //Visar container
    }//GEN-LAST:event_btnCourseGradeActionPerformed

    private void btnSearchStudentGradesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchStudentGradesActionPerformed
        //Denna knapp kontrollerar input och söker fram betyg som en elev har
        
        
        DefaultListModel listModel = new DefaultListModel();

        if (Validate.textIsNotEmpty(txtStudentGradeFirstName) && Validate.textIsNotEmpty(txtStudentGradeLastName)) { //Kontrollerar om fälten är tomma

            try {

                ArrayList<HashMap<String, String>> studentGradeList = db.fetchRows("select kursnamn, kursstart, kursslut, kursbetyg from HAR_BETYG_I " //Hämtar kurs/betyg information
                        + "join KURS on har_betyg_I.kurs_id = kurs.KURS_ID "
                        + "join ELEV on har_betyg_i.elev_id = elev.ELEV_ID "
                        + "where fornamn = '" + txtStudentGradeFirstName.getText() + "' and efternamn = '" + txtStudentGradeLastName.getText() + "'");

                if (Validate.checkEmptyDBRows(studentGradeList)) { //Kollar om kurser/betyg hittades
                    listModel.addElement("Inga betyg funna");
                    lblStudentGradeName.setText(" ");
                } else {
                    lblStudentGradeName.setText("Betyg för " + txtStudentGradeFirstName.getText() + " " + txtStudentGradeLastName.getText() + ":");

                    for (HashMap<String, String> grades : studentGradeList) {

                        listModel.addElement(grades.get("KURSNAMN") + ",     " + grades.get("KURSBETYG") + ",     " + grades.get("KURSSTART") + ",     " + grades.get("KURSSLUT")); //Läser in kursinfo/betyg i modell

                    }

                }
            } catch (InfException ex) {
                System.out.println(ex);
            }

            lstStudentGrades.setModel(listModel); //Laddar modell till lista
            
            txtStudentGradeFirstName.setText(""); //Nollställer fält
            txtStudentGradeLastName.setText("");

        }

    }//GEN-LAST:event_btnSearchStudentGradesActionPerformed

    private void btnPrefectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrefectActionPerformed
        //Denna knapp nollställer, förbereder och visar 'visa prefekt'-funktionen
        
        
        lblPrefectName.setText(" "); //Nollställer fätl
        cBoxPrefectHouse.removeAllItems();
        cBoxPrefectHouse.addItem("");
        try {

            ArrayList<String> houses = db.fetchColumn("select elevhemsnamn from elevhem"); //Hämtar elevhem

           
            
            if (!Validate.checkEmptyDBColumn(houses)) {

                for (String house : houses) {
                   
                    cBoxPrefectHouse.addItem(house); //Läser in elevhem till lista
                    
                }

            }

        } catch (InfException ex) {

            System.out.println(ex.getMessage());

        }

        getLayout("pnlShowPrefect"); //Visar container

    }//GEN-LAST:event_btnPrefectActionPerformed

    private void cBoxHousesPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cBoxHousesPopupMenuWillBecomeInvisible
          //Denna metod visar en elevlista när ett elevhem har valts i en combobox. Denna kod körs varje gång som comboboxen stängs.
        
        
        DefaultListModel listModel = new DefaultListModel();

          if (Validate.cBoxIsNotEmpty(cBoxHouses)) { //Kollar så att ett elevhem har valts
        try {

            ArrayList<String> roomList = db.fetchColumn("select sovsal_id from sovsal " //Hämtar sovsalar
                    + "join elevhem on sovsal.elevhem = elevhem.ELEVHEM_ID "
                    + "where elevhemsnamn = '" + cBoxHouses.getSelectedItem().toString() + "'");

           
            int roomIndex = 0;

            if (!Validate.checkEmptyDBColumn(roomList)) { //Kollar så sovsalar hittades

                while (roomIndex < roomList.size()) { //För varje sovsal som finns så letar vi efter elever i den sovsalen.

                    try {
                        ArrayList<HashMap<String, String>> studentNames = db.fetchRows("select fornamn, efternamn from elev where sovsal = '" + roomList.get(roomIndex) + "'"); //Hämtar elever

                        if (!Validate.checkEmptyDBRows(studentNames)) { //Kollar om elever hittades
                            for (HashMap<String, String> names : studentNames) { //För varje elev som finns i sovsalen skriver vi ut ett nytt namn

                                listModel.addElement(names.get("FORNAMN") + " " + names.get("EFTERNAMN")); //Läser in alla elever i sovsalen till listan
                                

                            }
                        }
                        

                    } catch (InfException ex) {
                        System.out.println(ex.getMessage());
                    }

                    roomIndex++;
                }
            } else {
                listModel.addElement("Inga elever funna");
            }


        } catch (InfException ex) {
            System.out.println(ex.getMessage());
        }
          }
          else {
              listModel.addElement("Välj ett elevhem");
          }
          
          lstStudents.setModel(listModel); //Laddar in modell till lista

    }//GEN-LAST:event_cBoxHousesPopupMenuWillBecomeInvisible

    private void cBoxPrefectHousePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cBoxPrefectHousePopupMenuWillBecomeInvisible
       //Denna metod visar elevhemsprefekt efter att ett elevhem har valts. Denna kod körs varje gång comboboxen stängs.
        
        
        if (Validate.cBoxIsNotEmpty(cBoxPrefectHouse)) { //Kollar så ett elevhem har valts
        try {

            ArrayList<HashMap<String, String>> prefectName = db.fetchRows("select fornamn, efternamn from ELEVHEM " //Hämtar prefekt
                    + "join elev on elevhem.prefekt = elev.ELEV_ID "
                    + "where elevhemsnamn = '" + cBoxPrefectHouse.getSelectedItem().toString() + "'");

            if (Validate.checkEmptyDBRows(prefectName)) { //Kollar om en prefekt hittades
                lblPrefectName.setText("Det valda elevhemmet har ingen prefekt.");
            } else {

                lblPrefectName.setText(cBoxPrefectHouse.getSelectedItem().toString() + "s prefekt är: " + prefectName.get(0).get("FORNAMN") + " " + prefectName.get(0).get("EFTERNAMN")); //Skriver ut elevhem och prefektens namn
            }

        } catch (InfException ex) {
            System.out.println(ex.getMessage());
        }
        }
        else {
             lblPrefectName.setText("");
        }
    }//GEN-LAST:event_cBoxPrefectHousePopupMenuWillBecomeInvisible

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentActions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentActions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentActions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentActions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentActions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCourseGrade;
    private javax.swing.JButton btnHouseCup;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnPrefect;
    private javax.swing.JButton btnSearchStudentCourses;
    private javax.swing.JButton btnSearchStudentGrades;
    private javax.swing.JButton btnSearchTeacherCourses;
    private javax.swing.JButton btnStudentCourse;
    private javax.swing.JButton btnStudentList;
    private javax.swing.JButton btnTeacherCourse;
    private javax.swing.JComboBox cBoxHouses;
    private javax.swing.JComboBox cBoxPrefectHouse;
    private javax.swing.JComboBox cBoxTeachers;
    private javax.swing.JLabel lblChooseHouse;
    private javax.swing.JLabel lblChoosePrefectHouse;
    private javax.swing.JLabel lblCupStandings;
    private javax.swing.JLabel lblFormat;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblGradeDescription;
    private javax.swing.JLabel lblPrefectName;
    private javax.swing.JLabel lblQuestion;
    private javax.swing.JLabel lblSelectDate;
    private javax.swing.JLabel lblShowPrefect;
    private javax.swing.JLabel lblStudentCourseDescription;
    private javax.swing.JLabel lblStudentCourseFirstName;
    private javax.swing.JLabel lblStudentCourseLastName;
    private javax.swing.JLabel lblStudentCourseName;
    private javax.swing.JLabel lblStudentCourses;
    private javax.swing.JLabel lblStudentGradeFirstName;
    private javax.swing.JLabel lblStudentGradeLastName;
    private javax.swing.JLabel lblStudentGradeName;
    private javax.swing.JLabel lblStudentGrades;
    private javax.swing.JLabel lblStudentList;
    private javax.swing.JLabel lblStudentListWarning;
    private javax.swing.JLabel lblStudentNames;
    private javax.swing.JLabel lblTeacher;
    private javax.swing.JLabel lblTeacherCourse;
    private javax.swing.JLabel lblTeacherCourseDescription;
    private javax.swing.JLabel lblTo;
    private javax.swing.JList lstStudentCourses;
    private javax.swing.JList lstStudentGrades;
    private javax.swing.JList lstStudents;
    private javax.swing.JList lstTeacherCourses;
    private javax.swing.JPanel pnlHouseCup;
    private javax.swing.JPanel pnlListStudentCourses;
    private javax.swing.JPanel pnlListTeacherCourses;
    private javax.swing.JPanel pnlShowPrefect;
    private javax.swing.JPanel pnlStart;
    private javax.swing.JPanel pnlStudentGrades;
    private javax.swing.JPanel pnlStudentList;
    private javax.swing.JPanel pnlStudentMain;
    private javax.swing.JScrollPane scrHouseCupTxtArea;
    private javax.swing.JScrollPane scrListStudentCourses;
    private javax.swing.JScrollPane scrListStudentGrades;
    private javax.swing.JScrollPane scrListStudents;
    private javax.swing.JScrollPane scrListTeacherCourses;
    private javax.swing.JTextArea txtAreaHouseCup;
    private javax.swing.JTextField txtEndDate;
    private javax.swing.JTextField txtStartDate;
    private javax.swing.JTextField txtStudentCourseFirstName;
    private javax.swing.JTextField txtStudentCourseLastName;
    private javax.swing.JTextField txtStudentGradeFirstName;
    private javax.swing.JTextField txtStudentGradeLastName;
    // End of variables declaration//GEN-END:variables
}
